{"version":3,"sources":["logo.svg","components/compstore/TableOfContents.jsx","components/compstore/NavBar.jsx","components/compstore/Section.jsx","components/compstore/List.jsx","components/compstore/SideBar.jsx","components/compstore/CodeSnip.jsx","components/compstore/SubSection.jsx","components/compstore/Code.jsx","components/introwebdev/index.js","components/introwebdev/IntroWebDev.jsx","components/intropython/index.js","components/intropython/IntroPython.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TableOfContents","props","children","length","console","log","List","items","map","Child","index","NavBar","id","className","onClick","window","location","href","style","padding","open","alt","height","width","src","Section","link","label","badge","ListItem","Nav","defaultActiveKey","child","Link","key","target","newPage","noNumbers","itemStyle","borderBottom","color","Item","Wrapper","Snip","Card","Body","Title","title","Subtitle","subtitle","Text","Example","Result","SubSection","Code","backgroundColor","borderRadius","margin","Line","tabs","i","fontSize","Description","IntroWebDev","Badge","variant","CardDeck","CodeSnip","type","alert","document","getElementById","value","display","border","textAlign","verticalAlign","Date","getMonth","getDay","Table","IntroPython","App","useState","setWindow","content","maxWidth","marginLeft","marginRight","SideBar","minWidth","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,4ICI5B,SAASC,EAAgBC,GACpC,IAAIC,EAAWD,EAAMC,SAMrB,OALKA,EAASC,SACVD,EAAW,CAACA,IAEhBE,QAAQC,IAAIH,GAGR,6BACI,6BACI,iDAGA,kBAACI,EAAD,CAAMC,MAAOL,KAGjB,6BACKA,EAASM,KAAI,SAACC,EAAOC,GAClB,OAAOD,OCpBZ,SAASE,EAAOV,GAE3B,OACI,6BACI,yBAAKW,GAAG,QAER,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,eACX,6BACI,yBAAKA,UAAU,SAAf,oBAKJ,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,cAAcC,QAAS,kBAAKC,OAAOC,SAASC,KAAK,wCAAhE,YAGA,yBAAKJ,UAAU,cAAcC,QAAS,kBAAMC,OAAOC,SAASC,KAAK,uCAAjE,YAGA,yBAAKJ,UAAU,cAAcC,QAAS,kBAAMC,OAAOC,SAASC,KAAK,yCAAjE,cAGA,yBAAKJ,UAAU,oCAAoCK,MAAO,CAAEC,QAAS,qBACjEL,QAAS,kBAAMC,OAAOK,KAAK,iDAC3B,yBAAKR,GAAG,MAAMC,UAAU,4BAA4BQ,IAAI,GAAGC,OAAO,KAAKC,MAAM,KACzEC,IAAI,uDAEZ,yBAAKX,UAAU,oCAAoCK,MAAO,CAAEC,QAAS,sBACjEL,QAAS,kBAAMC,OAAOK,KAAK,iCAC3B,yBAAKR,GAAG,MAAMC,UAAU,4BAA4BQ,IAAI,GAAGC,OAAO,KAAKC,MAAM,KACzEC,IAAI,gDAEZ,yBAAKX,UAAU,oCAAoCK,MAAO,CAAEC,QAAS,uBACjEL,QAAS,kBAAMC,OAAOK,KAAK,8DAC3B,yBAAKR,GAAG,MAAMC,UAAU,4BAA4BQ,IAAI,GAAGC,OAAO,KAAKC,MAAM,KACzEC,IAAI,qDCnCrB,SAASC,EAAQxB,GAE5B,OACI,yBAAKW,GAAIX,EAAMyB,KAAMb,UAAU,WAC3B,4BACKZ,EAAM0B,MADX,IACmB1B,EAAM2B,OAExB3B,EAAMC,U,YCTnB,SAAS2B,EAAS5B,GACd,OACI,0BAAMa,QAAS,kBAAMC,OAAOK,KAAKnB,EAAMyB,QAClCzB,EAAMC,UAKnB,SAASI,EAAKL,GACV,IAAIC,EAAWD,EAAMM,OAASN,EAAMC,SAIpC,OAHKA,EAASC,SACVD,EAAW,CAACA,IAGZ,kBAAC4B,EAAA,EAAD,CAAKC,iBAAiB,IAAIlB,UAAU,eAC/BX,EAAWA,EAASM,KAAI,SAACwB,EAAOtB,GAC7B,OACI,kBAACoB,EAAA,EAAIG,KAAL,CAAUC,IAAKxB,EAAOO,KAAM,IAAMe,EAAM/B,MAAMyB,KAAMS,OAAQlC,EAAMmC,QAAU,SAAW,IAClFnC,EAAMoC,UAAY,GAAK3B,EAAQ,EAAI,IADxC,IAC8CsB,EAAM/B,MAAM0B,OAASK,EAAM/B,MAAMC,SAD/E,IAC0F8B,EAAM/B,MAAM2B,UAGzG,MChBjB,IAAMU,EAAY,CACdC,aAAc,iBACdC,MAAO,WA8BI,OACXC,KA1BJ,SAAcxC,GACV,OACI,yBAAKiB,MAAOoB,EAAWzB,UAAU,eAAeC,QAASb,EAAMa,SAC1Db,EAAMC,WAwBfwC,QAnBJ,SAAiBzC,GACb,IAAIC,EAAWD,EAAMC,SAKrB,OAJKA,EAASC,SACVD,EAAW,CAACA,IAEhBE,QAAQC,IAAIH,GAER,wBAASD,EACL,yCAGCC,K,QCGE,OACXyC,KAjCJ,SAAc1C,GACV,OACI,kBAAC2C,EAAA,EAAD,CAAM1B,MAAO,CAACK,MAAO,UACjB,kBAACqB,EAAA,EAAKC,KAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,KAAa7C,EAAM8C,OACnB,kBAACH,EAAA,EAAKI,SAAN,CAAenC,UAAU,mBAAmBZ,EAAMgD,UAClD,kBAACL,EAAA,EAAKM,KAAN,KACKjD,EAAMC,aA2BvBiD,QApBJ,SAAiBlD,GACb,OACI,6BACI,uCADJ,IACoB,6BAChB,8BAAOA,EAAMC,YAiBrBkD,OAZJ,SAAgBnD,GACZ,OACI,6BACI,sCADJ,IACmB,6BACdA,EAAMC,YC5BJ,SAASmD,EAAWpD,GAE/B,OACI,yBAAKW,GAAIX,EAAMyB,KAAMb,UAAU,WAC3B,4BACKZ,EAAM0B,MADX,IACmB1B,EAAM2B,OAExB3B,EAAMC,UCiDJ,OACXoD,KAjDJ,SAAcrD,GACV,OACI,yBAAKiB,MAAO,CAACqC,gBAAiB,YAAapC,QAAS,MAAOqC,aAAc,MAAQC,OAAQ,QACrF,8BACKxD,EAAMC,YA8CnBwD,KAxCJ,SAAczD,GAGV,IAFA,IAAI0D,EAAO,GAEFC,EAAI,EAAGA,GAAK3D,EAAM0D,MAAQ,GAAIC,IACnCD,GAAQ,OAEZ,OACI,6BACKA,EAAM1D,EAAMC,WAiCrB4C,MA5BJ,SAAe7C,GACX,OACI,yBAAKiB,MAAO,CAAC2C,SAAU,SAClB5D,EAAMC,WA0Bf4D,YArBJ,SAAqB7D,GACjB,OACI,yBAAKiB,MAAO,IACR,2CADJ,IACyBjB,EAAMC,WAmBnCkD,OAdJ,SAAgBnD,GACZ,OACI,6BACI,sCAAc,6BACbA,EAAMC,WAWfwC,QA/DJ,SAAiBzC,GAEb,OACI,yBAAKiB,MAAO,CAAIuC,OAAQ,YACnBxD,EAAMC,Y,wBCJJ6D,MCWA,SAAqB9D,GAEhC,OACI,yBAAKY,UAAU,gBACX,4DAGA,+DAGA,gHAEI,2DAFJ,KAIA,kBAACb,EAAD,KACI,kBAACyB,EAAD,CAASC,KAAK,WAAWC,MAAM,kBAAkBC,MAAO,oCAAE,8BAAM,kBAACoC,EAAA,EAAD,CAC5DC,QAAQ,WADoD,UACtB,8BAAM,kBAACD,EAAA,EAAD,CAAOC,QAAQ,WAAf,WAC5C,8kBAQkF,kBAACD,EAAA,EAAD,CAC9EC,QAAQ,WADsE,SARlF,QASwC,kBAACD,EAAA,EAAD,CACpCC,QAAQ,WAD4B,QATxC,8EAaA,yPAKA,0EAEI,4BACI,gJAGA,qLAGA,qMAGA,2GACA,0OAOZ,kBAACxC,EAAD,CAASC,KAAM,YAAaC,MAAO,qBAAsBC,MAAO,oCAAE,8BAAM,kBAACoC,EAAA,EAAD,CACpEC,QAAQ,WAD4D,UAC9B,8BAAM,kBAACD,EAAA,EAAD,CAAOC,QAAQ,WAAf,WAC5C,8IAGI,4BACI,4BAAI,uBAAGhD,KAAM,wCAAT,oBAAJ,mDAGA,4BAAI,uBAAGA,KAAM,8BAAT,aAAJ,sHAGA,4BAAI,uBAAGA,KAAM,8BAAT,iBAAJ,kFAGA,4BAAI,uBAAGA,KAAM,4BAAT,mBAAJ,2EAGA,4BAAI,uBAAGA,KAAM,6EAAT,6BAAJ,oHAQZ,kBAACQ,EAAD,CAASC,KAAK,OAAOC,MAAM,2CAClBC,MAAO,oCAAE,8BAAM,kBAACoC,EAAA,EAAD,CACXC,QAAQ,WADG,UAC2B,8BAAM,kBAACD,EAAA,EAAD,CAC5CC,QAAQ,WADoC,WAErD,iQAKA,qLAIA,kBAAC3D,EAAD,CAAM8B,SAAS,GACX,kBAACP,EAAD,CAAUH,KAAK,kCAAf,qFAGA,kBAACG,EAAD,CAAUH,KAAK,uCAAf,0DAGA,kBAACG,EAAD,CAAUH,KAAK,oBAAf,uCAKR,kBAACD,EAAD,CAASC,KAAM,cAAeC,MAAO,sBAC5BC,MAAO,oCAAE,8BAAM,kBAACoC,EAAA,EAAD,CACXC,QAAQ,WADG,UAC2B,8BAAM,kBAACD,EAAA,EAAD,CAC5CC,QAAQ,WADoC,WAErD,gEACsC,uBAClChD,KAAM,gHAD4B,QADtC,oFAKA,0IAEoB,uBAAGA,KAAM,0BAAT,QAFpB,4GAIQ,uDAJR,eAIsD,uBAAGA,KAAK,QAAR,iBAJtD,sMAUJ,kBAACQ,EAAD,CAASC,KAAK,YAAYC,MAAM,sBAAsBC,MAAO,kBAACoC,EAAA,EAAD,CACzDC,QAAQ,WADiD,UAEzD,sdAQA,4JAEmC,yCAFnC,mEAKA,kBAAC,EAAKvB,QAAN,KACI,kBAAC,EAAKI,MAAN,8BAGA,kBAAC,EAAKQ,KAAN,KACI,kBAAC,EAAKI,KAAN,uDAIJ,kBAAC,EAAKI,YAAN,uIAKJ,2KAEgD,uBAC5C7C,KAAM,6DADsC,wBAFhD,IAII,kBAACiD,EAAA,EAAD,CAAU7B,WAAW,GACjB,kBAAC8B,EAASxB,KAAV,CAAeI,MAAO,cAAeE,SAAU,OAA/C,mIAIA,kBAACkB,EAASxB,KAAV,CAAeI,MAAO,gBAAiBE,SAAU,QAAjD,sJAIA,kBAACkB,EAASxB,KAAV,CAAeI,MAAO,UAAWE,SAAU,iBAA3C,mDAEI,kBAACkB,EAAShB,QAAV,2DAKR,kBAACe,EAAA,EAAD,KACI,kBAACC,EAASxB,KAAV,CAAeI,MAAO,YAAaE,SAAU,WAA7C,0JAGI,kBAACkB,EAAShB,QAAV,oCAIJ,kBAACgB,EAASxB,KAAV,CAAeI,MAAO,SAAUE,SAAU,UAA1C,mHAGI,kBAACkB,EAAShB,QAAV,yCAKR,kBAACe,EAAA,EAAD,KACI,kBAACC,EAASxB,KAAV,CAAeI,MAAO,gBAAiBE,SAAU,SAAjD,qFAGA,kBAACkB,EAASxB,KAAV,CAAeI,MAAO,gBAAiBE,SAAU,SAAjD,0KAIA,kBAACkB,EAASxB,KAAV,CAAeI,MAAO,UAAWE,SAAU,cAA3C,kHAGI,kBAACkB,EAAShB,QAAV,wCAKR,kBAACe,EAAA,EAAD,KAEI,kBAACC,EAASxB,KAAV,CAAeI,MAAO,kBAAmBE,SAAU,UAAnD,kDAEI,kBAACkB,EAAShB,QAAV,oCAGA,kBAACgB,EAASf,OAAV,KACI,2BAAOxC,GAAI,gBAAiBwD,KAAM,WAG1C,kBAACD,EAASxB,KAAV,CAAeI,MAAO,oBAAqBE,SAAU,WAArD,qDAEI,kBAACkB,EAAShB,QAAV,8DAGA,kBAACgB,EAASf,OAAV,KACI,4BAAQtC,QAAS,kBAAMuD,MAAMC,SAASC,eAAe,iBAAiBC,SAAtE,qBAQZ,kBAACN,EAAA,EAAD,KAEI,kBAACC,EAASxB,KAAV,CAAeI,MAAO,YAAaE,SAAU,oBAA7C,oBAEI,kBAACkB,EAAShB,QAAV,qBAGA,kBAACgB,EAASf,OAAV,KACI,4BACI,qCAIZ,kBAACe,EAASxB,KAAV,CAAeI,MAAO,YAAaE,SAAU,cAA7C,6DAEW,2CAFX,OAEyC,2CAFzC,IAGI,kBAACkB,EAAShB,QAAV,KACI,kBAAC,EAAKO,KAAN,aAGA,kBAAC,EAAKA,KAAN,CAAWC,KAAM,GAAjB,oCAGA,kBAAC,EAAKD,KAAN,eAIJ,kBAACS,EAASf,OAAV,KACI,4BACI,yCAIZ,kBAACe,EAASxB,KAAV,CAAeI,MAAO,YAAaE,SAAU,gBAA7C,qDAEI,kBAACkB,EAAShB,QAAV,qBAGA,kBAACgB,EAASf,OAAV,KACI,4BACI,4CAOxB,kBAAC3B,EAAD,CAASC,KAAK,WAAWC,MAAM,YAAYC,MAAO,kBAACoC,EAAA,EAAD,CAC9CC,QAAQ,WADsC,UAE9C,2OAKA,2BACI,8EAEJ,2TAKA,2BACI,0EAGJ,8GAGA,2BACI,kBAAC,EAAKvB,QAAN,KACI,kBAAC,EAAKY,KAAN,KACI,kBAAC,EAAKI,KAAN,oBACA,kBAAC,EAAKA,KAAN,CAAWC,KAAM,GAAjB,gBACA,kBAAC,EAAKD,KAAN,CAAWC,KAAM,GAAjB,8BACA,kBAAC,EAAKD,KAAN,UACA,kBAAC,EAAKA,KAAN,+EACQ,mCADR,KAEA,kBAAC,EAAKA,KAAN,CAAWC,KAAM,GAAjB,gBACA,kBAAC,EAAKD,KAAN,CAAWC,KAAM,GAAjB,8BACA,kBAAC,EAAKD,KAAN,aAIZ,oEAC0C,uBACtCzC,KAAM,qCADgC,iBAD1C,4CAKA,kBAACiD,EAAA,EAAD,KACI,kBAACC,EAASxB,KAAV,CAAeI,MAAO,QAASE,SAAU,cAAzC,0ZAKwD,uBAAGd,OAAO,SACPlB,KAAK,gDADR,QALxD,sCAOqC,iDAPrC,2FASsD,oDATtD,cAUO,8CAVP,IAWI,kBAACkD,EAAShB,QAAV,mEAIA,sCACA,yBAAKjC,MAAO,CAACsB,MAAO,uBAApB,iBAIR,kBAAC0B,EAAA,EAAD,KACI,kBAACC,EAASxB,KAAV,CAAeI,MAAO,SAAUE,SAAU,yBAA1C,oNAG+B,sCAH/B,IAII,kBAACkB,EAAShB,QAAV,mDAGA,sCACA,yBAAKjC,MAAO,CAACC,QAAS,MAAOoC,gBAAiB,SAAUC,aAAc,QAAtE,SAEI,yBAAKtC,MAAO,CACRsC,aAAc,MACdC,OAAQ,MACRF,gBAAiB,QACjBpC,QAAS,MACTqB,MAAO,UALX,UAQI,yBAAKtB,MAAO,CACRC,QAAS,MACTqC,aAAc,MACdD,gBAAiB,QACjBf,MAAO,UAJX,cAWZ,kBAAC2B,EAASxB,KAAV,CAAeI,MAAO,UAAWE,SAAU,mBAA3C,wNAII,kBAACkB,EAAShB,QAAV,mDAGA,sCACA,yBAAKjC,MAAO,CAACC,QAAS,MAAOoC,gBAAiB,SAAUC,aAAc,QAAtE,SAEI,yBAAKtC,MAAO,CACRsC,aAAc,MACdC,OAAQ,MACRF,gBAAiB,QACjBpC,QAAS,MACTqB,MAAO,UALX,UAQI,yBAAKtB,MAAO,CACRC,QAAS,MACTqC,aAAc,MACdD,gBAAiB,QACjBf,MAAO,UAJX,eAYhB,kBAAC0B,EAAA,EAAD,KACI,kBAACC,EAASxB,KAAV,CAAeI,MAAO,YAAaE,SAAU,aAA7C,+IAGI,kBAACkB,EAAShB,QAAV,sDAGA,sCACA,yBAAKjC,MAAO,CAAC2C,SAAU,SAAvB,cAEJ,kBAACM,EAASxB,KAAV,CAAeI,MAAO,mBAAoBE,SAAU,4BAApD,wIAGI,kBAACkB,EAAShB,QAAV,sEAGA,sCACA,yBAAKjC,MAAO,CAACqC,gBAAiB,WAAYf,MAAO,UAAjD,eAEJ,kBAAC2B,EAASxB,KAAV,CAAeI,MAAO,UAAWE,SAAU,WAA3C,mLAGO,sCAHP,yEAII,kBAACkB,EAAShB,QAAV,KACI,kBAAC,EAAKG,KAAN,KACI,kBAAC,EAAKI,KAAN,oCAGA,kBAAC,EAAKA,KAAN,CAAWC,KAAM,GAAjB,oBAGA,kBAAC,EAAKD,KAAN,CAAWC,KAAM,GAAjB,mBAGA,kBAAC,EAAKD,KAAN,iBAKR,kBAACS,EAASf,OAAV,KACI,yBAAKlC,MAAO,CAACuD,QAAS,gBAAtB,SACA,yBAAKvD,MAAO,CAACuD,QAAS,gBAAtB,YAIZ,kBAACP,EAAA,EAAD,KACI,kBAACC,EAASxB,KAAV,CAAeI,MAAO,mBAAoBE,SAAU,oBAApD,uIAGI,4BACI,gFACA,8EACA,2EACA,6EAPR,8BAS+B,uBAC3BhC,KAAK,kDADsB,iBAE3B,kBAACkD,EAAShB,QAAV,yDAGA,kBAAC,EAAKC,OAAN,KACI,yBAAKlC,MAAO,CAACK,MAAO,MAAOD,OAAQ,OAAQiC,gBAAiB,aAA5D,SAfR,uCAmBwC,qCAnBxC,eAqBA,kBAACY,EAASxB,KAAV,CAAeI,MAAO,SAAUE,SAAU,UAA1C,uLAGyD,+CAHzD,2GAK6C,+CAL7C,IAMI,kBAACkB,EAAShB,QAAV,yEAIA,kBAACgB,EAASf,OAAV,KACI,yBAAKlC,MAAO,CAACwD,OAAQ,kBAAmBlB,aAAc,QAAtD,sBAIZ,kBAACU,EAAA,EAAD,KACI,kBAACC,EAASxB,KAAV,CAAeI,MAAO,aAAcE,SAAU,6BAA9C,qDAEO,uCAFP,KAE2B,wCAF3B,OAEkD,qCAFlD,IAII,kBAACkB,EAAShB,QAAV,2DAGA,sCACA,yBAAKjC,MAAO,CAACyD,UAAW,WAAxB,gBAEJ,kBAACR,EAASxB,KAAV,CAAeI,MAAO,iBAAkBE,SAAU,4BAAlD,0JAGkC,sCAHlC,6BAII,kBAACkB,EAAShB,QAAV,2EAGA,sCACA,yBAAKjC,MAAO,CAAC0D,cAAe,SAAUH,QAAS,cAAenD,OAAQ,SAAtE,iBAMZ,kBAACG,EAAD,CAASC,KAAM,UAAWC,MAAO,mBAAoBC,MAAO,kBAACoC,EAAA,EAAD,CACxDC,QAAQ,WADgD,SAExD,uYAQA,kBAACZ,EAAD,CAAY3B,KAAM,mBAAoBC,MAAO,aAA7C,oEAEU,qCAFV,KAE4B,qCAF5B,QAEiD,uCAFjD,gLAI6D,oCAJ7D,yHAOI,kBAAC,EAAKe,QAAN,KACI,kBAAC,EAAKI,MAAN,oDAGA,kBAAC,EAAKQ,KAAN,KACI,kBAAC,EAAKI,KAAN,+BAGA,kBAAC,EAAKA,KAAN,+BAGA,kBAAC,EAAKA,KAAN,uCAKJ,kBAAC,EAAKI,YAAN,KACI,qCADJ,6EAEW,qCAFX,8DAGsD,uCAHtD,qFAOJ,kBAAC,EAAKpB,QAAN,KACI,kBAAC,EAAKI,MAAN,uBAGA,kBAAC,EAAKQ,KAAN,KACI,kBAAC,EAAKI,KAAN,+BAC2B,0BACvBxC,MAAO,CAACsB,MAAO,sBADQ,UAD3B,4DAMA,kBAAC,EAAKkB,KAAN,2BACwB,IAAImB,MAAQC,WAAa,EADjD,WAC2D,0BACvD5D,MAAO,CAACsB,MAAO,sBADwC,WAD3D,mDAKA,kBAAC,EAAKkB,KAAN,mCAC+B,0BAC3BxC,MAAO,CAACsB,MAAO,sBADY,SAD/B,6CAKA,kBAAC,EAAKkB,KAAN,2BACkD,KAAzB,IAAImB,MAAQE,SAAiB,OAAS,QAD/D,SAC6E,0BACzE7D,MAAO,CAACsB,MAAO,sBAD0D,WAD7E,8BAKA,kBAAC,EAAKkB,KAAN,gCAC0B,0BACtBxC,MAAO,CAACsB,MAAO,sBADO,UAD1B,iEAMA,kBAAC,EAAKkB,KAAN,8BAGA,kBAAC,EAAKA,KAAN,4BAGA,kBAAC,EAAKA,KAAN,2DACuD,8DAGvD,kBAAC,EAAKA,KAAN,0CACsC,0BAClCxC,MAAO,CAACsB,MAAO,sBADmB,SADtC,sDAMJ,kBAAC,EAAKsB,YAAN,yDAKR,kBAACT,EAAD,CAAY3B,KAAM,mBAAoBC,MAAO,aACzC,sOAKA,0SAOA,2BACI,kBAAC,EAAKe,QAAN,KACI,kBAAC,EAAKI,MAAN,4BAGA,kBAAC,EAAKQ,KAAN,KACI,kBAAC,EAAKI,KAAN,kCAGA,kBAAC,EAAKA,KAAN,6BAGA,kBAAC,EAAKA,KAAN,WAIJ,kBAAC,EAAKI,YAAN,sJAOR,8KAIA,2BACI,kBAAC,EAAKpB,QAAN,KACI,kBAAC,EAAKI,MAAN,2BAGA,kBAAC,EAAKQ,KAAN,KACI,kBAAC,EAAKI,KAAN,+BAGA,kBAAC,EAAKA,KAAN,+CAIJ,kBAAC,EAAKI,YAAN,yQAWZ,kBAACT,EAAD,CAAY3B,KAAM,eAAgBC,MAAO,SACrC,kXAKA,kBAAC,EAAKe,QAAN,KACI,kBAAC,EAAKI,MAAN,iBAGA,kBAAC,EAAKQ,KAAN,KACI,kBAAC,EAAKI,KAAN,oCAGA,kBAAC,EAAKA,KAAN,qBAGA,kBAAC,EAAKA,KAAN,aACS,0BAAMxC,MAAO,CAACsB,MAAO,YAArB,aADT,KAC4D,0BACxDtB,MAAO,CAACsB,MAAO,YADyC,2BAD5D,IAE4D,0BACxDtB,MAAO,CAACsB,MAAO,YADyC,QAF5D,UAPJ,sBAYwB,0BAAMtB,MAAO,CAACsB,MAAO,YAArB,aACpB,kBAAC,EAAKkB,KAAN,KACK,MAIT,kBAAC,EAAKI,YAAN,2IAEyD,0BAAM5C,MAAO,CAACsB,MAAO,YAArB,aAFzD,8BAG2C,0BACvCtB,MAAO,CAACsB,MAAO,YADwB,2BAH3C,kDAKsB,0BAClBtB,MAAO,CAACsB,MAAO,YADG,OALtB,8DAOa,0BAAMtB,MAAO,CAACsB,MAAO,YAArB,aAPb,+EAQkD,GARlD,gCAsDZ,kBAACf,EAAD,CAASC,KAAM,YAAaC,MAAO,gCAC1BC,MAAO,kBAACoC,EAAA,EAAD,CAAOC,QAAS,WAAhB,SACZ,iLAIS,oDAJT,sGAOA,kBAACZ,EAAD,CAAY3B,KAAM,kBAAmBqB,MAAO,aACxC,yIAKJ,kBAAC,EAAKL,QAAN,KACI,kBAAC,EAAKI,MAAN,kBAGA,kBAAC,EAAKQ,KAAN,KACI,kBAAC,EAAKI,KAAN,eAGA,kBAAC,EAAKA,KAAN,eAGA,kBAAC,EAAKA,KAAN,CAAWC,KAAM,GAAjB,4BAGA,kBAAC,EAAKD,KAAN,CAAWC,KAAM,GAAjB,sDAGA,kBAAC,EAAKD,KAAN,gBAGA,kBAAC,EAAKA,KAAN,KACK,YAGT,kBAAC,EAAKI,YAAN,mNAMJ,kBAAC,EAAKpB,QAAN,KACI,kBAAC,EAAKI,MAAN,sCAGA,kBAAC,EAAKQ,KAAN,KACI,kBAAC,EAAKI,KAAN,eAGA,kBAAC,EAAKA,KAAN,eAGA,kBAAC,EAAKA,KAAN,CAAWC,KAAM,GAAjB,YAGA,kBAAC,EAAKD,KAAN,CAAWC,KAAM,GAAjB,oCAGA,kBAAC,EAAKD,KAAN,CAAWC,KAAM,GAAjB,6DAGA,kBAAC,EAAKD,KAAN,CAAWC,KAAM,GAAjB,kCAGA,kBAAC,EAAKD,KAAN,CAAWC,KAAM,GAAjB,gBAGA,kBAAC,EAAKD,KAAN,CAAWC,KAAM,GAAjB,KAGA,kBAAC,EAAKD,KAAN,CAAWC,KAAM,GAAjB,YAGA,kBAAC,EAAKD,KAAN,gBAGA,kBAAC,EAAKA,KAAN,eAGA,kBAAC,EAAKA,KAAN,CAAWC,KAAM,GAAjB,4BAGA,kBAAC,EAAKD,KAAN,CAAWC,KAAM,GAAjB,iDAGA,kBAAC,EAAKD,KAAN,gBAGA,kBAAC,EAAKA,KAAN,KACK,YAIT,kBAAC,EAAKI,YAAN,+WAOA,kBAAC,EAAKV,OAAN,KACI,2BAAOxC,GAAI,iBACX,4BAAQE,QAAS,kBAAMuD,MAAMC,SAASC,eAAe,gBAAgBC,SAArE,aAKZ,kBAAC/C,EAAD,CAASC,KAAK,WAAWC,MAAM,WAAWC,MAAO,8BAAM,kBAACoC,EAAA,EAAD,CAAOC,QAAS,WAAhB,SAAwC,kBAACD,EAAA,EAAD,CAC3FC,QAAS,WADkF,UAA/F,2GAII,kBAACe,EAAA,EAAD,KACI,+BACA,4CAGA,oCAGA,2CAGA,0CAGA,+CAIA,+BACA,4BACI,wCAGA,4BACI,kBAAChB,EAAA,EAAD,CAAOC,QAAS,WAAhB,UAEJ,oGAGA,oCAGA,2CAIJ,4BACI,iDAGA,4BACI,kBAACD,EAAA,EAAD,CAAOC,QAAS,WAAhB,UAEJ,uGAGA,oCAGA,uCAIJ,4BACI,kDAGA,4BACI,kBAACD,EAAA,EAAD,CAAOC,QAAS,WAAhB,UAEJ,0FAGA,4CAGA,uCAIJ,4BACI,0CAGA,4BACI,kBAACD,EAAA,EAAD,CAAOC,QAAS,WAAhB,SAEJ,2HAIA,sCAGA,uCAIJ,4BACI,oDAGA,4BACI,kBAACD,EAAA,EAAD,CAAOC,QAAS,WAAhB,SAEJ,0JAIA,sCAGA,yCAMR,8BAIJ,kBAACxC,EAAD,CAASC,KAAM,YAAaC,MAAO,aAC1BC,MAAO,8BAAM,kBAACoC,EAAA,EAAD,CAAOC,QAAS,WAAhB,SAAwC,kBAACD,EAAA,EAAD,CACjDC,QAAS,WADwC,UAE1D,6OAKA,qIAKA,wOAKA,kBAACZ,EAAD,CAAY1B,MAAO,qBAAsBC,MAAO,kBAACoC,EAAA,EAAD,CAAOC,QAAS,WAAhB,UAC5C,2IAII,4BACI,4BACI,uBAAGhD,KAAM,uBAAT,UADJ,oFAIA,4BACI,uBAAGA,KAAM,wBAAT,SADJ,uNAOA,4BACI,uBAAGA,KAAM,uBAAT,WADJ,sEAQZ,kBAACoC,EAAD,CAAY1B,MAAO,YAAaC,MAAO,kBAACoC,EAAA,EAAD,CAAOC,QAAS,WAAhB,SACnC,qfASA,oJAEqD,uBACjDhD,KAAM,4DAD2C,mBAFrD,oEAMA,kRAII,4BACI,4BACI,uBAAGA,KAAM,4BAAT,WADJ,8DAIA,4BACI,uBAAGA,KAAM,0BAAT,SADJ,iDAIA,4BACI,uBAAGA,KAAM,+BAAT,cADJ,kFAGgD,uBAC5CA,KAAM,wDADsC,QAHhD,QASZ,kBAACoC,EAAD,CAAY1B,MAAO,sDACPC,MAAO,8BAAM,kBAACoC,EAAA,EAAD,CAAOC,QAAS,WAAhB,QAAuC,kBAACD,EAAA,EAAD,CAChDC,QAAS,WADuC,UAE5D,qUAIgD,uBAC5ChD,KAAM,0EADsC,qBAJhD,sCAO2B,uBAAGA,KAAM,iDAAT,UAP3B,2IAaJ,kBAACoC,EAAD,CAAY1B,MAAO,oBACf,2GACiF,uBAC7EV,KAAM,sBADuE,UADjF,oHAG+D,uBAC3DA,KAAM,uCADqD,sCAH/D,6GAOuB,uBAAGA,KAAM,kCAAT,iBAPvB,6EAQgE,uBAC5DA,KAAM,2DADsD,eARhE,uFC3jCTgE,MCKA,SAAqBhF,GAEhC,OACI,yBAAKY,UAAU,gBACX,iDAGA,mEAGA,kBAACb,EAAD,KACI,kBAACyB,EAAD,CAASC,KAAK,WAAWC,MAAM,mBAC3B,iD,YC8BLuD,MAhCf,WAAgB,IAAD,EACiBC,mBAAS,GAD1B,mBACLpE,EADK,KACGqE,EADH,KAIX,GADAhF,QAAQC,IAAIU,GACG,IAAXA,EACA,IAAIsE,EAAU,kBAAC,EAAD,WACX,GAAe,IAAXtE,EACHsE,EAAU,kBAAC,EAAD,MAIlB,OACI,yBAAKxE,UAAU,MAAMK,MAAO,CAACqC,gBAAiB,UAC1C,kBAAC5C,EAAD,MACA,yBAAKO,MAAO,CAACuD,QAAS,OAAQa,SAAU,SAAUC,WAAY,OAAQC,YAAa,SAC/E,kBAACC,EAAQ/C,QAAT,CAAiBxB,MAAO,CAACwE,SAAU,QAASJ,SAAU,UAClD,kBAACG,EAAQhD,KAAT,CAAc3B,QAAS,kBAAMsE,EAAU,KAAvC,oBAGA,kBAACK,EAAQhD,KAAT,CAAc3B,QAAS,kBAAMsE,EAAU,KAAvC,oBAIJ,6BACKC,MC7BDM,QACW,cAA7B5E,OAAOC,SAAS4E,UAEe,UAA7B7E,OAAOC,SAAS4E,UAEhB7E,OAAOC,SAAS4E,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASzB,SAASC,eAAe,SD4H3C,kBAAmByB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.44752c13.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Nav } from 'react-bootstrap';\nimport { List } from './index';\n\nexport default function TableOfContents(props) {\n    var children = props.children\n    if (!children.length) {\n        children = [children]\n    }\n    console.log(children);\n\n    return (\n        <div>\n            <div>\n                <h3>\n                    Table of Contents\n                </h3>\n                <List items={children} />\n  \n            </div>\n            <div>\n                {children.map((Child, index) => {\n                    return Child\n                })}\n            </div>\n\n        </div>\n    )\n}","import React from 'react';\n\nexport default function NavBar(props) {\n\n    return (\n        <div>\n            <div id='top'></div>\n\n            <div className='topbar-wrapper'>\n                <div className='topbar flex'>\n                    <div>\n                        <div className='title'>\n                            Intro to Coding\n                        </div>\n                    \n                    </div>\n                    <div className='topbar-buttons flex'>\n                        <div className='topbar-link' onClick={()=> window.location.href=\"http://www.alexwurts.com/#biography\"}>\n                            About Me\n                        </div>\n                        <div className='topbar-link' onClick={() => window.location.href=\"http://www.alexwurts.com/#projects\"}>\n                            Projects\n                        </div>\n                        <div className='topbar-link' onClick={() => window.location.href=\"http://www.alexwurts.com/#experience\"}>\n                            Experience\n                        </div>\n                        <div className='topbar-link-instalogo topbar-link' style={{ padding: \"6px 10px 7px 10px\" }}\n                            onClick={() => window.open(\"https:\\/\\/www.instagram.com/programmingpilot/\")}>\n                            <img id=\"img\" className=\"style-scope yt-img-shadow\" alt=\"\" height=\"30\" width=\"30\"\n                                src=\"http://www.alexwurts.com/images/IG_Glyph_Fill.png\" />\n                        </div>\n                        <div className='topbar-link-instalogo topbar-link' style={{ padding: \"9px 10px 11px 10px\" }}\n                            onClick={() => window.open(\"https:\\/\\/github.com/ajwurts/\")}>\n                            <img id=\"img\" className=\"style-scope yt-img-shadow\" alt=\"\" height=\"23\" width=\"23\"\n                                src=\"http://www.alexwurts.com/images/github.png\" />\n                        </div>\n                        <div className='topbar-link-instalogo topbar-link' style={{ padding: \"10px 10px 11px 10px\" }}\n                            onClick={() => window.open(\"https:\\/\\/www.youtube.com/channel/UC-dU4MIIpMOjTzn55ALJIaA\")}>\n                            <img id=\"img\" className=\"style-scope yt-img-shadow\" alt=\"\" height=\"22\" width=\"32\"\n                                src=\"http://www.alexwurts.com/images/youtube.png\" />\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport { Badge } from 'react-bootstrap';\n\n\nexport default function Section(props) {\n\n    return (\n        <div id={props.link} className='section'>\n            <h3>\n                {props.label} {props.badge}\n            </h3>\n            {props.children}\n            {/* Add Back to Top Link */}\n        </div>\n    )\n}","import React from 'react';\nimport { Nav } from 'react-bootstrap'\nfunction ListItem(props) {\n    return (\n        <span onClick={() => window.open(props.link)}>\n            {props.children}\n        </span>\n    )\n}\n\nfunction List(props) {\n    var children = props.items || props.children;\n    if (!children.length) {\n        children = [children]\n    }\n    return (\n        <Nav defaultActiveKey=\"/\" className=\"flex-column\">\n            {children ? children.map((child, index) => {\n                return (\n                    <Nav.Link key={index} href={'#' + child.props.link} target={props.newPage ? \"_blank\" : \"\"}>\n                        {props.noNumbers ? \"\" : index + 1 + \".\"} {child.props.label || child.props.children} {child.props.badge}\n                    </Nav.Link>\n                )\n            }) : null}\n        </Nav>\n    )\n}\n\n\nexport {\n    List,\n    ListItem\n}","import React from 'react';\nimport {List} from \"./List\";\n\nconst wrapperStyle = {\n\n}\n\nconst itemStyle = {\n    borderBottom: \"1px solid gray\",\n    color: '#007bff',\n\n}\n\n\nfunction Item(props) {\n    return (\n        <div style={itemStyle} className=\"sidebar-item\" onClick={props.onClick}>\n            {props.children}\n        </div>\n    )\n}\n\nfunction Wrapper(props) {\n    let children = props.children;\n    if (!children.length) {\n        children = [children]\n    }\n    console.log(children);\n    return (\n        <div {...props}>\n            <h4>\n                Tutorials\n            </h4>\n            {children}\n        </div>\n    );\n\n}\n\nexport default {\n    Item,\n    Wrapper\n}\n\n","import React from 'react';\nimport {Card} from 'react-bootstrap';\nimport {CodeSnip} from \"./index\";\n\nfunction Snip(props) {\n    return (\n        <Card style={{width: '18rem'}}>\n            <Card.Body>\n                <Card.Title>{props.title}</Card.Title>\n                <Card.Subtitle className=\"mb-2 text-muted\">{props.subtitle}</Card.Subtitle>\n                <Card.Text>\n                    {props.children}\n                </Card.Text>\n\n            </Card.Body>\n        </Card>)\n}\n\nfunction Example(props) {\n    return (\n        <div>\n            <b>Example:</b> <br/>\n            <code>{props.children}</code>\n        </div>\n    );\n}\n\nfunction Result(props) {\n    return (\n        <div>\n            <b>Result:</b> <br/>\n            {props.children}\n        </div>\n    )\n}\n\nexport default {\n    Snip,\n    Example,\n    Result\n}","import React from 'react';\n\n\nexport default function SubSection(props) {\n\n    return (\n        <div id={props.link} className='section'>\n            <h4>\n                {props.label} {props.badge}\n            </h4>\n            {props.children}\n        </div>\n    )\n}","import React from 'react'\n\nfunction Wrapper(props) {\n\n    return (\n        <div style={{   margin: \"8px 0px\"}}>\n            {props.children}\n        </div>\n    )\n}\n\nfunction Code(props) {\n    return (\n        <pre style={{backgroundColor: \"lightgray\", padding: \"5px\", borderRadius: \"6px\",  margin: \"5px\"}}>\n            <code>\n                {props.children}\n            </code>\n        </pre>\n    )\n}\n\nfunction Line(props) {\n    let tabs = ''\n\n    for (let i = 0; i < (props.tabs || 0); i++) {\n        tabs += '    '\n    }\n    return (\n        <div>\n            {tabs}{props.children}\n        </div>\n    )\n}\n\nfunction Title(props) {\n    return (\n        <div style={{fontSize: \"20px\"}}>\n            {props.children}\n        </div>\n    )\n}\n\nfunction Description(props) {\n    return (\n        <div style={{}}>\n            <b>Explanation:</b> {props.children}\n        </div>\n    )\n}\n\nfunction Result(props) {\n    return (\n        <div>\n            <b>Result:</b><br/>\n            {props.children}\n        </div>\n    )\n}\n\nexport default {\n    Code,\n    Line,\n    Title,\n    Description,\n    Result,\n    Wrapper\n}","import IntroWebDev from './IntroWebDev';\n\nexport default IntroWebDev;","import React from 'react';\nimport {\n    TableOfContents,\n    Section,\n    List,\n    ListItem,\n    CodeSnip,\n    SubSection,\n    Code\n} from '../compstore';\n\nimport {Badge, Table, CardDeck} from 'react-bootstrap';\n\nexport default function IntroWebDev(props) {\n\n    return (\n        <div className='page-wrapper'>\n            <h1>\n                Welcome to Intro to Web Dev.\n            </h1>\n            <h4>\n                A minimal guide to get started.\n            </h4>\n            <p>\n                If you have any questions, comments, or think there is an error please email me at\n                <b> alexwurtsfeedback@gmail.com</b>.\n            </p>\n            <TableOfContents>\n                <Section link=\"starting\" label=\"Getting Started\" badge={<><span><Badge\n                    variant=\"primary\">Front</Badge></span><span><Badge variant=\"success\">Back</Badge></span></>}>\n                    <p>\n                        Web development can mean a lot of different things. It's important to have a clear learning\n                        goal. For example if you are interested in user interfaces or front end design it's best to\n                        learn\n                        HTML and CSS first than move to JS for interactive web pages. If you are interested in\n                        creating interactive applications, or programming the site logic then backend may be a good\n                        place to start. This\n                        tutorial will cover three topics Front End Development, Backend Development, and Full Stack\n                        development (both frontend and backend). Every section will be labeled either <Badge\n                        variant=\"primary\">Front</Badge>, or <Badge\n                        variant=\"success\">Back</Badge>. Based on what your goal\n                        is you can choose to read the relevant sections.\n                    </p>\n                    <p>\n                        This tutorial is to give you an flavor of web development and link to resources to expand your\n                        knowledge. It provides a brief overview so you can start connecting the pieces to understand how\n                        a web page is constructed.\n                    </p>\n                    <p>\n                        Here are a few key tips to help you succeed:\n                        <ul>\n                            <li>Programming is difficult, you can't expect to pick it up in only a few hours. It will\n                                require practice and time.\n                            </li>\n                            <li>Google is a programmers best friend. Learning how to Google effectively is a skill.\n                                Checkout my tutorial on how to Google on the left. Coming soon...\n                            </li>\n                            <li>For frontend find simple website and try to remake them. Don't worry about interaction\n                                or colors at the start, try to replicate the structure and move up from there.\n                            </li>\n                            <li>Having a project to motivate your work is key. Check out the project ideas.</li>\n                            <li>If you start with web development and aren't sure you like it try exploring Python. It\n                                allows you to dive into the code faster without needing to learn as much syntax. I'll be\n                                making a tutorial soon.\n                            </li>\n                        </ul>\n                    </p>\n                </Section>\n                <Section link={\"resources\"} label={\"Learning Resources\"} badge={<><span><Badge\n                    variant=\"primary\">Front</Badge></span><span><Badge variant=\"success\">Back</Badge></span></>}>\n                    <p>\n                        There are a lot of good resources for learning, but some are better than others. Here are my\n                        personal favorites:\n                        <ul>\n                            <li><a href={\"https://developer.mozilla.org/en-US/\"}>Mozilla Web Docs</a> - Long but\n                                thorough tutorials for CSS and HTML\n                            </li>\n                            <li><a href={\"https://www.w3schools.com/\"}>w3schools</a> - Good for reference, but I\n                                wouldn't recommend the tutorials. They are repetitive and too easy to learn anything.\n                            </li>\n                            <li><a href={\"https://stackoverflow.com/\"}>Stackoverflow</a> - Has an answer to every\n                                question,if you know how to word your google search.\n                            </li>\n                            <li><a href={\"https://javascript.info/\"}>Javascript.Info</a> - Very comprehensive tutorial\n                                on JS. Can be overwhelming at the start.\n                            </li>\n                            <li><a href={\"https://www.amazon.com/dp/1118907442/ref=cm_sw_em_r_mt_dp_U_tsW6DbD71567R\"}>HTML,\n                                CSS, JS, and JQuery</a> - If you are willing to spend a few bucks these books are a\n                                great\n                                reference. I have them sitting on my desk.\n                            </li>\n                        </ul>\n                    </p>\n                </Section>\n                <Section link=\"ides\" label=\"Interactive Developer Environment (IDEs)\"\n                         badge={<><span><Badge\n                             variant=\"primary\">Front</Badge></span><span><Badge\n                             variant=\"success\">Back</Badge></span></>}>\n                    <p>\n                        IDEs are applications used for editing code. They improve over simple text editors by adding\n                        shortcuts, templates, or other features that make writing code easier. Finding the right IDE\n                        requires trying a lot of different ones.\n                    </p>\n                    <p>\n                        Here are a list of IDEs that I recommend. I personally use Visual Studio code because it works\n                        well with Javascript and Python, my two main languages.\n                    </p>\n                    <List newPage={true}>\n                        <ListItem link=\"https://code.visualstudio.com/\">\n                            Visual Studio Code - Great for Front and Backend Development. Good for beginners.\n                        </ListItem>\n                        <ListItem link=\"https://www.jetbrains.com/webstorm/\">\n                            WebStorm - Aimed more at backend development. $59/year\n                        </ListItem>\n                        <ListItem link=\"https://atom.io/\">\n                            Atom - Light weight but powerful.\n                        </ListItem>\n                    </List>\n                </Section>\n                <Section link={'startcoding'} label={\"How to start coding\"}\n                         badge={<><span><Badge\n                             variant=\"primary\">Front</Badge></span><span><Badge\n                             variant=\"success\">Back</Badge></span></>}>\n                    <p>\n                        For frontend development download <a\n                        href={\"https://github.com/AJWurts/Articles/blob/master/articleui/src/components/introwebdev/introfronttemplate.html\"}>this</a> template\n                        file. Then you can open the file in any browser by double clicking it.\n                    </p>\n                    <p>\n                        For backend development there are two main approaches. If you want to write scripts you can\n                        install and use <a href={\"https://nodejs.org/en/\"}>Node</a> or you can embed scripts in an html\n                        file. To print a variable or string inside an HTML file you can\n                        use <code>console.log(variable)</code>. Here is a <a href=\"html\">template file</a> to start\n                        with. Open it in your favorite browser.\n                        I recommend writing scripts in your browser to start, then move to Node if you want to do more\n                        complex projects that doesn't require a browser.\n                    </p>\n                </Section>\n                <Section link=\"basichtml\" label=\"Basic HTML Elements\" badge={<Badge\n                    variant=\"primary\">Front</Badge>}>\n                    <p>\n                        HTML is a language for displaying items in a certain configuration on screen. HTML has many\n                        different\n                        components for displaying items. HTML can be thought of as the skeleton of the web page.\n                        It defines the layout and then CSS adds style and coloring. HTML consists of a hierarchy of\n                        elements where each element has a set of children. The children are contained within the parent\n                        element. The children can either be text, or other elements.\n                    </p>\n                    <p>\n                        All HTML elements can have attributes which change or add features to the element. For example\n                        the button element can have an <code>onclick</code> attribute to determine how the page should\n                        react when clicked.\n                    </p>\n                    <Code.Wrapper>\n                        <Code.Title>\n                            Button with Attribute\n                        </Code.Title>\n                        <Code.Code>\n                            <Code.Line>\n                                {`<button onclick=\"handleClick\">Submit</button>`}\n                            </Code.Line>\n                        </Code.Code>\n                        <Code.Description>\n                            The button has an attribute named onclick. The value of onclick is a string handleClick\n                            which links to a javascript function.\n                        </Code.Description>\n                    </Code.Wrapper>\n                    <p>\n                        Here are the elements I use the most. There are many more, but they aren't used nearly as often.\n                        A complete list of elements is available at <a\n                        href={\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\"}>Mozilla MDN Web Docs</a>.\n                        <CardDeck noNumbers={true}>\n                            <CodeSnip.Snip title={\"<div></div>\"} subtitle={\"Div\"}>\n                                Used for placing items vertically on a screen. A div tag takes up the entire screen\n                                from left to right. Items are placed inside\n                            </CodeSnip.Snip>\n                            <CodeSnip.Snip title={\"<span></span>\"} subtitle={\"Span\"}>\n                                Used for placing items next to each other as opposed to on top of each other. Spans is\n                                an inline element which means it doesn't create a new line.\n                            </CodeSnip.Snip>\n                            <CodeSnip.Snip title={\"<a></a>\"} subtitle={\"Anchor (Link)\"}>\n                                Used for linking to other pages. Inline element.\n                                <CodeSnip.Example>\n                                    {`<a href=\"'http://otherpage.com\"> link text </a>`}\n                                </CodeSnip.Example>\n                            </CodeSnip.Snip>\n                        </CardDeck>\n                        <CardDeck>\n                            <CodeSnip.Snip title={\"<h1></h1>\"} subtitle={\"Header \"}>\n                                Headers are defined with h1 down to h5 the larger the number the smaller the text.\n                                On this page the text \"Welcome to Intro to Web Dev\" uses the h1 tag.\n                                <CodeSnip.Example>\n                                    {`<h1> Main Page Title </h1>`}\n                                </CodeSnip.Example>\n                            </CodeSnip.Snip>\n                            <CodeSnip.Snip title={\"<img/>\"} subtitle={\"Image \"}>\n                                Displays images on the page. You can either link an image from the local folder or an\n                                address from the internet.\n                                <CodeSnip.Example>\n                                    {`<img src=\"image path or url\"/>`}\n                                </CodeSnip.Example>\n                            </CodeSnip.Snip>\n                        </CardDeck>\n                        <CardDeck>\n                            <CodeSnip.Snip title={\"<body></body>\"} subtitle={\"Body \"}>\n                                Labels the body section of the web page. This is where all the page content goes.\n                            </CodeSnip.Snip>\n                            <CodeSnip.Snip title={\"<head></head>\"} subtitle={\"Head \"}>\n                                All imports and other page data is stored here or used to import other libraries into\n                                the web page. The font this web page uses is Roboto. It is imported in the head.\n                            </CodeSnip.Snip>\n                            <CodeSnip.Snip title={\"<p></p>\"} subtitle={\"Paragraph \"}>\n                                A paragraph tag is used to define a section of text.\n                                It automatically adds space above and below the paragraph.\n                                <CodeSnip.Example>\n                                    {`<p > Paragraph Text Here </p>`}\n                                </CodeSnip.Example>\n                            </CodeSnip.Snip>\n                        </CardDeck>\n                        <CardDeck>\n\n                            <CodeSnip.Snip title={\"<input></input>\"} subtitle={\"Input \"}>\n                                Creates an entry box that a user can type into.\n                                <CodeSnip.Example>\n                                    {`<input type=\"text\"></input>`}\n                                </CodeSnip.Example>\n                                <CodeSnip.Result>\n                                    <input id={'input-example'} type={'text'}/>\n                                </CodeSnip.Result>\n                            </CodeSnip.Snip>\n                            <CodeSnip.Snip title={\"<button></button>\"} subtitle={\"Button \"}>\n                                Adds a button to the screen that a user can click.\n                                <CodeSnip.Example>\n                                    {`<button onclick=\"handleClick\">Button Example</button>`}\n                                </CodeSnip.Example>\n                                <CodeSnip.Result>\n                                    <button onClick={() => alert(document.getElementById(\"input-example\").value)}>Button\n                                        Example\n                                    </button>\n                                </CodeSnip.Result>\n                            </CodeSnip.Snip>\n\n\n                        </CardDeck>\n                        <CardDeck>\n\n                            <CodeSnip.Snip title={\"<ul></ul>\"} subtitle={\"Un-ordered List \"}>\n                                A list with dots.\n                                <CodeSnip.Example>\n                                    {`<ul>...</ul>`}\n                                </CodeSnip.Example>\n                                <CodeSnip.Result>\n                                    <ul>\n                                        <li>Hi</li>\n                                    </ul>\n                                </CodeSnip.Result>\n                            </CodeSnip.Snip>\n                            <CodeSnip.Snip title={\"<li></li>\"} subtitle={\"List Item \"}>\n                                An item in a list. This elements need to be placed\n                                within <code>{`<ol></ol>`}</code> or <code>{`<ul></ul>`}</code>.\n                                <CodeSnip.Example>\n                                    <Code.Line>\n                                        {`<ul>`}\n                                    </Code.Line>\n                                    <Code.Line tabs={1}>\n                                        &emsp;&emsp;{`<li> Item 1 </li>`}\n                                    </Code.Line>\n                                    <Code.Line>\n                                        {`</ul>`}\n                                    </Code.Line>\n                                </CodeSnip.Example>\n                                <CodeSnip.Result>\n                                    <ul>\n                                        <li>Item 1</li>\n                                    </ul>\n                                </CodeSnip.Result>\n                            </CodeSnip.Snip>\n                            <CodeSnip.Snip title={\"<ol></ol>\"} subtitle={\"Ordered List\"}>\n                                Adds a button to the screen that a user can click.\n                                <CodeSnip.Example>\n                                    {`<ol>...</ol>`}\n                                </CodeSnip.Example>\n                                <CodeSnip.Result>\n                                    <ol>\n                                        <li>Item 1</li>\n                                    </ol>\n                                </CodeSnip.Result>\n                            </CodeSnip.Snip>\n                        </CardDeck>\n                    </p>\n                </Section>\n                <Section link=\"basiccss\" label=\"Basic CSS\" badge={<Badge\n                    variant=\"primary\">Front</Badge>}>\n                    <p>\n                        CSS is used to decorate the page. Changing the font color, size, background color, and borders\n                        are all done through CSS. To apply a CSS property to an element you use the following syntax for\n                        in-line css:\n                    </p>\n                    <p>\n                        <code>{`<div style=\"tagname: tagvalue\" >text </div>`}</code>\n                    </p>\n                    <p>\n                        However in-line should be avoided as it can become difficult to modify, maintain and use for\n                        more than one element. The better way is be creating a new .css file and defining CSS classes. A\n                        CSS Class is a set of properties that can be applied to an HTML object using the class option:\n                    </p>\n                    <p>\n                        <code> {`<div class=\"title\">title text</div>`}</code>\n                    </p>\n\n                    <p>\n                        An attached styles.css file will have the following format for the title class:\n                    </p>\n                    <p>\n                        <Code.Wrapper>\n                            <Code.Code>\n                                <Code.Line>.title {`{`}</Code.Line>\n                                <Code.Line tabs={1}> color: red;</Code.Line>\n                                <Code.Line tabs={1}> background-color: black; </Code.Line>\n                                <Code.Line>}</Code.Line>\n                                <Code.Line>p {`{`} // Used to stylize all of one HTML element, in this case\n                                    all <code>p</code>.</Code.Line>\n                                <Code.Line tabs={1}> color: red;</Code.Line>\n                                <Code.Line tabs={1}> background-color: black; </Code.Line>\n                                <Code.Line>}</Code.Line>\n                            </Code.Code>\n                        </Code.Wrapper>\n                    </p>\n                    <p>\n                        For a list of all CSS properties goto <a\n                        href={\"https://www.w3schools.com/cssref/\"}>w3schools.com</a>. Here are the most used CSS\n                        properties:\n                    </p>\n                    <CardDeck>\n                        <CodeSnip.Snip title={\"color\"} subtitle={\"Text Color\"}>\n                            Changes the text color. Web color is based on the RGB color palette. The colors are Red,\n                            Green, and Blue respectively and referred to as color channels. Their values are always\n                            between 0 and 255. The ratio of the three colors defines the final color. The simplest way\n                            to choose a color is using built in colors like, red, white, black, gray, teal, and so\n                            on. A complete list of built in colors is available <a target=\"_blank\"\n                                                                                   href=\"http://www.colors.commutercreative.com/grid/\">here</a>.\n                            Another way to specify colors is <code>rgb(30, 40, 50)</code> where each number corresponds\n                            to the\n                            respective color channel. White in this format is <code>rgb(255, 255, 255)</code>. Black\n                            is <code>rgb(0, 0, 0)</code>.\n                            <CodeSnip.Example>\n                                {`<div style=\"color: rgb(100, 100, 200)\"> Purple Text </div>`}\n\n                            </CodeSnip.Example>\n                            <b>Result:</b>\n                            <div style={{color: \"rgb(100, 100, 200)\"}}>Purple Text</div>\n                        </CodeSnip.Snip>\n                    </CardDeck>\n\n                    <CardDeck>\n                        <CodeSnip.Snip title={\"margin\"} subtitle={\"Margin around element\"}>\n                            Sets the space between the edge of the element and the surrounding elements. It is outside\n                            of padding. Margin uses pixels or other units to define its size. If you want to center an\n                            item you can set margin to <code>auto</code>.\n                            <CodeSnip.Example>\n                                {`<span style=\"margin: 5px; \"> text1 </span>`}\n                            </CodeSnip.Example>\n                            <b>Visual:</b>\n                            <div style={{padding: \"5px\", backgroundColor: \"orange\", borderRadius: \"8px\"}}>\n                                Margin\n                                <div style={{\n                                    borderRadius: \"8px\",\n                                    margin: '5px',\n                                    backgroundColor: 'green',\n                                    padding: \"5px\",\n                                    color: \"white\"\n                                }}>\n                                    Padding\n                                    <div style={{\n                                        padding: \"5px\",\n                                        borderRadius: \"8px\",\n                                        backgroundColor: \"white\",\n                                        color: \"black\"\n                                    }}>\n                                        Content\n                                    </div>\n                                </div>\n                            </div>\n                        </CodeSnip.Snip>\n                        <CodeSnip.Snip title={\"padding\"} subtitle={\"Padding content\"}>\n                            Sets the space between the edge of the content and the edge of the background. Look at the\n                            visual to understand the difference between margin and padding. The background is included\n                            in the padding, but not margin.\n                            <CodeSnip.Example>\n                                {`<span style=\"padding: 5px; \"> text </span>`}\n                            </CodeSnip.Example>\n                            <b>Visual:</b>\n                            <div style={{padding: \"5px\", backgroundColor: \"orange\", borderRadius: \"8px\"}}>\n                                Margin\n                                <div style={{\n                                    borderRadius: \"8px\",\n                                    margin: '5px',\n                                    backgroundColor: 'green',\n                                    padding: \"5px\",\n                                    color: \"white\"\n                                }}>\n                                    Padding\n                                    <div style={{\n                                        padding: \"5px\",\n                                        borderRadius: \"8px\",\n                                        backgroundColor: \"white\",\n                                        color: \"black\"\n                                    }}>\n                                        Content\n                                    </div>\n                                </div>\n                            </div>\n                        </CodeSnip.Snip>\n                    </CardDeck>\n                    <CardDeck>\n                        <CodeSnip.Snip title={\"font-size\"} subtitle={\"Font Size\"}>\n                            Changes the text size. The most common unit to use is px for pixels. Normal text sizes are\n                            between 12 for paragraphs to 40 for large titles.\n                            <CodeSnip.Example>\n                                {`<div style=\"font-size: 18px\"> 18px text</div>`}\n                            </CodeSnip.Example>\n                            <b>Result:</b>\n                            <div style={{fontSize: \"18px\"}}>18px text</div>\n                        </CodeSnip.Snip>\n                        <CodeSnip.Snip title={\"background-color\"} subtitle={\"Element Background Color\"}>\n                            Sets the background color. In the following example the background is set to Dark Blue and\n                            the text is set to white to stay readable.\n                            <CodeSnip.Example>\n                                {`<div style=\"background-color: darkblue; color: white\"> </div>`}\n                            </CodeSnip.Example>\n                            <b>Result:</b>\n                            <div style={{backgroundColor: \"darkblue\", color: \"white\"}}>white text</div>\n                        </CodeSnip.Snip>\n                        <CodeSnip.Snip title={\"display\"} subtitle={\"Display\"}>\n                            Sets the element display behavior. The default value is block. Block means the item will\n                            take up the entire width like {`<p>`} or {`<div>`}. A commonly used alternative\n                            is <code>flex</code>. It forces the children to all be on the same line, space permitting.\n                            <CodeSnip.Example>\n                                <Code.Code>\n                                    <Code.Line>\n                                        {`<div style=\"display: flex\">`}\n                                    </Code.Line>\n                                    <Code.Line tabs={1}>\n                                        {`<div>div1</div> `}\n                                    </Code.Line>\n                                    <Code.Line tabs={1}>\n                                        {`<div>div2</div>`}\n                                    </Code.Line>\n                                    <Code.Line>\n                                        {`</div>`}\n                                    </Code.Line>\n                                </Code.Code>\n                            </CodeSnip.Example>\n                            <CodeSnip.Result>\n                                <div style={{display: \"inline-flex\"}}> div1</div>\n                                <div style={{display: \"inline-flex\"}}> div2</div>\n                            </CodeSnip.Result>\n                        </CodeSnip.Snip>\n                    </CardDeck>\n                    <CardDeck>\n                        <CodeSnip.Snip title={\"width and height\"} subtitle={\"Width and Height\"}>\n                            Sets the width or height of the element respectively. All sizes in CSS can be defined with\n                            multiple units. Here are the most common:\n                            <ul>\n                                <li>px (pixels) - pixels are the same for every page</li>\n                                <li>% (percent) - Relative to the parent component</li>\n                                <li>vw - Equal to 1% of the width of the window</li>\n                                <li>vh - Equal to 1% of the height of the window</li>\n                            </ul>\n                            All units can be viewed on <a\n                            href=\"https://www.w3schools.com/cssref/css_units.asp\">w3schools.com</a>\n                            <CodeSnip.Example>\n                                {`<div style=\"width: 50%; height=20px\"> Text <div>`}\n                            </CodeSnip.Example>\n                            <Code.Result>\n                                <div style={{width: \"50%\", height: \"50px\", backgroundColor: \"darkgray\"}}>\n                                    Text\n                                </div>\n                            </Code.Result>\n                            Background color added to visualize <code>div</code> true size.\n                        </CodeSnip.Snip>\n                        <CodeSnip.Snip title={\"border\"} subtitle={\"Border\"}>\n                            Sets the thickness, line type and color of the component border. The border is displayed\n                            outside of padding but inside margin.\n                            A trick to making modern looking components is using <code>border-radius</code>. It adds the\n                            rounded look to a component. Your component does\n                            not need to have a defined border to use <code>border-radius</code>.\n                            <CodeSnip.Example>\n                                {`<div style=\"border: 1px solid black; border-radius: 8px\"> </div>`}\n                            </CodeSnip.Example>\n\n                            <CodeSnip.Result>\n                                <div style={{border: \"5px solid black\", borderRadius: \"8px\"}}> Border Example</div>\n                            </CodeSnip.Result>\n                        </CodeSnip.Snip>\n                    </CardDeck>\n                    <CardDeck>\n                        <CodeSnip.Snip title={\"text-align\"} subtitle={\"Horizontal Text Alignment\"}>\n                            Used to align text horizontally. It can be set\n                            to <code>start</code>, <code>center</code> or <code>end</code>.\n\n                            <CodeSnip.Example>\n                                {`<div style=\"text-align: center\"> center text</div>`}\n                            </CodeSnip.Example>\n                            <b>Result:</b>\n                            <div style={{textAlign: \"center\"}}>center text</div>\n                        </CodeSnip.Snip>\n                        <CodeSnip.Snip title={\"vertical-align\"} subtitle={\"Element Background Color\"}>\n                            Aligns content vertically. Mainly used for items in tables. NOTE: It only applies to inline,\n                            inline-block and table-cell\n                            elements. It will not work on <code>div></code> but it will work on text.\n                            <CodeSnip.Example>\n                                {`<div style=\"display: inline-flex; vertical-align: top\"> text</div>`}\n                            </CodeSnip.Example>\n                            <b>Result:</b>\n                            <div style={{verticalAlign: \"bottom\", display: 'inline-flex', height: \"30px\"}}>white text\n                            </div>\n                        </CodeSnip.Snip>\n\n                    </CardDeck>\n                </Section>\n                <Section link={\"basicjs\"} label={\"Basic Javascript\"} badge={<Badge\n                    variant=\"success\">Back</Badge>}>\n                    <p>\n                        Javascript is the language that allows users to interact with a web page. When a\n                        user clicks on a button the events that follow are programmed in Javascript.\n                        Javascript has the same main components of other popular programming languages like C, Java, and\n                        Python. The best way to improve at programming in general is practice. It is no different for\n                        Javascript.\n                    </p>\n\n                    <SubSection link={\"basicjsvariables\"} label={\"Variables\"}>\n                        Variables are how data is stored. You can define variables\n                        using <code>let</code>, <code>var</code>, or <code>const</code>. Javascript is a duck\n                        typed language which means you don't specify the variable type in your code. It looks at the\n                        data and determines what type it is. Two forward slashes <code>//</code> are used to start a\n                        comment, or code that is not run. Every line of JS (javascript) code is followed by a\n                        semi-colon.\n                        <Code.Wrapper>\n                            <Code.Title>\n                                Example Variable Initialization (Creation):\n                            </Code.Title>\n                            <Code.Code>\n                                <Code.Line>\n                                    let numberOfDogs = 10;\n                                </Code.Line>\n                                <Code.Line>\n                                    var numberOfCats = 10;\n                                </Code.Line>\n                                <Code.Line>\n                                    const NUMBER_OF_ANIMALS = 20;\n                                </Code.Line>\n\n                            </Code.Code>\n                            <Code.Description>\n                                <code>let</code> defines a local variable only defined in the scope of the current\n                                block. <code>var</code> defines\n                                a variable accessible within the entire function. <code>const</code> defines a variable\n                                that cannot change and is usually denoted in all upper case.\n                            </Code.Description>\n                        </Code.Wrapper>\n                        <Code.Wrapper>\n                            <Code.Title>\n                                Variable Types\n                            </Code.Title>\n                            <Code.Code>\n                                <Code.Line>\n                                    let name = \"Ben\"; // A <span\n                                    style={{color: 'rgb(40, 116, 166)'}}>string</span> represents a collection of\n                                    characters in this case:\n                                    Ben\n                                </Code.Line>\n                                <Code.Line>\n                                    let monthInYear = {(new Date()).getMonth() + 1}; // An <span\n                                    style={{color: 'rgb(40, 116, 166)'}}>integer</span> represents a number\n                                    without any decimal places\n                                </Code.Line>\n                                <Code.Line>\n                                    let pi = 3.141592654; // A <span\n                                    style={{color: 'rgb(40, 116, 166)'}}>float</span> represents a number with decimal\n                                    places.\n                                </Code.Line>\n                                <Code.Line>\n                                    const isItSunday = {(new Date()).getDay() === 0 ? \"true\" : \"false\"}; //A <span\n                                    style={{color: 'rgb(40, 116, 166)'}}>boolean</span> can\n                                    only be true or false\n                                </Code.Line>\n                                <Code.Line>\n                                    let car = {`{`} // An <span\n                                    style={{color: 'rgb(40, 116, 166)'}}>object</span> representing a car. The data can\n                                    be accessed using\n                                    car.model\n                                </Code.Line>\n                                <Code.Line>\n                                    {`    `}model: \"Rav4\",\n                                </Code.Line>\n                                <Code.Line>\n                                    {`    `}miles: 12040\n                                </Code.Line>\n                                <Code.Line>\n                                    } // Values can be set in an object using brackets <code>car['model'] =\n                                    \"corolla\";</code>\n                                </Code.Line>\n                                <Code.Line>\n                                    let array1 = [0,1,2,3,4,5]; // An <span\n                                    style={{color: 'rgb(40, 116, 166)'}}>array</span> is used to hold more than one\n                                    value of any type.\n                                </Code.Line>\n                            </Code.Code>\n                            <Code.Description>\n                                These are some of the main types of variables.\n                            </Code.Description>\n                        </Code.Wrapper>\n                    </SubSection>\n                    <SubSection link={'basicjsfunctions'} label={\"Functions\"}>\n                        <p>\n                            Functions are used to perform specific tasks. A example function could be one that displays\n                            \"Hello World\" to the user. Every function has input values, called parameters, and most have\n                            output values.\n                        </p>\n                        <p>\n                            Parameters are values passed to the function, so it can perform a calculation or task. Once\n                            the\n                            function is complete it returns a value. Functions are used on tasks repeated\n                            often to reduce writing the same code more than once. Functions can have multiple\n                            parameters.\n                        </p>\n                        <p>\n                            <Code.Wrapper>\n                                <Code.Title>\n                                    Defining a Function\n                                </Code.Title>\n                                <Code.Code>\n                                    <Code.Line>\n                                        function addOne(number) &#123;\n                                    </Code.Line>\n                                    <Code.Line>\n                                        {`  return number + 1;`}\n                                    </Code.Line>\n                                    <Code.Line>\n                                        &#125;\n                                    </Code.Line>\n                                </Code.Code>\n                                <Code.Description>\n                                    The function is named addOne. It takes a parameter number and returns the number\n                                    plus 1.\n                                    This function assumes the input value is a number.\n                                </Code.Description>\n                            </Code.Wrapper>\n                        </p>\n                        <p>\n                            Running a function is referred to as Calling a function. If I said I called addOne it means\n                            I am running the function by passing in a variable.\n                        </p>\n                        <p>\n                            <Code.Wrapper>\n                                <Code.Title>\n                                    Calling a Function\n                                </Code.Title>\n                                <Code.Code>\n                                    <Code.Line>\n                                        let numberOfCats = 10;\n                                    </Code.Line>\n                                    <Code.Line>\n                                        numberOfCats = addACat(numberOfCats);\n                                    </Code.Line>\n                                </Code.Code>\n                                <Code.Description>\n                                    This code calls the function addACat with the parameter numberOfCats. When the\n                                    function is run the number parameter is assigned the value of numberOfCats. The\n                                    function adds 1 to number then returns it. numberOfCats is then set to the return\n                                    value of 11.\n                                </Code.Description>\n                            </Code.Wrapper>\n                        </p>\n\n                    </SubSection>\n\n                    <SubSection link={\"basicjsloops\"} label={\"Loops\"}>\n                        <p>Loops are sections of code that are repeated. If you had a grocery store list and wanted to\n                            check whether milk was on the list, a loop could do that. There are two types of loops, for\n                            loops, and while loops. For loops are generally used for iterating through lists. While\n                            loops are used when the finish condition is not known at the start.\n                        </p>\n                        <Code.Wrapper>\n                            <Code.Title>\n                                For Loop\n                            </Code.Title>\n                            <Code.Code>\n                                <Code.Line>\n                                    let array1 = [0,1,2,4,5,6];\n                                </Code.Line>\n                                <Code.Line>\n                                    let sum = 0;\n                                </Code.Line>\n                                <Code.Line>\n                                    for (<span style={{color: \"#E67E22\"}}>let i = 0</span>; <span\n                                    style={{color: '#0E6251'}}>i {`<`} array1.length</span>;<span\n                                    style={{color: '#2874A6'}}> i++</span>) {`{`}\n                                </Code.Line>\n                                {`    `}sum = sum + <span style={{color: '#922B21'}}>array1[i]</span>\n                                <Code.Line>\n                                    {'}'}\n                                </Code.Line>\n\n                            </Code.Code>\n                            <Code.Description>\n                                The above code is used find the total of the numbers in array1. A for loop is\n                                initialized with 3 parts: creating an index variable <code style={{color: \"#E67E22\"}}>let\n                                i = 0</code>, setting the finish point <code\n                                style={{color: '#0E6251'}}>i {`<`} array1.length</code>, and incrementing the index\n                                after each repeat <code\n                                style={{color: '#2874A6'}}>i++</code>. Inside the for loop array1 is being accessed at\n                                index i: <code style={{color: '#922B21'}}>array1[i]</code>. The i surrounded by brackets\n                                is used to access the array. Sum would equal {1 + 2 + 4 + 5 + 6} after the loop\n                                finished.\n                            </Code.Description>\n                        </Code.Wrapper>\n                    </SubSection>\n                    {/*<SubSection link={\"basicjs\"} label={\"Loops\"}>*/}\n                    {/*    <p>Loops are sections of code that are repeated. If you had a grocery store list and wanted to*/}\n                    {/*        check whether milk was on the list, a loop could do that. There are two types of loops, for*/}\n                    {/*        loops, and while loops. For loops are generally used for iterating through lists. While*/}\n                    {/*        loops are used when the finish condition is not known at the start.*/}\n                    {/*    </p>*/}\n                    {/*    <Code.Wrapper>*/}\n                    {/*        <Code.Title>*/}\n                    {/*            For Loop*/}\n                    {/*        </Code.Title>*/}\n                    {/*        <Code.Code>*/}\n                    {/*            <Code.Line>*/}\n                    {/*                let array1 = [0,1,2,4,5,6];*/}\n                    {/*            </Code.Line>*/}\n                    {/*            <Code.Line>*/}\n                    {/*                let sum = 0;*/}\n                    {/*            </Code.Line>*/}\n                    {/*            <Code.Line>*/}\n                    {/*                for (<span style={{color: \"#E67E22\"}}>let i = 0</span>; <span*/}\n                    {/*                style={{color: '#0E6251'}}>i {`<`} array1.length</span>;<span*/}\n                    {/*                style={{color: '#2874A6'}}> i++</span>) {`{`}*/}\n                    {/*            </Code.Line>*/}\n                    {/*            {`    `}sum = sum + <span style={{color: '#922B21'}}>array1[i]</span>*/}\n                    {/*            <Code.Line>*/}\n                    {/*                {'}'}*/}\n                    {/*            </Code.Line>*/}\n                    {/*        </Code.Code>*/}\n                    {/*        <Code.Description>*/}\n                    {/*            The above code is used find the total of the numbers in array1. A for loop is*/}\n                    {/*            initialized with 3 parts: creating an index variable <code style={{color: \"#E67E22\"}}>let*/}\n                    {/*            i = 0</code>, setting the finish point <code*/}\n                    {/*            style={{color: '#0E6251'}}>i {`<`} array1.length</code>, and incrementing the index*/}\n                    {/*            after each repeat <code*/}\n                    {/*            style={{color: '#2874A6'}}>i++</code>. Inside the for loop array1 is being accessed at*/}\n                    {/*            index i: <code style={{color: '#922B21'}}>array1[i]</code>. The i surrounded by brackets*/}\n                    {/*            is used to access the array.*/}\n                    {/*        </Code.Description>*/}\n                    {/*    </Code.Wrapper>*/}\n                    {/*</SubSection>*/}\n\n                </Section>\n                <Section link={\"pagemanip\"} label={\"Changing a web page with code\"}\n                         badge={<Badge variant={'success'}>Back</Badge>}>\n                    <p>\n                        Now that you have a brief overview of javascript, let's go over how to use code in a web\n                        page.\n                        Scripts can be embedded in web pages using the\n                        HTML <code>{`<script></script>`}</code> element. Below is an example of how you could\n                        process user input using an input box and a button.\n                    </p>\n                    <SubSection link={\"pagemanip-click\"} title={\"HTML Part\"}>\n                        <p>\n                            In order to retrieve user input you need to create an input component using HTML, and a\n                            button to submit.\n                        </p>\n                    </SubSection>\n                    <Code.Wrapper>\n                        <Code.Title>\n                            HTML Code\n                        </Code.Title>\n                        <Code.Code>\n                            <Code.Line>\n                                {`<html>`}\n                            </Code.Line>\n                            <Code.Line>\n                                {`<body>`}\n                            </Code.Line>\n                            <Code.Line tabs={1}>\n                                {`<input id=\"text-input\"/>`}\n                            </Code.Line>\n                            <Code.Line tabs={1}>\n                                {`<button onclick=\"handleClick\">Submit Form</button>`}\n                            </Code.Line>\n                            <Code.Line>\n                                {`</body>`}\n                            </Code.Line>\n                            <Code.Line>\n                                {'</html>'}\n                            </Code.Line>\n                        </Code.Code>\n                        <Code.Description>\n                            A button was created that links to the handleClick function. We will create that next. The\n                            input element was created with an id attribute. This will allow us to identify it in the\n                            handleClick function.\n                        </Code.Description>\n                    </Code.Wrapper>\n                    <Code.Wrapper>\n                        <Code.Title>\n                            HTML Code with Script Element\n                        </Code.Title>\n                        <Code.Code>\n                            <Code.Line>\n                                {`<html>`}\n                            </Code.Line>\n                            <Code.Line>\n                                {`<head>`}\n                            </Code.Line>\n                            <Code.Line tabs={1}>\n                                {`<script>`}\n                            </Code.Line>\n                            <Code.Line tabs={1}>\n                                function handleClick(event) {`{`}\n                            </Code.Line>\n                            <Code.Line tabs={2}>\n                                let inputElement = document.findElementById('text-input')\n                            </Code.Line>\n                            <Code.Line tabs={2}>\n                                let text = inputElement.value;\n                            </Code.Line>\n                            <Code.Line tabs={2}>\n                                alert(text);\n                            </Code.Line>\n                            <Code.Line tabs={1}>\n                                }\n                            </Code.Line>\n                            <Code.Line tabs={1}>\n                                {`<script>`}\n                            </Code.Line>\n                            <Code.Line>\n                                {`</head>`}\n                            </Code.Line>\n                            <Code.Line>\n                                {`<body>`}\n                            </Code.Line>\n                            <Code.Line tabs={1}>\n                                {`<input id=\"text-input\"/>`}\n                            </Code.Line>\n                            <Code.Line tabs={1}>\n                                {`<button onclick=\"handleClick\">Submit</button>`}\n                            </Code.Line>\n                            <Code.Line>\n                                {`</body>`}\n                            </Code.Line>\n                            <Code.Line>\n                                {'</html>'}\n                            </Code.Line>\n\n                        </Code.Code>\n                        <Code.Description>\n                            The handleClick function was added to process the button click. The first line of the\n                            function accesses the web page, also called document.\n                            It looks for an element with the id 'text-input'. It finds the input we defined inside the\n                            body. It then retrieves the user input text stored in value.\n                            The final line creates a popup on your screen with the user input.\n                        </Code.Description>\n                        <Code.Result>\n                            <input id={\"text-input-2\"}/>\n                            <button onClick={() => alert(document.getElementById(\"text-input-2\").value)}>Submit</button>\n                        </Code.Result>\n                    </Code.Wrapper>\n\n                </Section>\n                <Section link=\"projects\" label=\"Projects\" badge={<span><Badge variant={\"primary\"}>Front</Badge><Badge\n                    variant={\"success\"}>Back</Badge></span>}>\n                    These projects are just a recommendation. Try to find a project you're passionate about and pursue\n                    that.\n                    <Table>\n                        <thead>\n                        <th>\n                            Project Name\n                        </th>\n                        <th>\n                            Type\n                        </th>\n                        <th>\n                            Description\n                        </th>\n                        <th>\n                            Difficulty\n                        </th>\n                        <th>\n                            Estimated Time\n                        </th>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td>\n                                Calendar\n                            </td>\n                            <td>\n                                <Badge variant={\"primary\"}>Front</Badge>\n                            </td>\n                            <td>\n                                Create a calendar that shows the days of the month for January 2016.\n                            </td>\n                            <td>\n                                Easy\n                            </td>\n                            <td>\n                                30min-3hrs\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                Example Portfolio\n                            </td>\n                            <td>\n                                <Badge variant={\"primary\"}>Front</Badge>\n                            </td>\n                            <td>\n                                Create a website showing off the website you have made or want to make.\n                            </td>\n                            <td>\n                                Easy\n                            </td>\n                            <td>\n                                1-5hrs\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                Replicate Webpages\n                            </td>\n                            <td>\n                                <Badge variant={\"primary\"}>Front</Badge>\n                            </td>\n                            <td>\n                                Replicate a web page. You can choose to copy interactions.\n                            </td>\n                            <td>\n                                Easy to Hard\n                            </td>\n                            <td>\n                                1-5hrs\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                Calculator\n                            </td>\n                            <td>\n                                <Badge variant={\"warning\"}>Full</Badge>\n                            </td>\n                            <td>\n                                Create a calculator that has two inputs and lets the user decide what calculation to\n                                apply.\n                            </td>\n                            <td>\n                                Medium\n                            </td>\n                            <td>\n                                1-3hrs\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                Random Item Selector\n                            </td>\n                            <td>\n                                <Badge variant={\"warning\"}>Full</Badge>\n                            </td>\n                            <td>\n                                Let the user enter a list of items and then randomly select one. This could be used for\n                                deciding what restaurant to go to.\n                            </td>\n                            <td>\n                                Medium\n                            </td>\n                            <td>\n                                1-3hrs\n                            </td>\n                        </tr>\n                        </tbody>\n                    </Table>\n                    <ul>\n\n                    </ul>\n                </Section>\n                <Section link={'nextsteps'} label={\"Next Steps\"}\n                         badge={<span><Badge variant={\"primary\"}>Front</Badge><Badge\n                             variant={\"success\"}>Back</Badge></span>}>\n                    <p>\n                        Now that you have a brief overview of web development there are many paths to go.\n                        The web is built on a lot of different frameworks. Each one has their pros and cons, but all are\n                        built on HTML, CSS, and JS.\n                    </p>\n                    <p>\n                        For complete beginners, try completing some of the projects above, then move on to the sections\n                        below.\n                    </p>\n\n                    <p>\n                        For people who already have coding experience start looking into libraries and frameworks.\n                        I recommend starting to learn a framework and use that as motivation to improve your HTML, CSS,\n                        and JS skills.\n                    </p>\n                    <SubSection label={\"Frontend Libraries\"} badge={<Badge variant={\"primary\"}>Front</Badge>}>\n                        <p>\n                            These libraries are primarily used for user interface creation, however they heavily rely on\n                            JS to\n                            make them.\n                            <ul>\n                                <li>\n                                    <a href={\"https://jquery.com/\"}>jQuery</a> makes\n                                    writing JS easier by adding more functionality, and more powerful syntax.\n                                </li>\n                                <li>\n                                    <a href={'https://reactjs.org/'}>React</a> is a good library for creating large web\n                                    applications\n                                    that use the same code sections multiple times. React Native is a very similar\n                                    library\n                                    that is used for writing mobile apps. This page was built with React.\n                                </li>\n                                <li>\n                                    <a href={\"https://angular.io/\"}>Angular</a> is similar to React. Also can be used\n                                    for\n                                    writing mobile apps.\n                                </li>\n                            </ul>\n                        </p>\n                    </SubSection>\n                    <SubSection label={\"Databases\"} badge={<Badge variant={\"success\"}>Back</Badge>}>\n                        <p>\n                            Databases are ways to store information across multiple user sessions. Every time you log\n                            into a\n                            website the website looks in their database and pulls your data to verify your password\n                            matches. Virtually every website is built on a database. Every time the user interact they\n                            are either viewing, changing, or adding data to the database in one way or another.\n                            Understanding how databases work and how to work with them is essential to backend and full\n                            stack development.\n                        </p>\n                        <p>\n                            SQL is the language most often used for database manipulation. It is\n                            relatively simple and definitely worth learning. <a\n                            href={\"https://www.geeksforgeeks.org/structured-query-language/\"}>Geeks for Geeks</a> has a\n                            good tutorial. Most companies use some derivative of SQL.\n                        </p>\n                        <p>\n                            Universities teach whole classes just on databases. They require a lot of time to understand\n                            and use. Take your time choosing a database for a project because you'll be stuck with it\n                            all the way through. Here are some common database libraries.\n                            <ul>\n                                <li>\n                                    <a href={'https://www.mongodb.com/'}>MongoDB</a> Built on a document-based\n                                    structure. NOT a SQL framework.\n                                </li>\n                                <li>\n                                    <a href={\"https://www.mysql.com/\"}>MySQL</a> Made by Oracle aimed at companies. Uses\n                                    SQL.\n                                </li>\n                                <li>\n                                    <a href={\"https://www.postgresql.org/\"}>postgresql</a> Another SQL framework. It is\n                                    open\n                                    source and has a good SQL tutorial starting <a\n                                    href={\"https://www.postgresql.org/docs/12/tutorial-sql.html\"}>here</a>.\n                                </li>\n                            </ul>\n                        </p>\n                    </SubSection>\n                    <SubSection label={\"REST APIs: Connecting the Database and the Frontend\"}\n                                badge={<span><Badge variant={\"primary\"}>Back</Badge><Badge\n                                    variant={\"success\"}>Back</Badge></span>}>\n                        <p>\n                            REST APIs also known as Representational State Transfer Application Programming Interface\n                            are used to access information from a website, database, or service.\n                            Every REST API has a set of endpoints. Each endpoint allows you to get an item or perform a\n                            task on one or multiple items. This website <a\n                            href={\"https://www.smashingmagazine.com/2018/01/understanding-using-rest-api/\"}>Smashing\n                            Magazine</a> has a good\n                            introductory tutorial. <a href={\"https://developers.strava.com/docs/reference/\"}>Strava</a>,\n                            an athletic social media website, has very good documentation of their API. It is a good\n                            example to understand how an good API look.\n                        </p>\n\n                    </SubSection>\n                    <SubSection label={\"Hosting your app\"}>\n                        <p>\n                            Hosting is a whole problem in itself. If you are working on simple web pages <a\n                            href={\"https://github.com\"}>Github</a> offers free hosting for small pages. Amazon, Google,\n                            and Microsoft all offer hosting services. I personally use <a\n                            href={\"https://cloud.google.com/appengine/\"}>Google Cloud Platform's App\n                            Engine</a> for hosting my react apps because it was the easiest to set up. Plus their free\n                            quota\n                            is pretty sizable. <a href={\"https://aws.amazon.com/lambda/\"}>Amazon Lambda</a> is also good\n                            services, but I haven't explored it fully. Microsoft has an <a\n                            href={\"https://azure.microsoft.com/en-us/services/app-service/\"}>app service</a> that I have\n                            used,\n                            but their platform user interface is not beginner friendly.\n                        </p>\n                    </SubSection>\n                </Section>\n            </TableOfContents>\n        </div>\n    )\n}\n","import IntroPython from './IntroPython';\n\nexport default IntroPython;","import React from 'react';\nimport {\n    Section,\n    TableOfContents\n} from \"../compstore\";\nimport {Badge} from \"react-bootstrap\";\n\nexport default function IntroPython(props) {\n\n    return (\n        <div className='page-wrapper'>\n            <h1>\n                Welcome to Python\n            </h1>\n            <h4>\n                A minimal guide to get you started.\n            </h4>\n            <TableOfContents>\n                <Section link=\"starting\" label=\"Getting Started\">\n                    <p>\n                       Coming Soon...\n                    </p>\n                </Section>\n            </TableOfContents>\n        </div>\n    )\n}","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport {\n    NavBar,\n    TableOfContents,\n    Section,\n    SideBar\n} from './components/compstore';\n\nimport {\n    IntroWebDev,\n    IntroPython\n} from './components';\n\n\nimport './App.css';\n\nfunction App() {\n    var [ window, setWindow ] = useState(0);\n\n    console.log(window)\n    if (window === 0) {\n        var content = <IntroWebDev />\n    } else if (window === 1) {\n        var content = <IntroPython />\n    }\n\n\n    return (\n        <div className=\"App\" style={{backgroundColor: \"white\"}}>\n            <NavBar/>\n            <div style={{display: \"flex\", maxWidth: '1000px', marginLeft: \"auto\", marginRight: 'auto'}}>\n                <SideBar.Wrapper style={{minWidth: \"150px\", maxWidth: \"250px\"}}>\n                    <SideBar.Item onClick={() => setWindow(0)}>\n                        Intro to Web Dev\n                    </SideBar.Item>\n                    <SideBar.Item onClick={() => setWindow(1)}>\n                        Intro to Python\n                    </SideBar.Item>\n                </SideBar.Wrapper>\n                <div>\n                    {content}\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}