{"version":3,"sources":["logo.svg","components/compstore/TableOfContents.jsx","components/compstore/NavBar.jsx","components/compstore/Section.jsx","components/compstore/List.jsx","components/compstore/SideBar.jsx","components/compstore/Link.jsx","components/compstore/CodeSnip.jsx","components/compstore/SubSection.jsx","components/compstore/Code.jsx","components/compstore/C.jsx","components/compstore/S.jsx","components/introwebdev/index.js","components/introwebdev/IntroWebDev.jsx","components/intropython/index.js","components/intropython/IntroPython.jsx","components/howtogoogle/index.js","components/howtogoogle/HowToGoogle.jsx","components/advpython/index.js","components/advpython/AdvPython.jsx","components/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TableOfContents","props","children","length","style","fontSize","List","items","map","Child","index","NavBar","display","width","id","className","marginLeft","marginRight","minWidth","onClick","window","location","href","padding","open","alt","height","src","Section","link","label","badge","ListItem","Nav","defaultActiveKey","child","newPage","Link","key","target","noNumbers","itemStyle","borderBottom","color","Item","Wrapper","rel","Snip","Card","Body","Title","title","Subtitle","subtitleLink","subtitle","Example","Result","SubSection","Code","useState","notVisible","visible","setVisible","Button","variant","backgroundColor","borderRadius","margin","Line","tabs","i","Description","Comment","C","S","IntroWebDev","maxWidth","Math","min","Badge","download","CardDeck","CodeSnip","type","alert","document","getElementById","value","border","textAlign","verticalAlign","Date","getMonth","getDay","overflowX","Table","IntroPython","backgroundImage","backgroundPosition","HowToGoogle","AdvPython","component","App","frame","setWindow","size","isClient","getSize","innerWidth","undefined","innerHeight","setWidth","useEffect","handleResize","addEventListener","removeEventListener","useWindowSize","Page","pages","console","log","SideBar","val","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ebfea04.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Nav } from 'react-bootstrap';\nimport { List } from './index';\n\nexport default function TableOfContents(props) {\n    var children = props.children\n    if (!children.length) {\n        children = [children]\n    }\n\n    return (\n        <div>\n            <div>\n                <div style={{fontSize: props.fontSize || '30px'}}>\n                    Table of Contents\n                </div>\n                <List {...props} items={children} />\n  \n            </div>\n            <div>\n                {children.map((Child, index) => {\n                    return Child\n                })}\n            </div>\n\n        </div>\n    )\n}","import React from 'react';\n\nexport default function NavBar(props) {\n\n    return (\n        <div style={{display: props.width < 900 ? \"block\" : \"flex\"}}>\n            <div id='top'></div>\n\n            <div className='topbar-wrapper' style={{display: props.width < 900 ? \"block\" : \"flex\", marginLeft: props.width < 900 ? \"0px\" : \"auto\", marginRight: props.width < 900 ? \"0px\" : \"auto\", }}>\n                <div className='topbar flex' style={{display: props.width < 900 ? \"block\" : \"flex\", minWidth: props.width < 900 ? \"\" : \"900px\"}}>\n                    <div>\n                        <div className='title'>\n                            Intro to Coding\n                        </div>\n                    \n                    </div>\n                    <div className='topbar-buttons flex' style={{display: props.width < 900 ? \"block\" : \"flex\"}}>\n                        <div className='topbar-link' onClick={()=> window.location.href=\"http://www.alexwurts.com/#biography\"}>\n                            About Me\n                        </div>\n                        <div className='topbar-link' onClick={() => window.location.href=\"http://www.alexwurts.com/#projects\"}>\n                            Projects\n                        </div>\n                        <div className='topbar-link' onClick={() => window.location.href=\"http://www.alexwurts.com/#experience\"}>\n                            Experience\n                        </div>\n                        <div className='topbar-link-instalogo topbar-link' style={{ padding: \"6px 10px 7px 10px\" }}\n                            onClick={() => window.open(\"https:\\/\\/www.instagram.com/programmingpilot/\")}>\n                            <img id=\"img\" className=\"style-scope yt-img-shadow\" alt=\"\" height=\"30\" width=\"30\"\n                                src=\"http://www.alexwurts.com/images/IG_Glyph_Fill.png\" />\n                        </div>\n                        <div className='topbar-link-instalogo topbar-link' style={{ padding: \"9px 10px 11px 10px\" }}\n                            onClick={() => window.open(\"https:\\/\\/github.com/ajwurts/\")}>\n                            <img id=\"img\" className=\"style-scope yt-img-shadow\" alt=\"\" height=\"23\" width=\"23\"\n                                src=\"http://www.alexwurts.com/images/github.png\" />\n                        </div>\n                        <div className='topbar-link-instalogo topbar-link' style={{ padding: \"10px 10px 11px 10px\" }}\n                            onClick={() => window.open(\"https:\\/\\/www.youtube.com/channel/UC-dU4MIIpMOjTzn55ALJIaA\")}>\n                            <img id=\"img\" className=\"style-scope yt-img-shadow\" alt=\"\" height=\"22\" width=\"32\"\n                                src=\"http://www.alexwurts.com/images/youtube.png\" />\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport { Badge } from 'react-bootstrap';\n\n\nexport default function Section(props) {\n\n    return (\n        <div id={props.link} className='section'>\n            <h3>\n                {props.label} {props.badge}\n            </h3>\n            {props.children}\n            {/* Add Back to Top Link */}\n        </div>\n    )\n}","import React from 'react';\nimport { Nav } from 'react-bootstrap'\nfunction ListItem(props) {\n    return (\n        <span onClick={() => window.open(props.link)}>\n            {props.children}\n        </span>\n    )\n}\n\nfunction List(props) {\n    var children = props.items || props.children;\n    if (!children.length) {\n        children = [children]\n    }\n    return (\n        <Nav defaultActiveKey=\"/\" className=\"flex-column\">\n            {children ? children.map((child, index) => {\n                let href = (props.newPage ? \"\" : \"#\") + child.props.link;\n                return (\n                    <Nav.Link key={index} href={href} target={props.newPage ? \"_blank\" : \"\"}>\n                        {props.noNumbers ? \"\" : index + 1 + \".\"} {child.props.label || child.props.children} {child.props.badge}\n                    </Nav.Link>\n                )\n            }) : null}\n        </Nav>\n    )\n}\n\n\nexport {\n    List,\n    ListItem\n}","import React from 'react';\nimport {List} from \"./List\";\n\nconst wrapperStyle = {\n\n}\n\nconst itemStyle = {\n    borderBottom: \"1px solid gray\",\n    color: '#007bff',\n\n}\n\n\nfunction Item(props) {\n    return (\n        <div style={itemStyle} className=\"sidebar-item\" onClick={props.onClick}>\n            {props.children}\n        </div>\n    )\n}\n\nfunction Wrapper(props) {\n    let children = props.children;\n    if (!children.length) {\n        children = [children]\n    }\n    return (\n        <div {...props}>\n            <h4>\n                Tutorials\n            </h4>\n            {children}\n        </div>\n    );\n\n}\n\nexport default {\n    Item,\n    Wrapper\n}\n\n","import React from 'react';\n\n\nexport default function Link(props) {\n\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" \n         {...props}>\n            {props.children} \n        </a>\n    )\n}","import React from 'react';\nimport {Card} from 'react-bootstrap';\nimport {CodeSnip} from \"./index\";\nimport Link from './Link';\n\nfunction Snip(props) {\n    return (\n        <Card style={{width: '18rem'}}>\n            <Card.Body>\n                <Card.Title>{props.title}</Card.Title>\n                <Card.Subtitle className=\"mb-2 text-muted\">\n                {props.subtitleLink ? <Link href={props.subtitleLink}>{props.subtitle}</Link> : props.subtitle}\n                </Card.Subtitle>\n                {/* <Card.Text> */}\n                    {props.children}\n                {/* </Card.Text> */}\n\n            </Card.Body>\n        </Card>)\n}\n\nfunction Example(props) {\n    return (\n        <div>\n            <b>Example:</b> <br/>\n            <code>{props.children}</code>\n        </div>\n    );\n}\n\nfunction Result(props) {\n    return (\n        <div>\n            <b>Result:</b> <br/>\n            {props.children}\n        </div>\n    )\n}\n\nexport default {\n    Snip,\n    Example,\n    Result\n}","import React from 'react';\n\n\nexport default function SubSection(props) {\n\n    return (\n        <div id={props.link} className='section'>\n            <h4>\n                {props.label} {props.badge}\n            </h4>\n            {props.children}\n        </div>\n    )\n}","import React, { useState } from 'react'\nimport { Button } from 'react-bootstrap';\n\nfunction Wrapper(props) {\n\n    return (\n        <div style={{ margin: \"8px 0px\" }}>\n            {props.children}\n        </div>\n    )\n}\n\nfunction Code(props) {\n\n    var [visible, setVisible] = useState(!props.notVisible);\n\n    if (visible) {\n        return (<div>\n            <div>\n                {props.notVisible ? <Button onClick={() => setVisible(false)} variant=\"dark\">Hide Code</Button> : null}\n                \n            </div>\n            <pre style={{ backgroundColor: \"lightgray\", padding: \"5px\", borderRadius: \"6px\", margin: \"5px\" }}>\n                <code>\n                    {props.children}\n                </code>\n            </pre>\n        </div>);\n    } else {\n        return (<div>\n                    <Button onClick={() => setVisible(true)} variant=\"dark\">Show Code</Button>\n                </div>\n        );\n    }\n\n\n}\n\nfunction Comment(props) {\n    return (\n        <span style={{ color: \"darkgreen\" }}>\n            {props.children}\n        </span>\n    )\n}\n\nfunction Line(props) {\n    let tabs = ''\n\n    for (let i = 0; i < (props.tabs || 0); i++) {\n        tabs += '    '\n    }\n    return (\n        <div>\n            {tabs}{props.children}\n        </div>\n    )\n}\n\nfunction Title(props) {\n    return (\n        <div style={{ fontSize: \"20px\" }}>\n            {props.children}\n        </div>\n    )\n}\n\nfunction Description(props) {\n    return (\n        <div style={{}}>\n            <b>Explanation:</b> {props.children}\n        </div>\n    )\n}\n\nfunction Result(props) {\n    return (\n        <div>\n            <b>Result:</b><br />\n            {props.children}\n        </div>\n    )\n}\n\nexport default {\n    Code,\n    Line,\n    Title,\n    Description,\n    Result,\n    Wrapper,\n    Comment\n}","import React from 'react';\n\n\nexport default function C(props) {\n    return (\n        <code>{props.children}</code>\n    )\n}","import React from 'react';\n\n\nexport default function S(props) {\n    return (\n        <span style={{color: props.color}}>\n            {props.children}\n        </span>\n    )\n}","import IntroWebDev from './IntroWebDev';\n\nexport default IntroWebDev;","import React, {useState, useEffect} from 'react';\nimport {\n    TableOfContents,\n    Section,\n    List,\n    ListItem,\n    CodeSnip,\n    SubSection,\n    Code,\n    C\n} from '../compstore';\n\nimport {Badge, Table, CardDeck} from 'react-bootstrap';\n\n\n\nexport default function IntroWebDev(props) {\n\n\n    return (\n        <div className='page-wrapper' style={{maxWidth: Math.min(props.width, 1000)}}>\n            <h1>\n                Welcome to Intro to Web Dev.\n            </h1>\n            <h3>By Alexander Wurts</h3>\n            <h4>\n                A minimal guide to get started.\n            </h4>\n            <p>\n                If you have any questions, comments, or think there is an error please email me at\n                <b> alexwurtsfeedback@gmail.com</b>.\n            </p>\n            <TableOfContents>\n                <Section link=\"starting\" label=\"Getting Started\" badge={<><span><Badge\n                    variant=\"primary\">Front</Badge></span><span><Badge variant=\"success\">Back</Badge></span></>}>\n                    <p>\n                        Web development can mean a lot of different things. It's important to have a clear learning\n                        goal. If you are interested in user interfaces or front end design it's best to\n                        learn\n                        HTML and CSS first than move to JS for interactive web pages. If you are interested in\n                        creating interactive applications, or programming the site logic then backend is a good\n                        place to start. This\n                        tutorial will cover three topics Front End Development, Backend Development, and Full Stack\n                        development (both frontend and backend). Every section will be labeled either <Badge\n                        variant=\"primary\">Front</Badge>, <Badge\n                        variant=\"success\">Back</Badge>, or <Badge\n                        variant=\"warning\">Back</Badge> which requires both. Based on your goal\n                        you can choose to read the relevant sections.\n                    </p>\n                    <p>\n                        This tutorial is to give you an flavor of web development and link to resources to expand your\n                        knowledge. It provides a brief overview so you can start connecting the pieces to understand how\n                        a web page is constructed.\n                    </p>\n                    <p>\n                        Here are a few key tips to help you succeed:\n                        </p>\n                        <ul>\n                        <li>\n                            Trial and error is the best way to learn. If you aren't sure how a certain function or element works, try writing code that tests multiple ways of using it. Look at the output and see if it aligns with what you expected. Using the browser console can allow for rapid testing. I'll tell you how below.\n                        </li>\n                            <li>Programming is difficult, you can't expect to pick it up in only a few hours. It will\n                                require practice and time.\n                            </li>\n                            <li>Google is a programmers best friend. Learning how to Google effectively is a skill.\n                                Checkout my tutorial on how to Google on the left. Coming soon...\n                            </li>\n                            <li>For frontend find simple website and try to remake them. Don't worry about interaction\n                                or colors at the start, try to replicate the structure and move up from there.\n                            </li>\n                            <li>Having a project to motivate your work is key. Check out the project ideas, or make a project that aligns with one of your hobbies.</li>\n                            <li>If you start with web development and aren't sure you like it try exploring Python. It\n                                allows you to dive into the code faster without needing to learn as much syntax. I'll be\n                                making a tutorial soon.\n                            </li>\n                        </ul>\n                </Section>\n                <Section link={\"resources\"} label={\"Learning Resources\"} badge={<><span><Badge\n                    variant=\"primary\">Front</Badge></span><span><Badge variant=\"success\">Back</Badge></span></>}>\n                    <p>\n                        There are a lot of good resources for learning, but some are better than others. Here are my\n                        personal favorites:\n                        </p>\n                        <ul>\n                            <li><a target=\"_blank\" rel=\"noopener noreferrer\"  href={\"https://developer.mozilla.org/en-US/\"}>Mozilla Web Docs</a> - Long but\n                                thorough tutorials for CSS and HTML\n                            </li>\n                            <li><a target=\"_blank\" rel=\"noopener noreferrer\"  href={\"https://www.w3schools.com/\"}>w3schools</a> - Good for reference, but I\n                                wouldn't recommend the tutorials. They are repetitive and too easy to learn anything.\n                            </li>\n                            <li><a target=\"_blank\" rel=\"noopener noreferrer\"  href={\"https://stackoverflow.com/\"}>Stackoverflow</a> - Has an answer to every\n                                question, if you know how to word your google search.\n                            </li>\n                            <li><a target=\"_blank\" rel=\"noopener noreferrer\"  href={\"https://javascript.info/\"}>Javascript.Info</a> - Very comprehensive tutorial\n                                on JS. Can be overwhelming at the start.\n                            </li>\n                            <li><a target=\"_blank\" rel=\"noopener noreferrer\"  href={\"https://www.amazon.com/dp/1118907442/ref=cm_sw_em_r_mt_dp_U_tsW6DbD71567R\"}>HTML,\n                                CSS, JS, and JQuery</a> - If you are willing to spend a few bucks these books are a\n                                great\n                                reference. I have them sitting on my desk.\n                            </li>\n                        </ul>\n                </Section>\n                <Section link=\"ides\" label=\"Integrated Development Environment (IDEs)\"\n                         badge={<><span><Badge\n                             variant=\"primary\">Front</Badge></span><span><Badge\n                             variant=\"success\">Back</Badge></span></>}>\n                    <p>\n                        IDEs are applications used for editing code. They improve over simple text editors by adding\n                        shortcuts, templates, or other features that make writing code faster and easier. Finding the right IDE\n                        requires trying a lot of different ones.\n                    </p>\n                    <p>\n                        Here are a list of IDEs that I recommend. I personally use Visual Studio code because it works\n                        well with Javascript and Python, my two main languages.\n                    </p>\n                    <List newPage={true}>\n                        <ListItem link=\"https://code.visualstudio.com/\">\n                            Visual Studio Code - Great for Front and Backend Development. Good for beginners.\n                        </ListItem>\n                        <ListItem link=\"https://www.jetbrains.com/webstorm/\">\n                            WebStorm - Aimed more at backend development. $59/year. If you are a college student you can get all Jetbrains IDEs for free.\n                        </ListItem>\n                        <ListItem link=\"https://atom.io/\">\n                            Atom - Light weight but powerful.\n                        </ListItem>\n                    </List>\n                </Section>\n                <Section link={'startcoding'} label={\"How to start coding\"}\n                         badge={<><span><Badge\n                             variant=\"primary\">Front</Badge></span><span><Badge\n                             variant=\"success\">Back</Badge></span></>}>\n                    <p>\n                        For frontend development download <a target=\"_blank\" rel=\"noopener noreferrer\" download\n                        href={\"/files/introfronttemplate.html\"}>this</a> template\n                        file. Place it in a folder and open the folder with one of the IDEs. To run the file open it in any browser by double clicking it.\n                    </p>\n                    <p>\n                        For backend development there are two main approaches. If you want to write scripts you can\n                        install and use <a target=\"_blank\" rel=\"noopener noreferrer\"  href={\"https://nodejs.org/en/\"}>Node</a> or you can embed scripts in an html file. To edit place the file in a folder and open the folder with one of the IDEs.\n                        </p>\n                        <p>\n                        To print a variable or string inside an HTML file you can\n                        use <code>console.log(variable)</code>. To view the output of <code>console.log</code> you need to open the browser console. On most browsers you can right click directly on the page then click <i>inspect</i>, or <i>inspect element</i>. A window should popup. Click on <i>console</i> and you can now write Javascript code and see the result immediately. Any <code>console.log</code> commands you write will output here.\n                        </p>  \n                        <p>\n                        Here is a <a target=\"_blank\" download href=\"/files/introbacktemplate.html\">template file</a> to start\n                        with. Open it in your favorite browser.\n                        I recommend writing scripts for your browser to start, then move to Node if you want to do more\n                        complex projects that do not require a browser.\n                    </p>\n                </Section>\n                <Section link=\"basichtml\" label=\"Basic HTML Elements\" badge={<Badge\n                    variant=\"primary\">Front</Badge>}>\n                    <p>\n                        HTML is a language for displaying items in a certain configuration on screen. HTML has many\n                        different\n                        components for displaying items. HTML can be thought of as the skeleton of the web page.\n                        It defines the layout and then CSS adds style and coloring. HTML consists of a hierarchy of\n                        elements where each element has a set of children. The children are contained within the parent\n                        element. The children can either be text, or other elements.\n                    </p>\n                    <p>\n                        All HTML elements are started with <C>{`<element>`}</C>, where element is the name of the element. They are closed with <C>{`</element>`}</C>. Everything between those items are the element's children. \n                    </p>\n                    <p>\n                        All HTML elements can have attributes which change or add features to the element. For example\n                        the button element can have an <code>onclick</code> attribute to determine how the page should\n                        react when clicked.\n                    </p>\n                    <Code.Wrapper>\n                        <Code.Title>\n                            Button with Attribute\n                        </Code.Title>\n                        <Code.Code>\n                            <Code.Line>\n                                {`<button`} <span style={{color: \"blue\"}}>onclick=\"handleClick\"</span>{`>Submit</button>`}\n                            </Code.Line>\n                        </Code.Code>\n                        <Code.Description>\n                            The button has an attribute named onclick. The value of onclick is a string handleClick\n                            which links to a javascript function.\n                        </Code.Description>\n                    </Code.Wrapper>\n                    <p>\n                        Here are the elements I use the most. There are many more, but they aren't used nearly as often.\n                        A complete list of elements is available at <a target=\"_blank\" rel=\"noopener noreferrer\" \n                        href={\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\"}>Mozilla MDN Web Docs</a>.\n                        </p>\n                        <CardDeck >\n                            <CodeSnip.Snip title={\"<div></div>\"} subtitle={\"Div\"}>\n                                Used to define a section or division of the screen. A div tag takes up the entire screen horizontally\n                                from left to right. Items are placed inside.\n                            </CodeSnip.Snip>\n                            <CodeSnip.Snip title={\"<span></span>\"} subtitle={\"Span\"}>\n                                Used for placing items next to each other as opposed to on top of each other. Spans is\n                                an inline element which means it doesn't create a new line.\n                            </CodeSnip.Snip>\n                            <CodeSnip.Snip title={\"<a></a>\"} subtitle={\"Anchor (Link)\"}>\n                                Used for linking to other pages. Inline element.\n                                <CodeSnip.Example>\n                                    {`<a href=\"http://otherpage.com\"> link text </a>`}\n                                </CodeSnip.Example>\n                            </CodeSnip.Snip>\n                        </CardDeck>\n                        <CardDeck>\n                            <CodeSnip.Snip title={\"<h1></h1>\"} subtitle={\"Header \"}>\n                                Headers are defined with h1 down to h5. The higher the number the smaller the text. Read that again, it's probably reverse to what you thought.\n                                On this page the text \"Welcome to Intro to Web Dev\" uses the h1 tag.\n                                <CodeSnip.Example>\n                                    {`<h1> Main Page Title </h1>`}\n                                </CodeSnip.Example>\n                            </CodeSnip.Snip>\n                            <CodeSnip.Snip title={\"<img/>\"} subtitle={\"Image \"}>\n                                Displays images on the page. You can either link an image from the local folder or an\n                                address from the internet.\n                                <CodeSnip.Example>\n                                    {`<img src=\"image path or url\"/>`}\n                                </CodeSnip.Example>\n                            </CodeSnip.Snip>\n                        </CardDeck>\n                        <CardDeck>\n                            <CodeSnip.Snip title={\"<body></body>\"} subtitle={\"Body \"}>\n                                Labels the body section of the web page. This is where all the page content goes.\n                            </CodeSnip.Snip>\n                            <CodeSnip.Snip title={\"<head></head>\"} subtitle={\"Head \"}>\n                                All imports and other page data is stored here or used to import other libraries into\n                                the web page. The font this web page uses is Roboto. It is imported in the head.\n                            </CodeSnip.Snip>\n                            <CodeSnip.Snip title={\"<p></p>\"} subtitle={\"Paragraph \"}>\n                                A paragraph tag is used to define a section of text.\n                                It automatically adds space above and below the paragraph.\n                                <CodeSnip.Example>\n                                    {`<p > Paragraph Text Here </p>`}\n                                </CodeSnip.Example>\n                            </CodeSnip.Snip>\n                        </CardDeck>\n                        <CardDeck>\n\n                            <CodeSnip.Snip title={\"<input></input>\"} subtitle={\"Input \"}>\n                                Creates an entry box that a user can type into. Input boxes can be many different types. The one below is a text input.\n                                <CodeSnip.Example>\n                                    {`<input type=\"text\"></input>`}\n                                </CodeSnip.Example>\n                                <CodeSnip.Result>\n                                    <input id={'input-example'} type={'text'}/>\n                                </CodeSnip.Result>\n                            </CodeSnip.Snip>\n                            <CodeSnip.Snip title={\"<button></button>\"} subtitle={\"Button \"}>\n                                Adds a button to the screen that a user can click.\n                                <CodeSnip.Example>\n                                    {`<button onclick=\"handleClick\">Button Example</button>`}\n                                </CodeSnip.Example>\n                                <CodeSnip.Result>\n                                    <button onClick={() => alert(document.getElementById(\"input-example\").value)}>Button\n                                        Example\n                                    </button>\n                                </CodeSnip.Result>\n                            </CodeSnip.Snip>\n\n\n                        </CardDeck>\n                        <CardDeck>\n\n                            <CodeSnip.Snip title={\"<ul></ul>\"} subtitle={\"Un-ordered List \"}>\n                                A list with dots.\n                                <CodeSnip.Example>\n                                    {`<ul>...</ul>`}\n                                </CodeSnip.Example>\n                                <CodeSnip.Result>\n                                    <ul>\n                                        <li>Hi</li>\n                                    </ul>\n                                </CodeSnip.Result>\n                            </CodeSnip.Snip>\n                            <CodeSnip.Snip title={\"<li></li>\"} subtitle={\"List Item \"}>\n                                An item in a list. This elements need to be placed\n                                within <code>{`<ol></ol>`}</code> or <code>{`<ul></ul>`}</code>.\n                                <CodeSnip.Example>\n                                    <Code.Line>\n                                        {`<ul>`}\n                                    </Code.Line>\n                                    <Code.Line tabs={1}>\n                                        &emsp;&emsp;{`<li> Item 1 </li>`}\n                                    </Code.Line>\n                                    <Code.Line>\n                                        {`</ul>`}\n                                    </Code.Line>\n                                </CodeSnip.Example>\n                                <CodeSnip.Result>\n                                    <ul>\n                                        <li>Item 1</li>\n                                    </ul>\n                                </CodeSnip.Result>\n                            </CodeSnip.Snip>\n                            <CodeSnip.Snip title={\"<ol></ol>\"} subtitle={\"Ordered List\"}>\n                                Adds a button to the screen that a user can click.\n                                <CodeSnip.Example>\n                                    {`<ol>...</ol>`}\n                                </CodeSnip.Example>\n                                <CodeSnip.Result>\n                                    <ol>\n                                        <li>Item 1</li>\n                                    </ol>\n                                </CodeSnip.Result>\n                            </CodeSnip.Snip>\n                        </CardDeck>\n                </Section>\n                <Section link=\"basiccss\" label=\"Basic CSS\" badge={<Badge\n                    variant=\"primary\">Front</Badge>}>\n                    <p>\n                        CSS is used to decorate the page. Changing the font color, size, background color, and borders\n                        are all done through CSS. To apply a CSS property to an element you use the following syntax for\n                        in-line css:\n                    </p>\n                    <p>\n                        <code>{`<div style=\"tagname: tagvalue\" >text </div>`}</code>\n                    </p>\n                    <p>\n                        However in-line should be avoided as it can become difficult to modify, maintain and use for\n                        more than one element. The better way is be creating a new .css file and defining CSS classes. A\n                        CSS Class is a set of properties that can be applied to an HTML object using the class option:\n                    </p>\n                    <p>\n                        <code> {`<div class=\"title\">title text</div>`}</code>\n                    </p>\n\n                    <p>\n                        An attached styles.css file will have the following format for the title class:\n                    </p>\n                        <Code.Wrapper>\n                            <Code.Code>\n                                <Code.Line>.title {`{`}</Code.Line>\n                                <Code.Line tabs={1}> color: red;</Code.Line>\n                                <Code.Line tabs={1}> background-color: black; </Code.Line>\n                                <Code.Line>}</Code.Line>\n                                <Code.Line>p {`{`} // Used to stylize all of one HTML element, in this case\n                                    all <code>p</code>.</Code.Line>\n                                <Code.Line tabs={1}> color: red;</Code.Line>\n                                <Code.Line tabs={1}> background-color: black; </Code.Line>\n                                <Code.Line>}</Code.Line>\n                            </Code.Code>\n                        </Code.Wrapper>\n                    <p>\n                        For a list of all CSS properties go to <a target=\"_blank\" rel=\"noopener noreferrer\" \n                        href={\"https://www.w3schools.com/cssref/\"}>w3schools.com</a>. Here are the most used CSS\n                        properties:\n                    </p>\n                    <CardDeck>\n                        <CodeSnip.Snip title={\"color\"} subtitle={\"Text Color\"}>\n                            Changes the text color. Web color is based on the RGB color encoding. The colors are Red,\n                            Green, and Blue respectively and referred to as color channels. Their values are always\n                            between 0 and 255. The ratio of the three colors defines the final color. The simplest way\n                            to choose a color is using built in colors like, red, white, black, gray, teal, and so\n                            on. A complete list of built in colors is available <a target=\"_blank\" rel=\"noopener noreferrer\" \n                                                                                   href=\"http://www.colors.commutercreative.com/grid/\">here</a>.\n                            Another way to specify colors is <code>rgb(30, 40, 50)</code> where each number corresponds\n                            to the\n                            respective color channel. White in this format is <code>rgb(255, 255, 255)</code>. Black\n                            is <code>rgb(0, 0, 0)</code>.\n                            <CodeSnip.Example>\n                                {`<div style=\"color: rgb(100, 100, 200)\"> Purple Text </div>`}\n\n                            </CodeSnip.Example>\n                            <b>Result:</b>\n                            <div style={{color: \"rgb(100, 100, 200)\"}}>Purple Text</div>\n                        </CodeSnip.Snip>\n                    </CardDeck>\n\n                    <CardDeck>\n                        <CodeSnip.Snip title={\"margin\"} subtitle={\"Margin around element\"}>\n                            Sets the space between the edge of the element and the surrounding elements. It is outside\n                            of padding. Margin uses pixels or other units to define its size. If you want to center an\n                            item you can set margin to <code>auto</code>.\n                            <CodeSnip.Example>\n                                {`<span style=\"margin: 5px; \"> text1 </span>`}\n                            </CodeSnip.Example>\n                            <b>Visual:</b>\n                            <div style={{padding: \"5px\", backgroundColor: \"orange\", borderRadius: \"8px\"}}>\n                                Margin\n                                <div style={{\n                                    borderRadius: \"8px\",\n                                    margin: '5px',\n                                    backgroundColor: 'green',\n                                    padding: \"5px\",\n                                    color: \"white\"\n                                }}>\n                                    Padding\n                                    <div style={{\n                                        padding: \"5px\",\n                                        borderRadius: \"8px\",\n                                        backgroundColor: \"white\",\n                                        color: \"black\"\n                                    }}>\n                                        Content\n                                    </div>\n                                </div>\n                            </div>\n                        </CodeSnip.Snip>\n                        <CodeSnip.Snip title={\"padding\"} subtitle={\"Padding content\"}>\n                            Sets the space between the edge of the content and the edge of the background. Look at the\n                            visual to understand the difference between margin and padding. The background is included\n                            in the padding, but not margin.\n                            <CodeSnip.Example>\n                                {`<span style=\"padding: 5px; \"> text </span>`}\n                            </CodeSnip.Example>\n                            <b>Visual:</b>\n                            <div style={{padding: \"5px\", backgroundColor: \"orange\", borderRadius: \"8px\"}}>\n                                Margin\n                                <div style={{\n                                    borderRadius: \"8px\",\n                                    margin: '5px',\n                                    backgroundColor: 'green',\n                                    padding: \"5px\",\n                                    color: \"white\"\n                                }}>\n                                    Padding\n                                    <div style={{\n                                        padding: \"5px\",\n                                        borderRadius: \"8px\",\n                                        backgroundColor: \"white\",\n                                        color: \"black\"\n                                    }}>\n                                        Content\n                                    </div>\n                                </div>\n                            </div>\n                        </CodeSnip.Snip>\n                    </CardDeck>\n                    <CardDeck>\n                        <CodeSnip.Snip title={\"font-size\"} subtitle={\"Font Size\"}>\n                            Changes the text size. The most common unit to use is px for pixels. Normal text sizes are\n                            between 12 for paragraphs to 40 for large titles.\n                            <CodeSnip.Example>\n                                {`<div style=\"font-size: 18px\"> 18px text</div>`}\n                            </CodeSnip.Example>\n                            <b>Result:</b>\n                            <div style={{fontSize: \"18px\"}}>18px text</div>\n                        </CodeSnip.Snip>\n                        <CodeSnip.Snip title={\"background-color\"} subtitle={\"Element Background Color\"}>\n                            Sets the background color. In the following example the background is set to Dark Blue and\n                            the text is set to white to stay readable.\n                            <CodeSnip.Example>\n                                {`<div style=\"background-color: darkblue; color: white\"> </div>`}\n                            </CodeSnip.Example>\n                            <b>Result:</b>\n                            <div style={{backgroundColor: \"darkblue\", color: \"white\"}}>white text</div>\n                        </CodeSnip.Snip>\n                        <CodeSnip.Snip title={\"display\"} subtitle={\"Display\"}>\n                            Sets the element display behavior. The default value is block. Block means the item will\n                            take up the entire width like {`<p>`} or {`<div>`}. A commonly used alternative\n                            is <code>flex</code>. It forces the children to all be on the same line, space permitting.\n                            <CodeSnip.Example>\n                                <Code.Code>\n                                    <Code.Line>\n                                        {`<div style=\"display: flex\">`}\n                                    </Code.Line>\n                                    <Code.Line tabs={1}>\n                                        {`<div>div1</div> `}\n                                    </Code.Line>\n                                    <Code.Line tabs={1}>\n                                        {`<div>div2</div>`}\n                                    </Code.Line>\n                                    <Code.Line>\n                                        {`</div>`}\n                                    </Code.Line>\n                                </Code.Code>\n                            </CodeSnip.Example>\n                            <CodeSnip.Result>\n                                <div style={{display: \"inline-flex\"}}> div1</div>\n                                <div style={{display: \"inline-flex\"}}> div2</div>\n                            </CodeSnip.Result>\n                        </CodeSnip.Snip>\n                    </CardDeck>\n                    <CardDeck>\n                        <CodeSnip.Snip title={\"width and height\"} subtitle={\"Width and Height\"}>\n                            Sets the width or height of the element respectively. All sizes in CSS can be defined with\n                            multiple units. Here are the most common:\n                            <ul>\n                                <li>px (pixels) - pixels are the same for every page</li>\n                                <li>% (percent) - Relative to the parent component</li>\n                                <li>vw - Equal to 1% of the width of the window</li>\n                                <li>vh - Equal to 1% of the height of the window</li>\n                            </ul>\n                            All units can be viewed on <a target=\"_blank\" rel=\"noopener noreferrer\" \n                            href=\"https://www.w3schools.com/cssref/css_units.asp\">w3schools.com</a>\n                            <CodeSnip.Example>\n                                {`<div style=\"width: 50%; height=20px\"> Text <div>`}\n                            </CodeSnip.Example>\n                            <Code.Result>\n                                <div style={{width: \"50%\", height: \"50px\", backgroundColor: \"darkgray\"}}>\n                                    Text\n                                </div>\n                            </Code.Result>\n                            Background color added to visualize <code>div</code> true size.\n                        </CodeSnip.Snip>\n                        <CodeSnip.Snip title={\"border\"} subtitle={\"Border\"}>\n                            Sets the thickness, line type and color of the component border. The border is displayed\n                            outside of padding but inside margin.\n                            A trick to making modern looking components is using <code>border-radius</code>. It adds the\n                            rounded look to a component. Your component does\n                            not need to have a defined border to use <code>border-radius</code>.\n                            <CodeSnip.Example>\n                                {`<div style=\"border: 1px solid black; border-radius: 8px\"> </div>`}\n                            </CodeSnip.Example>\n\n                            <CodeSnip.Result>\n                                <div style={{border: \"5px solid black\", borderRadius: \"8px\"}}> Border Example</div>\n                            </CodeSnip.Result>\n                        </CodeSnip.Snip>\n                    </CardDeck>\n                    <CardDeck>\n                        <CodeSnip.Snip title={\"text-align\"} subtitle={\"Horizontal Text Alignment\"}>\n                            Used to align text horizontally. It can be set\n                            to <code>start</code>, <code>center</code> or <code>end</code>.\n\n                            <CodeSnip.Example>\n                                {`<div style=\"text-align: center\"> center text</div>`}\n                            </CodeSnip.Example>\n                            <b>Result:</b>\n                            <div style={{textAlign: \"center\"}}>center text</div>\n                        </CodeSnip.Snip>\n                        <CodeSnip.Snip title={\"vertical-align\"} subtitle={\"Element Background Color\"}>\n                            Aligns content vertically. Mainly used for items in tables. NOTE: It only applies to inline,\n                            inline-block and table-cell\n                            elements. It will not work on <code>div></code> but it will work on text.\n                            <CodeSnip.Example>\n                                {`<div style=\"display: inline-flex; vertical-align: top\"> text</div>`}\n                            </CodeSnip.Example>\n                            <b>Result:</b>\n                            <div style={{verticalAlign: \"bottom\", display: 'inline-flex', height: \"30px\"}}>white text\n                            </div>\n                        </CodeSnip.Snip>\n                    </CardDeck>\n                </Section>\n                <Section link={\"basicjs\"} label={\"Basic Javascript\"} badge={<Badge\n                    variant=\"success\">Back</Badge>}>\n                    <p>\n                        Javascript is the language that allows users to interact with a web page. When a\n                        user clicks on a button the events that follow are programmed in Javascript.\n                        Javascript has the same main features of other popular programming languages like C, Java, and\n                        Python. The best way to improve at programming in general is practice. It is no different for\n                        Javascript.\n                    </p>\n\n                    <SubSection link={\"basicjsvariables\"} label={\"Variables\"}>\n                        Variables are how data is stored. You can define variables\n                        using <code>let</code>, <code>var</code>, or <code>const</code>. Javascript is a duck\n                        typed language which means you don't specify the variable type in your code. It looks at the\n                        data and determines what type it is. Two forward slashes <code>//</code> are used to start a\n                        comment, or code that is not run. Every line of JS (javascript) code is followed by a\n                        semi-colon.\n                        <Code.Wrapper>\n                            <Code.Title>\n                                Example Variable Initialization (Creation).\n                            </Code.Title>\n                            <Code.Code>\n                                <Code.Line>\n                                    let numberOfDogs = 10;\n                                </Code.Line>\n                                <Code.Line>\n                                    var numberOfCats = 10;\n                                </Code.Line>\n                                <Code.Line>\n                                    const NUMBER_OF_ANIMALS = 20;\n                                </Code.Line>\n\n                            </Code.Code>\n                            <Code.Description>\n                                Each example has an <C>=</C> operator. A single <C>=</C> is called the assignment operator. It allows you to assign the value on the right to the variable on the left. <code>let</code> defines a local variable only defined in the scope of the current\n                                block. <code>var</code> defines\n                                a variable accessible within the entire function. <code>const</code> defines a variable\n                                that cannot change and is denoted in all upper case.\n                            </Code.Description>\n                        </Code.Wrapper>\n                        <Code.Wrapper>\n                            <Code.Title>\n                                Variable Types\n                            </Code.Title>\n                            <Code.Code>\n                                <Code.Line>\n                                    let name = \"Ben\"; // A <span\n                                    style={{color: 'rgb(40, 116, 166)'}}>string</span> represents a sequence of\n                                    characters. Always surrounded by <C>\"\"</C>, <C>''</C>, or <C>``</C>.\n                                </Code.Line>\n                                <Code.Line>\n                                    let monthInYear = {(new Date()).getMonth() + 1}; // An <span\n                                    style={{color: 'rgb(40, 116, 166)'}}>integer</span> represents a number\n                                    without any decimal places\n                                </Code.Line>\n                                <Code.Line>\n                                    let pi = 3.141592654; // A <span\n                                    style={{color: 'rgb(40, 116, 166)'}}>float</span> represents a number with decimal\n                                    places.\n                                </Code.Line>\n                                <Code.Line>\n                                    const isItSunday = {(new Date()).getDay() === 0 ? \"true\" : \"false\"}; //A <span\n                                    style={{color: 'rgb(40, 116, 166)'}}>boolean</span> can\n                                    only be true or false\n                                </Code.Line>\n                                <Code.Line>\n                                    let car = {`{`} // An <span\n                                    style={{color: 'rgb(40, 116, 166)'}}>object</span> representing a car. The data can\n                                    be accessed using\n                                    car.model\n                                </Code.Line>\n                                <Code.Line>\n                                    {`    `}model: \"Rav4\",\n                                </Code.Line>\n                                <Code.Line>\n                                    {`    `}miles: 12040\n                                </Code.Line>\n                                <Code.Line>\n                                    } // Values can be set in an object using brackets <code>car['model'] =\n                                    \"corolla\";</code>\n                                </Code.Line>\n                                <Code.Line>\n                                    let array1 = [0,1,2,3,4,5]; // An <span\n                                    style={{color: 'rgb(40, 116, 166)'}}>array</span> is used to hold more than one\n                                    value of any type.\n                                </Code.Line>\n                            </Code.Code>\n                            <Code.Description>\n                                These are some of the main types of variables. A more in-depth overview is available on <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://www.w3schools.com/js/js_datatypes.asp\">w3schools</a>.\n                            </Code.Description>\n                        </Code.Wrapper>\n                    </SubSection>\n                    <SubSection link={\"basicjs-operators\"} label={\"Operators\"}>\n                    <p>\n                    Operators are used to combine and maniuplate variables. Here are the three main types.\n                    </p>\n                     Math operators behave like the standard math operations.\n                       <ul>\n                                    \n                           <li><C>+</C> - Addition. <C>{`5 + 5`}</C> returns <C>10</C></li>\n                           <li><C>-</C> - Subtraction. <C>{`5 - 3`}</C> returns <C>2</C></li>\n                           <li><C>/</C> - Division. <C>{`10 / 5`}</C> returns <C>2</C></li>\n                           <li><C>*</C> - Multiplication. <C>{`10 * 2.5`}</C> returns <C>25</C>. All operators work for integers and floats.</li>\n                           <li><C>%</C> - Modulus. The remainder operator. Takes the remainder after division. <C>{`12 % 5`}</C> returns <C>2</C> because 12 / 5 = 10 remainder <C>2</C>.</li>\n                           <li><C>++</C> - Increment. Increments the variable by one and saves it. <C>{`i++`}</C> returns nothing, but now <C>i</C> is one greater.</li>\n                           <li><C>--</C> - Decrement. Decrements the variable by one and saves it. <C>{`i--`}</C> returns nothing, but now <C>i</C> is one less.</li>\n                       </ul>\n                       Comparison operators compare two variables and return a boolean. \n                       <ul>\n                           <li><C>{`<`}</C> - less than. <C>{`3 < 5`}</C> returns <C>true</C></li>\n                           <li><C>{`>`}</C> - greater than. <C>{`7 > 5`}</C> returns <C>true</C>. <C>{`5 > 5`}</C> returns <C>false</C></li>\n                           <li><C>{`>=`}</C> - greater than or equal. <C>{`5 >= 5`}</C> returns <C>true</C></li>\n                           <li><C>{`<=`}</C> - less than or equal. <C>{`5 <= 6`}</C> returns <C>true</C></li>\n                           <li><C>{`===`}</C> - equals. <C>{`3 === 5`}</C> returns <C>false</C>. There is a <C>==</C> operator, but you should primarily use <C>===</C>. This page <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a\"> explains the difference well.</a></li>\n                          \n                       </ul>\n                       Boolean Operators combine one or two booleans and return a boolean. \n                       <ul>\n                           <li><C>{`!`}</C> - not. Changes a boolean to the opposite state. <C>{`!true`}</C> returns <C>false</C></li>\n                           <li><C>{`&&`}</C> - and. if both are true returns true. <C>{`true && true`}</C> returns <C>true</C></li>\n                           <li><C>{`||`}</C> - or. if either are true returns true. <C>{`true || false`}</C> returns <C>true</C></li>\n                       </ul>\n                       \n                    </SubSection>\n                {/* </Section> */}\n                    <SubSection link={'basicjsfunctions'} label={\"Functions\"}>\n                        <p>\n                            Functions are used to perform specific tasks. A example function could be one that displays\n                            \"Hello World\" to the user. Every function has input values, called parameters, and most have\n                            output values, called return values.\n                        </p>\n                        <p>\n                            Parameters are values passed to the function, so it can perform a calculation or task. Once\n                            the\n                            function is complete it returns a value. Functions are used on tasks repeated\n                            often to reduce writing the same code more than once. They are also used as callbacks when a user interacts with the page. Functions can have multiple\n                            parameters.\n                        </p>\n                            <Code.Wrapper>\n                                <Code.Title>\n                                    Defining a Function\n                                </Code.Title>\n                                <Code.Code>\n                                    <Code.Line>\n                                        function addOne(number) &#123;\n                                    </Code.Line>\n                                    <Code.Line>\n                                        {`  return number + 1;`}\n                                    </Code.Line>\n                                    <Code.Line>\n                                        &#125;\n                                    </Code.Line>\n                                </Code.Code>\n                                <Code.Description>\n                                    The function is named addOne. It takes a parameter, number, and returns the number\n                                    plus 1.\n                                    This function assumes the input value is a number.\n                                </Code.Description>\n                            </Code.Wrapper>\n                        <p>\n                            Running a function is referred to as calling a function. If I called addOne it means\n                            I am running the function by passing in a variable.\n                        </p>\n                            <Code.Wrapper>\n                                <Code.Title>\n                                    Calling a Function\n                                </Code.Title>\n                                <Code.Code>\n                                    <Code.Line>\n                                        let numberOfCats = 10;\n                                    </Code.Line>\n                                    <Code.Line>\n                                        numberOfCats = addACat(numberOfCats); \n                                    </Code.Line>\n                                    <Code.Line>\n                                        console.log(numberOfCats);\n                                    </Code.Line>\n                                </Code.Code>\n                                <Code.Description>\n                                    This code calls the function addACat with the parameter numberOfCats. When the\n                                    function is run the number parameter is assigned the value of numberOfCats. The\n                                    function adds 1 to number then returns it. The output in the console in this case is 11.\n                                </Code.Description>\n                            </Code.Wrapper>\n\n                    </SubSection>\n\n                    <SubSection link={\"basicjsloops\"} label={\"Loops\"}>\n                        <p>Loops are sections of code that are repeated. If you had a grocery store list and wanted to\n                            check whether milk was on the list, a loop could do that. There are two types of loops, for\n                            loops, and while loops. For loops are generally used for iterating through lists. While\n                            loops are used when the finish condition is not known at the start.\n                        </p>\n                        <Code.Wrapper>\n                            <Code.Title>\n                                For Loop\n                            </Code.Title>\n                            <Code.Code>\n                                <Code.Line>\n                                    let array1 = [0,1,2,4,5,6];\n                                </Code.Line>\n                                <Code.Line>\n                                    let sum = 0;\n                                </Code.Line>\n                                <Code.Line>\n                                    for (<span style={{color: \"#E67E22\"}}>let i = 0</span>; <span\n                                    style={{color: '#0E6251'}}>i {`<`} array1.length</span>;<span\n                                    style={{color: '#2874A6'}}> i++</span>) {`{`}\n                                </Code.Line>\n                                {`    `}sum = sum + <span style={{color: '#922B21'}}>array1[i]</span>\n                                <Code.Line>\n                                    {'}'}\n                                </Code.Line>\n\n                            </Code.Code>\n                            <Code.Description>\n                                The above code is used find the total of the numbers in array1. A <C>for loop</C> is\n                                initialized with 3 parts: creating an index variable: <code style={{color: \"#E67E22\"}}>let\n                                i = 0</code>, setting the finish point: <code\n                                style={{color: '#0E6251'}}>i {`<`} array1.length</code>, and incrementing the index\n                                after each repeat: <code\n                                style={{color: '#2874A6'}}>i++</code>. Inside the for loop array1 is being accessed at\n                                index i: <code style={{color: '#922B21'}}>array1[i]</code>. The i surrounded by brackets\n                                is used to access the i-th item in the array. Sum would equal {1 + 2 + 4 + 5 + 6} after the loop\n                                finished.\n                            </Code.Description>\n                        </Code.Wrapper>\n                    </SubSection>\n        </Section>\n                <Section link={\"pagemanip\"} label={\"Changing a web page with code\"}\n                         badge={<Badge variant={'warning'}>Full</Badge>}>\n                    <p>\n                        Now that you have a brief overview of javascript, let's go over how to use code in a web\n                        page.\n                        Scripts can be embedded in web pages using the\n                        HTML <code>{`<script></script>`}</code> element. Below is an example of how you could\n                        process user input using an input box and a button.\n                    </p>\n                    <SubSection link={\"pagemanip-click\"} title={\"HTML Part\"}>\n                        <p>\n                            In order to retrieve user input you need to create an input component using HTML, and a\n                            button to submit.\n                        </p>\n                    </SubSection>\n                    <Code.Wrapper>\n                        <Code.Title>\n                            HTML Code\n                        </Code.Title>\n                        <Code.Code>\n                            <Code.Line>\n                                {`<html>`}\n                            </Code.Line>\n                            <Code.Line>\n                                {`<body>`}\n                            </Code.Line>\n                            <Code.Line tabs={1}>\n                                {`<input id=\"text-input\"/>`}\n                            </Code.Line>\n                            <Code.Line tabs={1}>\n                                {`<button onclick=\"handleClick\">Submit Form</button>`}\n                            </Code.Line>\n                            <Code.Line>\n                                {`</body>`}\n                            </Code.Line>\n                            <Code.Line>\n                                {'</html>'}\n                            </Code.Line>\n                        </Code.Code>\n                        <Code.Description>\n                            A button was created that links to the handleClick function. We will create that next. The\n                            input element was created with an id attribute. This will allow us to identify it in the\n                            handleClick function.\n                        </Code.Description>\n                    </Code.Wrapper>\n                    <Code.Wrapper>\n                        <Code.Title>\n                            HTML Code with Script Element\n                        </Code.Title>\n                        <Code.Code>\n                            <Code.Line>\n                                {`<html>`}\n                            </Code.Line>\n                            <Code.Line>\n                                {`<head>`}\n                            </Code.Line>\n                            <Code.Line tabs={1}>\n                                {`<script>`}\n                            </Code.Line>\n                            <Code.Line tabs={1}>\n                                function handleClick(event) {`{`}\n                            </Code.Line>\n                            <Code.Line tabs={2}>\n                                let inputElement = document.findElementById('text-input')\n                            </Code.Line>\n                            <Code.Line tabs={2}>\n                                let text = inputElement.value;\n                            </Code.Line>\n                            <Code.Line tabs={2}>\n                                alert(text);\n                            </Code.Line>\n                            <Code.Line tabs={1}>\n                                }\n                            </Code.Line>\n                            <Code.Line tabs={1}>\n                                {`<script>`}\n                            </Code.Line>\n                            <Code.Line>\n                                {`</head>`}\n                            </Code.Line>\n                            <Code.Line>\n                                {`<body>`}\n                            </Code.Line>\n                            <Code.Line tabs={1}>\n                                {`<input id=\"text-input\"/>`}\n                            </Code.Line>\n                            <Code.Line tabs={1}>\n                                {`<button onclick=\"handleClick\">Submit</button>`}\n                            </Code.Line>\n                            <Code.Line>\n                                {`</body>`}\n                            </Code.Line>\n                            <Code.Line>\n                                {'</html>'}\n                            </Code.Line>\n\n                        </Code.Code>\n                        <Code.Description>\n                            The handleClick function was added to process the button click. The first line of the\n                            function accesses the web page, also called document.\n                            It looks for an element with the id 'text-input'. It finds the input we defined inside the\n                            body. It then retrieves the user input text stored in value.\n                            The final line creates a popup on your screen with the user input.\n                        </Code.Description>\n                        <Code.Result>\n                            <input id={\"text-input-2\"}/>\n                            <button onClick={() => alert(document.getElementById(\"text-input-2\").value)}>Submit</button>\n                        </Code.Result>\n                    </Code.Wrapper>\n\n                </Section>\n                <Section link=\"projects\" label=\"Projects\" badge={<span><Badge variant={\"primary\"}>Front</Badge><Badge\n                    variant={\"success\"}>Back</Badge></span>}>\n                    These projects are just a recommendation. Try to find a project you're passionate about and pursue\n                    that.\n                    <div style={{overflowX: 'scroll'}}>\n\n                    \n                    <Table >\n                    <thead>\n                        <tr>\n                        <th>\n                            Project Name\n                        </th>\n                        <th>\n                            Type\n                        </th>\n                        <th>\n                            Description\n                        </th>\n                        <th>\n                            Difficulty\n                        </th>\n                        <th>\n                            Estimated Time\n                        </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td>\n                                Calendar\n                            </td>\n                            <td>\n                                <Badge variant={\"primary\"}>Front</Badge>\n                            </td>\n                            <td>\n                                Create a calendar that shows the days of the month for January 2016.\n                            </td>\n                            <td>\n                                Easy\n                            </td>\n                            <td>\n                                30min-3hrs\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                Example Portfolio\n                            </td>\n                            <td>\n                                <Badge variant={\"primary\"}>Front</Badge>\n                            </td>\n                            <td>\n                                Create a website showing off the website you have made or want to make.\n                            </td>\n                            <td>\n                                Easy\n                            </td>\n                            <td>\n                                1-5hrs\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                Replicate Webpages\n                            </td>\n                            <td>\n                                <Badge variant={\"primary\"}>Front</Badge>\n                            </td>\n                            <td>\n                                Replicate a web page. You can choose to copy interactions.\n                            </td>\n                            <td>\n                                Easy to Hard\n                            </td>\n                            <td>\n                                1-5hrs\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                Calculator\n                            </td>\n                            <td>\n                            <Badge variant={\"warning\"}>Full</Badge>\n\n                            </td>\n                            <td>\n                                Create a calculator that has two inputs and lets the user decide what calculation to\n                                apply.\n                            </td>\n                            <td>\n                                Medium\n                            </td>\n                            <td>\n                                1-3hrs\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                Random Item Selector\n                            </td>\n                            <td>\n                                <Badge variant={\"warning\"}>Full</Badge>\n                            </td>\n                            <td>\n                                Let the user enter a list of items and then randomly select one. This could be used for\n                                randomly deciding what restaurant to go to.\n                            </td>\n                            <td>\n                                Medium\n                            </td>\n                            <td>\n                                1-3hrs\n                            </td>\n                        </tr>\n                        </tbody>\n                    </Table>\n                    </div>\n                </Section>\n                <Section link={'nextsteps'} label={\"Next Steps\"}\n                         badge={<span><Badge variant={\"primary\"}>Front</Badge><Badge\n                             variant={\"success\"}>Back</Badge></span>}>\n                    <p>\n                        Now that you have a brief overview of web development there are many paths to go.\n                        The web is built on a lot of different frameworks. Each one has their pros and cons, but all are\n                        built on HTML, CSS, and JS.\n                    </p>\n                    <p>\n                        For complete beginners, look at some of the resources I posted throughout the article. Try completing some of the projects above, then move on to the sections\n                        below. Use google as much as possible so you don't get stuck.\n                    </p>\n                    <p>\n                        For people who already have coding experience start looking into libraries and frameworks.\n                        I recommend starting to learn a framework and use that as motivation to improve your HTML, CSS,\n                        and JS skills.\n                    </p>\n                    <SubSection label={\"Frontend Libraries\"} badge={<Badge variant={\"primary\"}>Front</Badge>}>\n                        <p>\n                            These libraries are primarily used for user interface creation, however they heavily rely on\n                            JS to\n                            make them.\n                            </p>\n                            <ul>\n                                <li>\n                                    <a target=\"_blank\" rel=\"noopener noreferrer\"  href={\"https://jquery.com/\"}>jQuery</a> makes\n                                    writing JS easier by adding functionality, and more powerful syntax.\n                                </li>\n                                <li>\n                                    <a target=\"_blank\" rel=\"noopener noreferrer\"  href={'https://reactjs.org/'}>React</a> is a good library for creating large web\n                                    applications\n                                    that use the same code sections multiple times. React Native is a very similar\n                                    library\n                                    that is used for writing mobile apps. This page was built with React.\n                                </li>\n                                <li>\n                                    <a target=\"_blank\" rel=\"noopener noreferrer\"  href={\"https://angular.io/\"}>Angular</a> is similar to React. Also can be used\n                                    for\n                                    writing mobile apps.\n                                </li>\n                                <li>\n                                    <a target=\"_blank\" rel=\"noopener noreferrer\"  href={\"https://angular.io/\"}>Bootstrap</a> is a CSS library. It has lots of built in styles to make your pages look good. This page was styled with Bootstrap.\n                                </li>\n                            </ul>\n                    </SubSection>\n                    <SubSection label={\"Databases\"} badge={<Badge variant={\"success\"}>Back</Badge>}>\n                        <p>\n                            Databases are ways to store information across multiple user sessions. Every time you log\n                            into a\n                            website the website looks in their database and pulls your data to verify your password\n                            matches. Virtually every website is built on a database. Every time the user interacts they\n                            are either viewing, changing, or adding data to the database in one way or another.\n                            Understanding how databases work and how to work with them is essential to backend and full\n                            stack development.\n                        </p>\n                        <p>\n                            SQL is the language most often used for database manipulation. It is\n                            relatively simple and definitely worth learning. <a target=\"_blank\" rel=\"noopener noreferrer\" \n                            href={\"https://www.geeksforgeeks.org/structured-query-language/\"}>Geeks for Geeks</a> has a\n                            good tutorial. Most companies use some derivative of SQL.\n                        </p>\n                        <p>\n                            Universities teach whole classes just on databases. They require a lot of time to understand\n                            and use. Take your time choosing a database for a project because you'll be stuck with it\n                            all the way through. Here are some common database libraries.\n                            </p>\n                            <ul>\n                                <li>\n                                    <a target=\"_blank\" rel=\"noopener noreferrer\"  href={'https://www.mongodb.com/'}>MongoDB</a> Built on a document-based\n                                    structure. NOT a SQL framework.\n                                </li>\n                                <li>\n                                    <a target=\"_blank\" rel=\"noopener noreferrer\"  href={\"https://www.mysql.com/\"}>MySQL</a> Made by Oracle aimed at companies. Uses\n                                    SQL.\n                                </li>\n                                <li>\n                                    <a target=\"_blank\" rel=\"noopener noreferrer\"  href={\"https://www.postgresql.org/\"}>postgresql</a> Another SQL framework. It is\n                                    open\n                                    source and has a good SQL tutorial starting <a target=\"_blank\" rel=\"noopener noreferrer\" \n                                    href={\"https://www.postgresql.org/docs/12/tutorial-sql.html\"}>here</a>.\n                                </li>\n                            </ul>\n                    </SubSection>\n                    <SubSection label={\"REST APIs: Connecting the Database and the Frontend\"}\n                                badge={<span><Badge\n                                    variant={\"warning\"}>Full</Badge></span>}>\n                        <p>\n                            REST APIs also known as Representational State Transfer Application Programming Interface\n                            are used to access information from a website, database, or service.\n                            Every REST API has a set of endpoints. Each endpoint allows you to get an item or perform a\n                            task on one or multiple items. This website <a target=\"_blank\" rel=\"noopener noreferrer\" \n                            href={\"https://www.smashingmagazine.com/2018/01/understanding-using-rest-api/\"}>Smashing\n                            Magazine</a> has a good\n                            introductory tutorial. <a target=\"_blank\" rel=\"noopener noreferrer\"  href={\"https://developers.strava.com/docs/reference/\"}>Strava</a>,\n                            an athletic social media website, has very good documentation of their API. It is a good\n                            example to understand how an good API looks.\n                        </p>\n\n                    </SubSection>\n                    <SubSection label={\"Hosting your app\"} badge={<span><Badge variant={\"primary\"}>Front</Badge><Badge\n                                    variant={\"success\"}>Back</Badge></span>}>\n                        <p>\n                            Hosting is a whole problem in itself. If you are working on simple web pages <a target=\"_blank\" rel=\"noopener noreferrer\" \n                            href={\"https://github.com\"}>Github</a> offers free hosting for small pages. </p>\n                            <p>\n                                PC Magazine has a good <a href=\"https://www.pcmag.com/roundup/316108/the-best-web-hosting-services\">article</a> about places to host your website. I think most of them, for a small website, are between $2-5/month.\n                            </p>\n                            <p>Amazon, Google,\n                            and Microsoft all offer hosting services. They are free for small website.  I personally use <a target=\"_blank\" rel=\"noopener noreferrer\" \n                            href={\"https://cloud.google.com/appengine/\"}>Google Cloud Platform's App\n                            Engine</a> for hosting my web apps because it was the easiest to set up. Plus, their free\n                            quota\n                            is pretty big. <a target=\"_blank\" rel=\"noopener noreferrer\"  href={\"https://aws.amazon.com/lambda/\"}>Amazon Lambda</a> is also good\n                            services, but I haven't explored it fully. Microsoft has an <a target=\"_blank\" rel=\"noopener noreferrer\" \n                            href={\"https://azure.microsoft.com/en-us/services/app-service/\"}>app service</a> that I have\n                            used,\n                            but their platform user interface is not beginner friendly.\n                        </p>\n                    </SubSection>\n                </Section>\n            </TableOfContents>\n        </div>\n    )\n}\n","import IntroPython from './IntroPython';\n\nexport default IntroPython;","import React from 'react';\nimport {\n  Section,\n  SubSection,\n  TableOfContents,\n  Link,\n  C,\n  Code,\n  CodeSnip,\n  S,\n  List,\n  ListItem\n} from \"../compstore\";\nimport { CardDeck, Table } from 'react-bootstrap';\n\nexport default function IntroPython(props) {\n\n  return (\n    <div className='page-wrapper'>\n      <h1>\n        Welcome to Python\n      </h1>\n      <h3>By Alexander Wurts</h3>\n      <p>\n          If you have any questions, comments, or think there is an error please email me at\n          <b> alexwurtsfeedback@gmail.com</b>.\n      </p>\n      <h4>\n        A minimal guide to get you started.\n      </h4>\n      <TableOfContents>\n        <Section link=\"starting\" label=\"Getting Started\">\n          <p>\n            So you want to learn Python. You made a good choice. From my experience being a TA for undergrad CS\n            classes, Python is the language people pick up most easily. It is in part due to it's dynamic typing and simple syntax. It is great for beginners because it allows them to start working with concepts immediately and not worry about the small things. There are a few languages where a valid line of code creates a readable\n            English sentence. Python is one of them.\n          </p>\n          <p>\n            This tutorial goes over the Python concepts to start programming simple apps. At the bottom there is a list of projects ideas to try, and a follow up with libraries you can start exploring. You probably won't be able to use them before doing the Advanced Tutorial and a few projects, but it's good to see what's next.\n          </p>\n          <p>\n            Here are some tips to get through learning the basics.\n            <ul>\n              <li>\n                Trial and error is the best way to learn. If you aren't sure how a certain function or library works, try writing code that tests multiple ways of using it. Look at the output and see if it aligns with what you expected. \n              </li>\n              <li>\n                Start by modifying projects then move on to making your own. It's must easier to modify code than write it from scratch.\n              </li>\n              <li>\n                Google is your best friend, or it will be soon. Use it whenever you are stuck. \n              </li>\n              <li>\n                Learning to program takes time and persistence as well as plenty of breaks. If you go 8 hrs straight the last few will probably be less effective than the first few. \n              </li>\n              <li>\n                Learn your IDE's or text editor's keyboard shortcuts, it will save you a lot of time.\n              </li>\n              <li>\n                Take the time to learn simple command line operations. It will make your life much easier. Check <Link href=\"https://tutorial.djangogirls.org/en/intro_to_command_line/\">this tutorial</Link> out.\n              </li>\n              <li>\n                Projects are the best motivation. Try to create a project that aligns with one of your hobbies. \n              </li>\n              <li>\n                Take the time to understand every line of code in this tutorial. Go line by line and answer the question:  What does this line of code do?\n              </li>\n              <li>\n                Find a friend to learn with, it helps to have someone in the same situation as you. \n              </li>\n            </ul>\n          </p>\n\n        </Section>\n        <Section link='resources' label=\"Learning Resources\">\n          <p> Here are a list of the best places to find information on Python.</p>\n          <ul>\n            <li><Link href=\"https://docs.python.org/\">Python Documentation - Has the most up to date information, but can be overwhelming.</Link></li>\n            <li>\n              <Link href=\"https://stackoverflow.com/questions/tagged/python?tab=Votes\">\n                Stackoverflow's most up voted Python questions - Chances are your question is here\n              </Link>\n            </li>\n            <li>\n              <Link href=\"https://runestone.academy/runestone/books/published/thinkcspy/index.html\">How to Think Like a Computer Scientist: Interactive Addition - This is how I learned the basics. They do a phenomenal job and have interactive examples throughout.</Link>\n            </li>\n          </ul>\n        </Section>\n        <Section link=\"downloading\" label=\"How to download and run Python\">\n          <p>\n            This tutorial uses Python 3.6, but 3.7, and 3.8 will work too. Some programs use Python 2.7, but\n            a large majority use Python 3+. Python 2 cannot be run by Python3 and vice versa. For a beginner the differences are minimal. As of 2019 Python 3 is the better one to learn.\n          </p>\n          <p>\n            Click <Link href=\"https://www.Python.org/downloads/\">here</Link> to download Python. Download\n            the newest stable version. Once downloaded double click to launch it and step through the\n            installation wizard. <b>On Windows make sure to check the box to add Python to your PATH variable.</b> This is very important.\n          </p>\n          <p>\n            Once complete you should have access to the python3 command in your console. We will go through how to run a Python file later. \n          </p>\n        </Section>\n        <Section link=\"ides\" label=\"Integrated Developer Environments\">\n        <p>\n            IDEs are applications used for editing code. They improve over simple text editors by adding\n            shortcuts, templates, or other features that make writing code faster and easier. Try a few IDE's before you decide on one. They all have their pros and cons, so find one that works for you.\n          </p>\n          <p>\n            Here are a list of IDE's that I recommend. I personally use Visual Studio Code because it works\n            well with Python and Javascript, my two main languages. I will be using Visual Studio Code (VS Code) for the remainder of this tutorial. \n          </p>\n          <List newPage={true}>\n            <ListItem link=\"https://code.visualstudio.com/\">\n              Visual Studio Code - Great for beginners, because it's easy to get started.\n            </ListItem>\n            <ListItem link=\"https://www.jetbrains.com/pycharm/\">\n              PyCharm - A more complex but more powerful IDE. Easy to use with lots of features. Free and paid versions.\n            </ListItem>\n            <ListItem link=\"https://docs.python.org/3/library/idle.html\">\n              IDLE - Built-in Python editor. Good for simple scripts, but no advanced features.  \n            </ListItem>\n            <ListItem link=\"https://atom.io/\">\n              Atom - Simple text editor with plugins. <Link href=\"https://hackernoon.com/setting-up-a-python-development-environment-in-atom-466d7f48e297\">How to setup Python with Atom.</Link>\n            </ListItem>\n          </List>\n        </Section>\n        <Section link=\"howtorun\" label=\"How to run code\">\n          <p>\n            The easiest way to run Python code is through the command line. This is probably new for most readers, but don't worry it's not very difficult. Follow these steps to get started.\n          </p>\n          <h5>Part 1 Open VS Code</h5>\n          <ol>\n            <li>Create a folder, anywhere is fine</li>\n            <li>Open Visual Studio Code.</li> \n            <li>Click file -> open -> then navigate to the folder and open it.</li>\n          </ol>\n          <p>\n            A dark VS Code window should now be open. On the left side will be a sidebar showing all your files, you haven't made any yet, so there is nothing there. In the middle is where the code will show up. On the bottom is where a console will open eventually.\n          </p>\n          <h5>Part 2: Create a new Python file</h5>\n          <ol>\n            <li> In VS Code go to the menu bar at the top and click file, then new file to create a new file.</li> \n            <li>Then go to file again and click save to save the file.</li> \n            <li>\n              A box will popup asking you to name the file. Name it <C>main.py</C>. \"<C>.py</C>\" denotes a Python file.\n            </li>\n          </ol>\n          <h5>Part 3: Run the Python file </h5>\n          <ol>\n            <li>\n              Add: <C>print(\"Hello World\")</C> to the top of <C>main.py</C>.\n            </li>\n            <li>\n              On the top menu bar click view then console. This will open a console in the VS Code window.\n            </li>\n            <li>\n              Click on the console and type: python3 main.py \n            </li>\n            <li>\n              You should see: Hello World in the console.\n            </li>\n          </ol>\n          <p>\n            If you get an error, and it says python3 is not  a valid command, make sure Python has finished installing. For Windows make sure you checked \"Add to PATH\" during install or it won't work. The best way to fix the issue is to reinstall Python and click the box. If that doesn't work Google \"python3 won't run\" and look through the results. \n          </p>\n        </Section>\n        <Section link=\"syntax\" label=\"Syntax\">\n          <p>\n            Python syntax is minimal compared to Java or C. It uses colons and whitespace instead of curly brackets to define code blocks. Whitespace is very important in Python. All code sections need to be tabbed, or spaced properly in order for the code to run.\n          </p>\n          <p>\n            In this section we will go over the syntax that makes up Python, and how to read Python code.\n          </p>\n          <p>\n            In Python comments are denoted by <C>#</C>'s. Everything after a <C>#</C> on a line is not run, so they can be used to clarify what a line of code does.\n          </p>\n          <Code.Wrapper>\n            <Code.Title>Example Python Code</Code.Title>\n            Notice the colon after the line starting with <C>def</C> and the indentation of the code below. \n            <Code.Code>\n              <Code.Line>\n                def sum_list(a_list):\n              </Code.Line>\n              <Code.Line tabs={1}>\n                summation = 0\n              </Code.Line>\n              <Code.Line tabs={1}>\n                for val in a_list:\n              </Code.Line>\n              <Code.Line tabs={2}>\n                summation += val\n              </Code.Line>\n              <Code.Line tabs={1}>\n                return summation\n              </Code.Line>\n            </Code.Code>\n          </Code.Wrapper>\n\n          <TableOfContents fontSize={\"20px\"}>\n            <SubSection link=\"syntax-variables\" label=\"Variables\">\n              <p>\n                Variables are used to store values, much like algebra. In Python you don't need to explicity define what\n                type a variable is. A variable can hold any type of data. Once created you can perform\n                calculations with variables using operators.\n              </p>\n              <p>\n                All variables have a data type based on what data they store. Below is an example of how you would create each data type and what they are. \n              </p>\n              <Code.Wrapper>\n                <Code.Title>\n                  Variable Creation and Types\n                </Code.Title>\n                Variables are created or updated using the assignment operator <C>=</C>. The value on the right is saved to the variable on the left. \n                When choosing variable names the standard method in Python is underscores between words, such as <C>number_of_cats</C> for a variable that counts the number of cats.\n                <Code.Code>\n                  <Code.Line>\n                  # An <span\n                      style={{color: 'rgb(40, 116, 166)'}}>Integer</span> is any number with out\n                      decimals.\n                  </Code.Line>\n                  <Code.Line>\n                    number_of_cats = 10 \n                  </Code.Line>\n                </Code.Code>\n                <Code.Code>\n                  <Code.Line>\n                    # A <span\n                      style={{color: 'rgb(40, 116, 166)'}}>String</span> is a sequence of characters, surrounded by <C>\"\"</C> or <C>''</C>.\n                  </Code.Line>\n                  <Code.Line>\n                    user_name = \"dan456\" \n                  </Code.Line>\n                </Code.Code>\n                <Code.Code>\n                  <Code.Line>\n                    # A <span\n                    style={{color: 'rgb(40, 116, 166)'}}>Float</span> is any number with decimal\n                    places.\n                  </Code.Line>\n                  <Code.Line>\n                    user_avg_ratings = 1.88 \n                  </Code.Line>\n                </Code.Code>\n                <Code.Code>\n                  <Code.Line>\n                  # A <span\n                    style={{color: 'rgb(40, 116, 166)'}}>Boolean</span> is either True or False.\n                  </Code.Line>\n                  <Code.Line>\n                    has_visited = True \n                  </Code.Line>\n                </Code.Code>\n                <Code.Code>\n                  <Code.Line>\n                  # A <span\n                    style={{color: 'rgb(40, 116, 166)'}}>List</span> contains a sequence of values. <C>list1</C> is a list of integers.\n                  </Code.Line>\n                  <Code.Line>\n                    ratings = [0,1,2,3,4,5] \n                  </Code.Line>\n                </Code.Code>\n                <Code.Code>\n                  <Code.Line>\n                    # A <span\n                      style={{color: 'rgb(40, 116, 166)'}}>Dictionary</span> contains Key and Value pairs.\n                  </Code.Line>\n                  <Code.Line>\n                    food = {`{`}\"Apple\": \"Fruit\", \"Corn\": \"Vegetable\"} \n                  </Code.Line>\n                </Code.Code>\n              </Code.Wrapper>\n            </SubSection>\n            <SubSection link=\"syntax-operators\" label=\"Operators\">\n              <p>\n                Operators are used to combine and manipulate variables. Python has the bitwise operators: <C>|, &, ~, ^, >>, {`<<`}</C> which operate on the bits themselves, but they are out of the scope of this tutorial. Here are the four main types you need to know.\n              </p>\n              Math operators behave like the standard math operations.\n              <ul>\n                <li><C>+</C> - Addition. <C>{`5 + 5`}</C> returns <C>10</C></li>\n                <li><C>-</C> - Subtraction. <C>{`5 - 3`}</C> returns <C>2</C></li>\n                <li><C>/</C> - Division. <C>{`10 / 5`}</C> returns <C>2</C></li>\n                <li><C>//</C> - Integer Division. <C>{`10 / 3`}</C> returns <C>3</C>. It divides 10 by 3\n                  then truncates the decimal places leaving <C>3</C>.\n                </li>\n                <li><C>*</C> - Multiplication. <C>{`10 * 2.5`}</C> returns <C>25</C>. All operators work\n                  for integers and floats.\n                </li>\n                <li><C>%</C> - Modulus. The remainder operator. Takes the remainder after\n                  division. <C>{`12 % 5`}</C> returns <C>2</C> because 12 / 5 = 2 remainder <C>2</C>.\n                </li>\n              </ul>\n              Comparison operators compare two variables and return a boolean.\n              <ul>\n                <li><C>{`<`}</C> - less than. <C>{`3 < 5`}</C> returns <C>True</C></li>\n                <li><C>{`>`}</C> - greater\n                  than. <C>{`7 > 5`}</C> returns <C>True</C>. <C>{`5 > 5`}</C> returns <C>False</C>\n                </li>\n                <li><C>{`>=`}</C> - greater than or equal. <C>{`5 >= 5`}</C> returns <C>True</C></li>\n                <li><C>{`<=`}</C> - less than or equal. <C>{`5 <= 6`}</C> returns <C>True</C></li>\n                <li><C>{`==`}</C> - equals. <C>{`3 == 5`}</C> returns <C>False</C>.</li>\n\n              </ul>\n              Boolean Operators combine one or two booleans and return a boolean.\n              <ul>\n                <li><C>{`not`}</C> - not. Changes a boolean to the opposite\n                  state. <C>{`not True`}</C> returns <C>False</C></li>\n                <li><C>{`and`}</C> - and. if both are True, returns\n                  True. <C>{`True and True`}</C> returns <C>True</C></li>\n                <li><C>{`or`}</C> - or. if either are True, returns\n                  True. <C>{`True or False`}</C> returns <C>True</C></li>\n              </ul>\n              Updating operators\n              <ul>\n                <li><C>{'+='}</C> - add and update. Adds the value on the right then updates. <C>apples\n                  += 1</C> increases apples by 1.\n                </li>\n                <li><C>{'-='}</C> - subtract and update. Subtracts the value on the right then updates. <C>apples\n                  -= 1</C> decreases apples by 1.\n                </li>\n                <li><C>{'/='}</C> - divide and update. Divides by the value on the right then updates. <C>apples\n                  /= 5</C> divides apples by 5.\n                </li>\n                <li><C>{'*='}</C> - multiply and update. Multiplies by the value on the right then\n                  updates. <C>apples *= 1</C> multiplies apples by 1.\n                </li>\n                <li><C>{'%='}</C> - applies modulus and updates. <C>apples %= 10</C> finds the remainder with respect to 10 and saves it to <C>apples</C>.\n                </li>\n              </ul>\n\n            </SubSection>\n            <SubSection link={'syntax-functions'} label={\"Functions\"}>\n              <p>\n                Functions are used to perform multiple operations on variables. They are also used to group sections of code together that are repeated often. A example function <C>print(text)</C> prints text to the console. Every function has input values, called parameters or arguments, and most\n                have\n                output values, called return values. If no return value is specified the function returns <C>None</C>. <C>None</C> is a special type in Python.\n              </p>\n              <p>\n                Arguments are values passed to the function, so it can perform a calculation or task. Functions can have multiple arguments. Once the function is complete it returns a value. \n              </p>\n              <Code.Wrapper>\n                <Code.Title>\n                  Defining a Function\n                </Code.Title>\n                All functions start with <C>def</C> followed by the function name and then parentheses with arguments inside.\n                <Code.Code>\n                  <Code.Line>\n                    def add_a_cat(number_of_cats):\n                  </Code.Line>\n                  <Code.Line tabs={1}>\n                    result = number_of_cats + 1\n                  </Code.Line>\n                  <Code.Line tabs={1}>\n                    return result\n                  </Code.Line>\n                </Code.Code>\n                <Code.Description>\n                  The function is named <C>add_a_cat</C>. It takes an argument, number_of_cats, adds 1 to the number and saves it in result, then returns result.\n                  This function assumes the input value is a number.\n                </Code.Description>\n              </Code.Wrapper>\n              <Code.Wrapper>\n                <Code.Title>\n                  Calling a Function\n                </Code.Title>\n                Running a function is referred to as calling a function. If I called <C>add_a_cat</C> it means\n                I am running the function by passing in a variable. The input variable name does not need to match the argument name. They are linked based on their position. These types of parameters are known as positional arguments.\n                <Code.Code>\n                  <Code.Line>\n                    cats = 10\n                  </Code.Line>\n                  <Code.Line>\n                  number_of_cats = add_a_cat(cats)\n                  </Code.Line>\n                  <Code.Line>\n                    print(number_of_cats)\n                  </Code.Line>\n                </Code.Code>\n                <Code.Description>\n                  This code calls the function <C>add_a_cat</C> with the parameter <C>cats</C>. When the\n                  function is run the <C>number_of_cats</C> parameter is assigned the value of <C>cats</C>. The\n                  function adds 1 to <C>number_of_cats</C> then returns it. The output in the console in this case is\n                  <C> 11</C>.\n                </Code.Description>\n              </Code.Wrapper>\n              <Code.Wrapper>\n                <Code.Title>\n                  Built-in functions\n                </Code.Title>\n                Built-in functions are functions defined in the standard Python library. They are accessible without any imports. Below are popular ones, and <Link href=\"https://docs.Python.org/3/library/functions.html\">here</Link> are all of them\n                <CardDeck>\n                  <CodeSnip.Snip title=\"print(value)\" subtitle=\"Print\">\n                    Prints the value to the console followed by a return character.  To print multiple values on the same line, separate them by commas like <C>print(var1, var2, var3)</C>. This will  automatically add spaces  between them.\n                    <CodeSnip.Example>\n                      print(\"Hello World\")\n                      <br/>\n                      print(\"Hello\", \"World\")\n                    </CodeSnip.Example>\n                    <CodeSnip.Result>\n                      Prints <C>Hello World</C> to the console. Both print the same thing.\n                    </CodeSnip.Result>\n                  </CodeSnip.Snip>\n                </CardDeck>\n                <CardDeck>\n                  <CodeSnip.Snip title=\"len(item)\" subtitle=\"Length\">\n                    Returns length of the item. Most common use is to find the length of a list.\n                    <CodeSnip.Example>\n                      len(list1)\n                    </CodeSnip.Example>\n                    <CodeSnip.Result>\n                      The code would return an integer with the length of the list.\n                    </CodeSnip.Result>\n                  </CodeSnip.Snip>\n                  <CodeSnip.Snip title=\"min(item1, ...)\" subtitle=\"Minimum\">\n                    Returns the minimum of a list, or min of all arguments.\n                    <CodeSnip.Example>\n                      min(var1, var2, var3)\n                      <br/>\n                      min(list1)\n                    </CodeSnip.Example>\n                    <CodeSnip.Result>\n                      Both are valid ways to call min. Example one will return either var1, var2, or var3 based on which is smallest. Example 2 will return the smallest value in list1.\n                    </CodeSnip.Result>\n                  </CodeSnip.Snip>\n                  <CodeSnip.Snip title=\"max(item1, ...)\" subtitle=\"Maximum\">\n                    Returns the maximum of a list, or max of all arguments.\n                    <CodeSnip.Example>\n                      max(var1, var2, var3)\n                      <br/>\n                      max(list1)\n                    </CodeSnip.Example>\n                    <CodeSnip.Result>\n                      Example one will return either var1, var2, or var3 based on which is largest. Example 2 will return the largest value in list1.\n                    </CodeSnip.Result>\n                  </CodeSnip.Snip>\n                </CardDeck>\n                <CardDeck>\n                  <CodeSnip.Snip title=\"sum(list)\" subtitle=\"Summation\">\n                     Adds up all values in list. Returns a number or float for the sum.\n                    <CodeSnip.Example>\n                      sum([1,2,3,4]) \n                    </CodeSnip.Example>\n                    <CodeSnip.Result>\n                      Returns 10,\n                    </CodeSnip.Result>\n                  </CodeSnip.Snip>\n                  <CodeSnip.Snip title=\"int(value)\" subtitle=\"To Integer\">\n                    Turns the input value into an integer. Takes in either a float, a string, or another integer. If the result number has decimal places, it removes them. Most often used with strings.\n                    <CodeSnip.Example>\n                      int(10.05) # equals 10\n                      <br/>\n                      int(\"23\") # equals 23\n                    </CodeSnip.Example>\n                    <CodeSnip.Result>\n                      Example 1 returns 10. Example 2 returns 23.\n                    </CodeSnip.Result>\n\n                  </CodeSnip.Snip>\n                  <CodeSnip.Snip title=\"float(value)\" subtitle=\"To Float\">\n                    Turns the input value into a float. Takes in a string, integer, or other floats. Most often used with strings.\n                    <CodeSnip.Example>\n                      int(10) # equals 10.0\n                      <br/>\n                      int(\"2.5\") # equals 2.5\n                    </CodeSnip.Example>\n                    <CodeSnip.Result>\n                      Example 1 returns 10.0. Example 2 returns 2.5.\n                    </CodeSnip.Result>\n                  </CodeSnip.Snip>\n                </CardDeck>\n                <CardDeck>\n                <CodeSnip.Snip title=\"sorted(list)\" subtitle=\"Sorting\">\n                  Sorts list and returns the sorted list. The list is sorted in ascending order (smallest to largest). <C>sorted</C> has an optional argument <C>reverse</C>, which when set to True sorts in descending order (largest to smallest).\n                  <CodeSnip.Example>\n                    result = sorted([1,3,4,2,0])\n                  </CodeSnip.Example>\n                  <CodeSnip.Result>\n                    <C>result</C> now equals the array passed in, sorted in ascending order:\n                    <C> [0,1,2,3,4]</C>\n                  </CodeSnip.Result>\n                </CodeSnip.Snip>\n               \n                </CardDeck> \n                <CardDeck>\n                  <CodeSnip.Snip title={\"input(string)\"} subtitle={\"Input Function\"}>\n                    Takes in a string, displays the string to the user in the console and waits for the user to type something in the console. Once the user finishes typing and presses return, it reads the input and returns the value as a <b>string</b>. If you want to input numbers make sure to use <C>float(val)</C>, or <C>int(val)</C> to process the input to numbers.\n                    <CodeSnip.Example>\n                      user_input = input(\"Enter your name:\")\n                    </CodeSnip.Example>\n                    <CodeSnip.Result>\n                      <C>user_input</C> is now equal to what the user typed in the console.\n                    </CodeSnip.Result>\n                  </CodeSnip.Snip>\n                </CardDeck>\n                <CardDeck>\n          \n                <CodeSnip.Snip title=\"range(start, stop, diff)\" subtitle=\"Range Function\">\n                  Return all integers between a starting point, and an ending point. Each number is diff numbers apart. The starting point is included in the range, and the end point is not. If it only has one parameter, that is the stop value. If it has two they are the start, and stop. If it has three it is start, stop, and diff.\n                  <CodeSnip.Example>\n                    range(4) # 0,1,2,3 - range(stop)<br/>\n                    range(10,20) # 10-19 - range(start, stop)<br/>\n                    range(0,10,2) # 0,2,4,6,8 - range(start, stop, diff)<br/>\n                  </CodeSnip.Example>\n \n                </CodeSnip.Snip>\n                </CardDeck>\n              </Code.Wrapper>\n              <Code.Wrapper>\n                <Code.Title>\n                  Optional Arguments\n                </Code.Title>\n                  Optional arguments are used when a function has default values that don't need to be set every time the function runs. They can also be used to name the arguments to clarify the arguments. Optional arguments always come after positional arguments.\n                <Code.Code>\n                  <Code.Line>\n                    def equation(x, m=2, b=10):\n                  </Code.Line>\n                  <Code.Line tabs={1}>\n                    return x * m + b\n                  </Code.Line>\n                  <Code.Line>\n                    <Code.Comment># When run the arguments will be equal to the\n                      values on the right.</Code.Comment>\n                  </Code.Line>\n                  <Code.Line>\n                    equation(10) <Code.Comment># x=10, m=2, b=10</Code.Comment>\n                  </Code.Line>\n                  <Code.Line>\n                    equation(10, 3, 8) <Code.Comment># x=10, m=3, b=8</Code.Comment>\n                  </Code.Line>\n                  <Code.Line>\n                    equation(5, m=5, b=11) <Code.Comment>\n                    # x=5, m=5, b=11\n                  </Code.Comment>\n                  </Code.Line>\n                </Code.Code>\n                <Code.Description>\n                  The function equation has an <C>x</C>, <C>m</C> and <C>b</C> argument. <C>m</C>,\n                  and <C>b</C> are optional. When you call the function and do not set them they are\n                  by default 2 and 10 respectively. <C>x</C> must be specified everytime the function\n                  is called. Below the function definition are valid ways to call the function.\n                </Code.Description>\n              </Code.Wrapper>\n            </SubSection>\n            <SubSection link=\"syntax-lists\" label=\"Lists\">\n              <p>\n                Lists are a way of holding data in a sequence, where order matters. It is a type of data structure. Lists can hold any type of data. List are used in all different types of programs to hold data for grocery receipts up to neural network data, and more.\n              </p>\n\n              <Code.Wrapper>\n                <Code.Title>\n                  Creating a List\n                </Code.Title>\n                Lists are defined by a set of square brackets <C>[]</C>, one at the start and one at the end. Items are separated by commas.\n                <Code.Code>\n                <Code.Line>\n                  <Code.Comment># Create a list with values 0,1,2,3,4,5</Code.Comment>\n                </Code.Line>\n                <Code.Line>\n                  list1 = [0,1,2,3,4,5]\n                </Code.Line>\n                <br/>\n               <Code.Line>\n               <Code.Comment># Lists can hold variables of different types, </Code.Comment>\n               </Code.Line>\n               <Code.Line>\n               <Code.Comment># but this is not recommended because it is difficult to process.</Code.Comment>\n               </Code.Line>\n                <Code.Line>\n                list2 = [1.5, \"3.6\", 1, \"apples\"]  \n                </Code.Line>\n                <br/>\n                <Code.Line>\n                  empty_list = [] <Code.Comment># If nothing is inside the brackets, the list is empty.</Code.Comment>\n                </Code.Line>\n                </Code.Code>\n                <Code.Description>\n                  Both examples create a list. The first creates a list with numbers 0,1,2,3,4,5. The final list is empty.\n                </Code.Description>\n              </Code.Wrapper>\n              \n              <Code.Wrapper>\n                <Code.Title>\n                  Adding to a list\n                </Code.Title>\n                Values are added to the end of a list using the <C>append</C> method (function). The <C>.</C> betweeh list1 and append show that list1 is calling append.\n                <Code.Code>\n                  <Code.Line>\n                    <Code.Comment># Create an empty list</Code.Comment>\n                  </Code.Line>\n                  <Code.Line>\n                    list1 = []\n                  </Code.Line>\n                  <Code.Line>\n                    list1.append(1)\n                  </Code.Line>\n                </Code.Code>\n                <Code.Description>\n                  <C>list1</C> was created as an empty list, then the number 1 was added to the end. After the <C>append</C> command the list now looks like this: <C>[1]</C>.\n                </Code.Description>\n              </Code.Wrapper>\n              <Code.Wrapper>\n                <Code.Title>\n                  Access an item in a list\n                </Code.Title>\n                The list name followed by square brackets and a number inside is used to access values in a list. Indexes in the list start at 0 and go up. To get the first item in the list use index 0. You can index into list using integer as a variable or a hard coded number. A hard coded number is when you place a number directly in your code. The example below uses two hard coded numbers, 0, and 2, to index into the array. \n                <Code.Code>\n                  <Code.Line>\n                    letters = [\"a\", \"b\", \"c\", \"d\", \"e\"]\n                  </Code.Line>\n                  <Code.Line>\n                    <Code.Comment># Indices:  0,   1,   2,   3,   4 </Code.Comment>\n                  </Code.Line>\n                  <Code.Line>\n                    <Code.Comment># Saves the character a at the 0th index in <C>letters</C> to <C>letter_a</C></Code.Comment>\n                    </Code.Line>\n                  <Code.Line>\n                    letter_a = letters[0] \n                  </Code.Line>\n                  <Code.Line>\n                    char_c = letters[2]\n                  </Code.Line>\n                </Code.Code>\n                <Code.Description>\n                  Accesses the 0th and 2nd index of the letters list. After the code runs, <C>letter_a</C> equals \"a\" and <C>char_c</C> equals \"c\".\n                </Code.Description>\n              </Code.Wrapper>\n              <Code.Title>\n                Built-in list methods\n              </Code.Title>\n              These are the most used methods on lists. <Link href=\"https://docs.Python.org/3/tutorial/datastructures.html\">Here</Link> are all of them.\n              <CardDeck>\n                  <CodeSnip.Snip title=\"append(value)\" subtitle=\"Append Item\">\n                    <C>append</C> is used to add an item to the end of a list.\n                    <CodeSnip.Example>\n                      list1 = [10,20,30,40]\n                      <br/>\n                      list1.append(10)\n                    </CodeSnip.Example>\n                    <CodeSnip.Result>\n                      Adds <C>10</C> to the end of <C>list1</C>. <C>list1</C> now equals: <C>[10,20,30,40,10]</C>\n                    </CodeSnip.Result>\n                  </CodeSnip.Snip>\n                  <CodeSnip.Snip title=\"index(value)\" subtitle=\"Find Item Index\">\n                    <C>index</C> is used to find the index of an item in a list. It takes in a value, and returns the index of that value if found. If it is not found it returns -1.\n                    <CodeSnip.Example>\n                    list1 = [10,20,30,40]\n                    <br/>\n                    list1.index(40)\n                    </CodeSnip.Example>\n                    <CodeSnip.Result>\n                      <C>list1.index(40)</C> return 3 because that is the index of 40 in <C>list1</C>.\n                    </CodeSnip.Result>\n                  </CodeSnip.Snip>\n              </CardDeck>\n              <CardDeck>\n                <CodeSnip.Snip title=\"sort()\" subtitle=\"Sort list\">\n                  <C>sort</C> sorts the values in the list, in ascending order. Ascending means smallest first, and largest last. Descending is opposite, largest first, and smallest last. Sort has an optional argument <C>reverse</C>, which when set to true sorted in descending order. Works the same as <C>sorted</C> except it updates the list directly instead of returning a new sorted copy.\n                  <CodeSnip.Example>\n                    list1 = [40,20,10,30]\n                    <br/>\n                    list1.sort()\n                  </CodeSnip.Example>\n                  <CodeSnip.Result>\n                    After the code is run, <C>list1</C> now equals <C>[10,20,30,40]</C>\n                  </CodeSnip.Result>\n                </CodeSnip.Snip>\n              </CardDeck>\n              <CardDeck>\n                <CodeSnip.Snip title=\"clear()\" subtitle=\"Removes all items from list\">\n                  <C>clear</C> removes all items from the list.\n                  <CodeSnip.Example>\n                    list1 = [10,20,30,40]\n                    <br/>\n                    list1.clear()\n                  </CodeSnip.Example>\n                  <CodeSnip.Result>\n                    <C>list1.clear()</C> removes all items from the list. After the code is run <C>list1</C> now equals <C>[]</C>.\n                  </CodeSnip.Result>\n                </CodeSnip.Snip>\n      \n                <CodeSnip.Snip title=\"remove(index)\" subtitle=\"Remove one item from the list\">\n                  <C>remove</C> deletes one item from the list based on the index argument.\n                  <CodeSnip.Example>\n                    list1 = [10,20,30,40]\n                    <br/>\n                    list1.remove(0)\n                  </CodeSnip.Example>\n                  <CodeSnip.Result>\n                    <C>list1.remove(0)</C> deletes the item at index 0, in this case 10 from the list. After the code is run <C>list1</C> now equals <C>[20,30,40]</C>.\n                  </CodeSnip.Result>\n                </CodeSnip.Snip>\n              </CardDeck>\n            </SubSection>\n            <SubSection link=\"syntax-dicts\" label=\"Dictionaries\">\n              <p>\n                Dictionaries are used to link two items together using key and value pairs. If you wanted to count the occurrences of letters in a sentence, a dictionary is a good data structure to use. Dictionaries are also referred to as HashMaps in Java.\n              </p>\n              <p>\n                Dictionaries in Python are created using curly brackets. <C>{`{}`}</C> defines an empty dictionary. Key and value pairs can be added. Keys cannot be repeated, but values can be repeated. Look at the code example below. The key and value can be different data types. Any data type can be a key, and the and data type can be a value. \n              </p>\n              <Code.Wrapper>\n                <Code.Title>\n                  Creating a dict(tionary)\n                </Code.Title>\n                <Code.Code>\n                  <Code.Line>\n                    dict1 = {`{`}<S color=\"rgb(40, 116, 166)\">\"apple\"</S>: <S color=\"rgb(230, 126, 34)\">\"fruit\"</S>, <S color=\"rgb(40, 116, 166)\">\"broccoli\"</S>: <S color=\"rgb(230, 126, 34)\">\"vegetable\"</S>}\n                  </Code.Line>\n                  <Code.Line>\n                    dict2 = {`{}`} <Code.Comment># Empty Dictionary</Code.Comment>\n                  </Code.Line>\n                </Code.Code>\n                <Code.Description>\n                  <C>dict1</C> contains two pairs. One connects the string <C>\"apple\"</C> to <C>\"fruit\"</C>, and the other connects <C>\"broccoli\"</C> to <C>\"vegetable\"</C>. The blue strings are the <S color=\"rgb(40, 116, 166)\">Keys</S>, the orange strings are the corresponding <S color=\"rgb(230, 126, 34)\">Values</S>.\n                </Code.Description>\n              </Code.Wrapper>\n              <Code.Wrapper>\n                <Code.Title>\n                  Adding a pair to a dict\n                </Code.Title>\n                Values are added to a dictionary using square brackets. The value in the bracket is the key, the value is on the right.\n                <Code.Code>\n                <Code.Line>\n                    <Code.Comment># Create empty dictionary</Code.Comment>\n                  </Code.Line>\n                  <Code.Line>\n                    dict1 = {`{}`}\n                  </Code.Line>\n                  <Code.Line>\n                    dict1['apple'] = \"fruit\"\n                  </Code.Line>\n                  <Code.Line>\n                    dict1[10] = \"Index 10\"\n                  </Code.Line>\n                </Code.Code>\n                <Code.Description>\n                  Line 1 creates an empty dictionary, <C>dict1</C> . Then the key <C>\"apple\"</C> is added with the value <C>\"fruit\"</C>. After the above code runs, <C>dict1</C> will have two key pair values, one for apple, one for 10. \n                </Code.Description>\n              </Code.Wrapper>\n              <Code.Wrapper>\n                <Code.Title>\n                  Accessing values in a dict\n                </Code.Title>\n                To access a value in a dict you use the same syntax as adding a value.\n                <Code.Code>\n                  <Code.Line>\n                    <Code.Comment># Create test dictionary</Code.Comment>\n                  </Code.Line>\n                  <Code.Line>\n                  dict1 = {`{`}<S color=\"rgb(40, 116, 166)\">\"apple\"</S>: <S color=\"rgb(230, 126, 34)\">\"fruit\"</S>, <S color=\"rgb(40, 116, 166)\">\"broccoli\"</S>: <S color=\"rgb(230, 126, 34)\">\"vegetable\"</S>}\n                  </Code.Line>\n                  <Code.Line>\n                    apple_val = dict1['apple']\n                  </Code.Line>\n                </Code.Code>\n                <Code.Description>\n                  <C>dict1</C> is defined with two key pair values. The value for <C>'apple'</C> is retrieved and saved to the variable <C>apple_val</C>. <C>apple_val</C> will equal <C>\"fruit\"</C> after the code runs. \n                </Code.Description>\n              </Code.Wrapper>\n              <Code.Wrapper>\n                <Code.Title>\n                  Check if a key already exists \n                </Code.Title>\n                When creating a dictionary you often want to know whether a key already exists. The <C>in</C> keyword does that for you. It only checks the keys, not the values.\n                <Code.Code>\n                  <Code.Line>\n                    <Code.Comment># Create test dictionary</Code.Comment>\n                  </Code.Line>\n                  <Code.Line>\n                    dict1 = {`{\"apple\": \"fruit\", \"broccoli\": \"vegetable\"}`}\n                  </Code.Line>\n                  <Code.Line>\n                    has_apple = \"apple\" in dict1\n                  </Code.Line>\n                </Code.Code>\n                <Code.Description>\n                  <C>has_apple</C> is now <C>True</C> because the key <C>\"apple\"</C> is in the dictionary, dict1. \n                </Code.Description>\n              </Code.Wrapper>\n              <Code.Wrapper>\n                <Code.Title>\n                  Delete a pair from a dictionary\n                </Code.Title>\n                In Python the <C>del</C> keyword is used to delete items in both lists and dictionaries. \n                <Code.Code>\n                  <Code.Line>\n                    <Code.Comment># Create test dictionary</Code.Comment>\n                  </Code.Line>\n                  <Code.Line>\n                    dict1 = {`{\"apple\": \"fruit\", \"broccoli\": \"vegetable\"}`}\n                  </Code.Line>\n                  <Code.Line>\n                    del dict1[\"apple\"]\n                  </Code.Line>\n                </Code.Code>\n                <Code.Description>\n                  After the code runs dict1 now equals: {`{\"broccoli\": \"vegetable\"}`}\n                </Code.Description>\n              </Code.Wrapper>\n              <Code.Title>\n                Built-in dict methods\n              </Code.Title>\n                More examples and methods can be found in the <Link href=\"https://docs.Python.org/3/library/stdtypes.html#dict\">Python documentation</Link> for dicts.\n              <CardDeck>\n                <CodeSnip.Snip title=\"values()\" subtitle=\"Values List\">\n                  Returns the list of values in the dictionary.\n                  <CodeSnip.Example>\n                    dict1 = {`{`}10: \"20\", 20: \"30\"}\n                    <br/>\n                    values = dict1.values()\n                  </CodeSnip.Example>\n                  <CodeSnip.Result>\n                    After the code runs <C>values</C> now is a list containing \"20\", and \"30\": <C>[\"20\", \"30\"]</C>\n                  </CodeSnip.Result>\n                </CodeSnip.Snip>\n                <CodeSnip.Snip title=\"keys()\" subtitle=\"Keys List\">\n                  Returns the list of values in the dictionary. Often used to iterate through all keys in a dictionary.\n                  <CodeSnip.Example>\n                    dict1 = {`{`}10: \"20\", 20: \"30\"}\n                    <br/>\n                    keys = dict1.keys()\n                  </CodeSnip.Example>\n                  <CodeSnip.Result>\n                    After the code runs <C>values</C> now is a list containing 10, and 20: <C>[20, 30]</C>\n                  </CodeSnip.Result>\n                </CodeSnip.Snip>\n              </CardDeck>\n            </SubSection>\n            <SubSection link=\"syntax-forloops\" label=\"For Loops\">\n              <p>\n                Loops are sections of code that are repeated. If you had a grocery store list and wanted\n                to\n                check whether milk was on the list, a loop could do that. There are two types of loops,\n                for\n                loops, and while loops. For loops are generally used for iterating through lists. While\n                loops are used when the finish condition is not known at the start. We will focus on for loops for now.\n              </p>\n              <p>\n                Python has two main ways of writing for loops. One iterates directly over a list, and the other iterates\n                over a range iterator. The first type, direct iteration, is used when the index of an item is not needed. The second type iterates using the Range function.\n                \n              </p>\n              <Code.Wrapper>\n                <Code.Title>\n                  For Loop: Direct Iteration\n                </Code.Title>\n                <Code.Code>\n                  <Code.Line>\n                    numbers = [1,2,4,5,6]\n                  </Code.Line>\n                  <Code.Line>\n                    summation = 0\n                  </Code.Line>\n                  <Code.Line>\n                    for <span style={{color: \"#922B21\"}}>val</span> in <span\n                    style={{color: '#0E6251'}}>numbers</span>:\n                  </Code.Line>\n                  <Code.Line tabs={1}>\n                    sum += <span style={{color: '#922B21'}}>val</span>\n                  </Code.Line>\n                </Code.Code>\n                <Code.Description>\n                  The above code is used to find the sum of the <C>numbers</C>. The for loop\n                  iterates over <C>array1</C>. The first time the loop runs <S\n                  color='#922B21'>val</S> is set to 0. <S color='#922B21'>val</S> is added to sum, and\n                  <C> sum</C> is updated to 1. On the second iteration the <S color='#922B21'>val</S> is <C>sum</C> to 2, and <C>sum</C> is updated to 3. After the final iteration <C>sum</C> will be 18.\n                </Code.Description>\n              </Code.Wrapper>\n              <Code.Wrapper>\n                <Code.Title>\n                  For Loop: Indices Iteration\n                </Code.Title>\n                This for loop uses two built-in functions, <C>range</C>, and <C>len</C>. <C>len</C> is\n                used to calculate the length of numbers. <C>range</C> generates a sequence of values. \n                <Code.Code>\n                  <Code.Line>\n                  numbers = [1,2,4,5,6]\n                  </Code.Line>\n                  <Code.Line>\n                    summation = 0\n                  </Code.Line>\n                  <Code.Line>\n                    for <span style={{color: \"#E67E22\"}}>i</span> in <span\n                    style={{color: '#0E6251'}}>range(<S color=\"#123456\">len(<S color=\"#922B21\">numbers</S>)</S>)</span>:\n                  </Code.Line>\n                  <Code.Line tabs={1}>\n                    sum += <span style={{color: '#922B21'}}>numbers[<S color=\"#E67E22\">i</S>]</span>\n                  </Code.Line>\n                </Code.Code>\n                <Code.Description>\n                  In this <C>for loop</C>, <S color=\"#922B21\">i</S> is not set to the array values. <S\n                  color=\"#922B21\">i</S> is set to each index from 0 until the length of numbers,\n                  denoted <C><S color=\"#123456\">len(<S color=\"#922B21\">numbers</S>)</S></C>. The loop will run 6 times and <S\n                  color=\"#922B21\">i</S> will be 0-5.\n                </Code.Description>\n              </Code.Wrapper>\n            </SubSection>\n            <SubSection link=\"ifstatement\" label=\"if statements\">\n            <p><C>if</C> statements control the program flow. Based on variables you can decide whether to run sections of code or not. \n            </p> \n            <p>\n              There are multiple parts to an if statement: \n              <C> if</C>, <C>else</C>, and <C>elif</C>. \n              <C> if</C> is always at the start. After the <C>if</C> keyword is a boolean expression. If the boolean expression is True the code within the section is run. If False, the code doesn't run. <C>elif</C> can be used after the first <C>if</C>. It will run when all of the conditionals above are False. If none of the <C>if</C> or <C>elif</C> statements are True above, the <C>else</C> code will run. It can be used as a default if nothing is True. \n            </p>\n            <Code.Wrapper>\n              <Code.Title>\n                Example if statement\n              </Code.Title>\n              <Code.Code>\n                <Code.Line>\n                  money = 1000\n                </Code.Line>\n                <Code.Line>\n                <S color=\"rgb(50, 116, 166)\">if</S> <S color=\"#0E6251\">money > 1000000000</S>: <Code.Comment># You can use <C>1e9</C> for 1 billion</Code.Comment>\n                </Code.Line>\n                <Code.Line tabs={1}>\n                  print(\"You're a Billionaire!\")\n                </Code.Line>\n                <Code.Line>\n                <S color=\"rgb(50, 116, 166)\">elif</S> <S color=\"#0E6251\">money > 1000000</S>:\n                </Code.Line> \n                <Code.Line tabs={1}> \n                  print(\"You're a Millionaire\")\n                </Code.Line>\n                <Code.Line>\n                <S color=\"rgb(50, 116, 166)\">else:</S>\n                </Code.Line>\n                <Code.Line tabs={1}>\n                  print(\"You're not a Millionaire or a Billionaire\")\n                </Code.Line>\n              </Code.Code>\n              <Code.Result>\n                This example prints out whether you're a millionaire or not, based on the value of the money variable. The dark blue is the syntax for the <C>if</C> statement. The green is for the boolean expressions. If <C>money</C> was 1000, it would print \"You're not a Millionaire or a Billionaire\". If <C>money</C> was greater than 1 Billion it would print \"You're a Billionaire!\".\n              </Code.Result>\n            </Code.Wrapper>\n            </SubSection>\n          </TableOfContents>\n        </Section>\n        <Section link=\"commandline\" label=\"Practice App 1: Command Line Calculator\">\n          <p>\n            Command line programs are very common in Python.  Scripts are small programs, such as command line programs, that do a set of tasks. Scripts are most often used to save time doing repetitive tasks. Python is good for writing scripts, because it doesn't require a class framework like Java, and it can be run without compiling for faster iterations. It also has a very simple set of commands for reading and writing files. \n          </p>\n          {/* <p>\n            When I was a TA for an undergrad class we downloaded all the homework files for grading in a\n            certain format. For each homework assigment we needed to make an excel file with the individuals\n            name and email. I didn't want to spend 20 minutes every assignment individually\n            making and filling in the excel documents, so I made a 40 line Python script that did everything\n            for me. I gave it a folder of homework assignments, and it did the rest. It reduced a 20 minute task down to 1 second.  \n          </p> */}\n          <p>\n            Start out by downloading the <Link href={\"/files/commandline.py\"} download >template file</Link>.\n            The template file contains boiler plate code to get you started. Move the file into the folder you created earlier to run the Hello World program. Then double click the file inside VS Code to edit.\n          </p>\n          <p>\n            The Calculator will take in two numbers and an operator from the user and calculate the output. In order to take in user input we use the <C>input</C> function.\n          </p>\n          <SubSection>\n            <Code.Wrapper>\n              <Code.Title>\n                Part 1: Read User Input\n              </Code.Title>\n              We start by downloading the template and adding three lines of code. Each code uses <C>input</C> to retrieve one piece of information from the user. Then we display the data in the console using <C>print</C> to verify they were entered properly.\n              <Code.Code>\n                <Code.Line >\n                  number1 = input(\"Enter Number 1: \")\n                </Code.Line>\n                <Code.Line >\n                  number2 = input(\"Enter Number 2: \")\n                </Code.Line>\n                <Code.Line>\n                  operator = input(\"Enter Operator (+, -, /, *): \")\n                </Code.Line>\n                <Code.Line >\n                  print(number1, number2, operator)\n                </Code.Line>\n                \n              </Code.Code>\n              <Code.Description>\n                Enter the above lines of code into your template file. Make sure to run \"commandline.py\" instead of main.py, and follow the <Link href=\"#howtorun\">How to run code section.</Link> After starting the console you will be prompted to enter 2 numbers, and then an operator. The console will then print out the information you entered.\n              </Code.Description>\n            </Code.Wrapper>\n            <Code.Wrapper>\n              <Code.Title>\n                Part 2: Parse User Input\n              </Code.Title>\n              Since the <C>input</C> function returns a string. We need to parse the user input, so that we can use them as numbers.\n              <Code.Code>\n                <Code.Line>\n                  number1 = float(number1)\n                </Code.Line>\n                <Code.Line>\n                  number2 = float(number2)\n                </Code.Line>\n              </Code.Code>\n              <Code.Description>\n                Changes number1 and number2 from strings to floats.\n              </Code.Description>\n            </Code.Wrapper>\n            <Code.Wrapper>\n              <Code.Title>\n                Part 3: Process the Operator\n              </Code.Title>\n              After the user has entered in the data we need to process the numbers and operators to produce a result. We will use an if statement to process it.\n            <Code.Code>\n              <Code.Line>\n                result = 0\n              </Code.Line>\n              <Code.Line>\n              <S color=\"rgb(50, 116, 166)\">if</S> <S color=\"#0E6251\">operator == \"+\"</S>:\n              </Code.Line>\n              <Code.Line tabs={1}>\n                result = number1 + number2\n              </Code.Line>\n              <Code.Line>\n              <S color=\"rgb(50, 116, 166)\">elif</S> <S color=\"#0E6251\">operator == \"-\"</S>:\n              </Code.Line>\n              <Code.Line tabs={1}>\n                result = number1 - number2\n              </Code.Line>\n              <Code.Line>\n              <S color=\"rgb(50, 116, 166)\">elif</S> <S color=\"#0E6251\">operator == '/'</S>:\n\n              </Code.Line>\n              <Code.Line tabs={1}>\n                result = number1 / number2\n              </Code.Line>\n              <Code.Line>\n              <S color=\"rgb(50, 116, 166)\">elif</S> <S color=\"#0E6251\">operator == '*'</S>:\n              </Code.Line>\n              <Code.Line tabs={1}>\n                result = number1 * number2\n              </Code.Line>\n              <br/>\n              <Code.Line>\n                print(result)\n              </Code.Line>\n            </Code.Code>\n            <Code.Description>\n                The above code is a multiple line if statement. It uses both <C>if</C> and <C>elif</C>. The if statement will go through until the operator matches, and then run the code inside. It uses the if statement to process the operator.\n            </Code.Description>\n          </Code.Wrapper>\n            <Code.Wrapper>\n              <Code.Title>\n              Putting Everything Together\n              </Code.Title>\n              Now that we have all three parts we can combine them into the same file to create the program. Make sure your file matches this code section and run the program. You have made your first calculator!\n              <Code.Code>\n                <Code.Line tabs={0}>\n                  <Code.Comment># Part 1: Retrieve user input using the built-in <C>input</C> function</Code.Comment>\n                  </Code.Line>\n                  <Code.Line tabs={0}>\n                  number1 = input(\"Enter Number 1: \")\n                  </Code.Line>\n                  <Code.Line tabs={0}>\n                  number2 = input(\"Enter Number 2: \")\n                  </Code.Line>\n                  <Code.Line tabs={0}>\n                  operator = input(\"Enter Operator (+, -, /, *): \")\n                  </Code.Line>\n                  <br/>\n                  <Code.Line tabs={0}>\n                  <Code.Comment># Part 2: Parse the input and turn the strings into integers</Code.Comment>\n                  </Code.Line>\n                  <Code.Line tabs={0}>\n                  number1 = float(number1)\n                  </Code.Line>\n                  <Code.Line tabs={0}>\n                  number2 = float(number2)\n                  </Code.Line>\n                  <br/>\n                  <Code.Line tabs={0}>\n                  <Code.Comment># Part 3: Process the Operator using an if statement.</Code.Comment>\n                  </Code.Line>\n                  <Code.Line tabs={0}>\n                  result = 0\n                  </Code.Line>\n                  <Code.Line tabs={0}>\n                  if operator == \"+\":\n                  </Code.Line>\n                  <Code.Line tabs={1}>\n                  result = number1 + number2\n                  </Code.Line>\n                  <Code.Line tabs={0}>\n                  elif operator == \"-\":\n                  </Code.Line>\n                  <Code.Line tabs={1}>\n                  result = number1 - number2\n                  </Code.Line>\n                  <Code.Line tabs={0}>\n                  elif operator == '/':\n                  </Code.Line>\n                  <Code.Line tabs={1}>\n                  result = number1 / number2\n                  </Code.Line>\n                  <Code.Line tabs={0}>\n                  elif operator == '*':\n                  </Code.Line>\n                  <Code.Line tabs={1}>\n                  result = number1 * number2\n                  </Code.Line>\n                  <br/>\n                  <Code.Line tabs={0}>\n                  <Code.Comment># Display the result to console.</Code.Comment>\n                  </Code.Line>\n                  <Code.Line tabs={0}>\n                  print(result)\n                  </Code.Line>\n                </Code.Code>\n              <Code.Description>\n                The calculation output will be printed to the console after the user enters the operator. \n              </Code.Description>\n            </Code.Wrapper>\n        </SubSection>\n       \n\n        </Section>\n        <Section link=\"turtles\" label=\"Turtle Module\">\n        <p>\n          The <Link href=\"https://docs.Python.org/3/library/turtle.html#module-turtle\">turtle module</Link> is used for creating simple graphics. You control a turtle and move it around the screen. As it moves it draws a line behind it. Using this simple device you can draw a lot of cool stuff. There are a lot of cool art designs possible with spiral patterns. Check out the turtle examples below to see what crazy stuff you can do with turtles. \n        </p>\n        <Code.Wrapper>\n          <Code.Title>\n            Turtle Examples\n          </Code.Title>\n            Python has a lot of built in turtle examples. Check out <Link href=\"https://docs.Python.org/3/library/turtle.html#module-turtledemo\">this page</Link> to see all the examples and how to run them.\n        </Code.Wrapper>\n        <TableOfContents noNumbers fontSize={\"20px\"} >\n          <SubSection link=\"turtlecommands\" label=\"Turtle Commands\">\n            <p>\n              The first step to becoming the master of turtle graphics is creating a turtle. Once created, a turtle has a set of commands that you can use to move it around the screen. \n            </p>\n            <Code.Wrapper>\n              <Code.Title>\n                Creating a turtle\n              </Code.Title>\n              <Code.Code>\n                bob_the_turtle = turtle.Turtle()\n              </Code.Code>\n              <Code.Result>\n                Now that the turtle is made you can use the following commands to move the turtle around. A full list of commands is available <Link href=\"https://docs.Python.org/3/library/turtle.html#turtle-motion\">here</Link>.\n              </Code.Result>\n            </Code.Wrapper>\n            <Code.Title>\n              \n            </Code.Title>\n            <CardDeck>\n            <CodeSnip.Snip title=\"forward(distance)\" label=\"Move Forward\" >\n              Moves the turtle forward a specified amount of units.\n              <CodeSnip.Example>\n                bob_the_turtle.forward(10)\n              </CodeSnip.Example>\n              <CodeSnip.Result>\n                Moves bob_the_turtle foward 10 units.\n              </CodeSnip.Result>\n            </CodeSnip.Snip>\n            <CodeSnip.Snip title=\"right(angle)\" label=\"Turn Right\" >\n              Turns the turtle angle degrees to the right. There are 360 degrees in an entire circle. \n              <CodeSnip.Example>\n                bob_the_turtle.right(10)\n              </CodeSnip.Example>\n              <CodeSnip.Result>\n                Turns the turtle 10 degrees to the right.\n              </CodeSnip.Result>\n            </CodeSnip.Snip>\n            <CodeSnip.Snip title=\"left(angle)\" label=\"Turn Left\" >\n              Turns the turtle angle degrees to the left. There are 360 degrees in an entire circle.  \n              <CodeSnip.Example>\n                bob_the_turtle.left(10)\n              </CodeSnip.Example>\n              <CodeSnip.Result>\n                Turns the turtle 10 degrees to the left. \n              </CodeSnip.Result>\n            </CodeSnip.Snip>\n            </CardDeck>\n            <CardDeck>\n              <CodeSnip.Snip title=\"pencolor(color)\" label=\"Pen Color\" >\n                Changes the turtle pen color. Takes in a color string such as \"blue\", \"red\", \"green\", or \"yellow\". <Link href=\"https://ecsdtech.com/8-pages/121-Python-turtle-colors\">Here</Link> is a list of all available colors.\n                <CodeSnip.Example>\n                  bob_the_turtle.pencolor(\"blue\")\n                </CodeSnip.Example>\n                <CodeSnip.Result>\n                  Changes the turtle pen color to blue.\n                </CodeSnip.Result>\n              </CodeSnip.Snip>\n              <CodeSnip.Snip title=\"pensize(size)\" label=\"Pen Size\" >\n                Changes the turtle pen size. \n                <CodeSnip.Example>\n                  bob_the_turtle.pencolor(20)\n                </CodeSnip.Example>\n                <CodeSnip.Result>\n                  The pen size is now 20. \n                </CodeSnip.Result>\n              </CodeSnip.Snip>\n            </CardDeck>\n          </SubSection>\n          <SubSection  label=\"Turtle Project 1: Turtle Circle\">\n            <p>\n              In this first project we will create a simple circle. This will build off everything you have read until this point. Well, we aren't creating a true circle, just something that looks like a circle, kinda. The best we can do is create a many sided shape. We do this by drawing a straight line, turning a little but and drawing another line. Assuming we move the same distance every time and turn the same amount we'll eventually make it make to the start, creating a circle. \n            </p>\n            <p>\n              Create a new python file and try creating a circle. Try not to cheat by looking at the code below. \n            </p>\n            <Code.Wrapper>\n              <Code.Title>\n                Circle Code\n              </Code.Title>\n              Go through each line and make sure you understand it. It's one thing to read it over, another to really understand it. \n              <Code.Code notVisible>\n                <Code.Line>\n                  import turtle <Code.Comment># Imports the turtle module</Code.Comment>\n                </Code.Line>\n                <br/>\n                <Code.Line>\n                  bob_the_turtle = turtle.Turtle() <Code.Comment># Imports the turtle module</Code.Comment>\n                </Code.Line>\n                <br/>\n                <Code.Comment># Create a for loop to draw the pieces of the circle.</Code.Comment>\n                <Code.Line>\n                  for i in range(1000): \n                </Code.Line>\n                \n                <Code.Line tabs={1}>\n                  <Code.Comment># Move the turtle forward 10</Code.Comment>\n                </Code.Line>\n                <Code.Line tabs={1}>\n                  bob_the_turtle.forward(10)\n                </Code.Line>\n                <Code.Line tabs={1}>\n                  <Code.Comment># Turn the turtle right degrees 5</Code.Comment>\n                </Code.Line>\n                <Code.Line tabs={1}>\n                  bob_the_turtle.left(5)\n                </Code.Line>\n                <br/>\n                <Code.Line>\n                  turtle.done()\n                </Code.Line>\n              </Code.Code>\n            </Code.Wrapper>\n          </SubSection>\n          <SubSection link=\"turtlespiral\" label=\"Turtle Project 2: Colored Spiral\">\n          <div style={{backgroundImage: \"url(http://www.alexwurts.com/Articles/files/turtlespiral.png)\", width: \"100%\", \"height\": \"200px\", backgroundPosition: \"center\"}}>\n          </div>\n          <p>\n            Let's make the circle a little more exciting. We are going to turn it into a spiral that changes colors. A spiral is created by a drawing a circle of increasing radius or size. We are actually drawing a many sided shape that looks like a circle. In a many sided shape two values that determine size are side length and corner angle. If we increase side length every time we move the size increases. The new code below shows this change. \n          </p>\n          <p>\n            We also need to change the color for every line segment. Below I created a list of colors we want to use. Everytime we move foward we change bob's pen color using the <C>pencolor</C> command. We set the color based on the <C>color_index</C>. Everytime the for loop runs it increments the variable <C>i</C>. By using modulus (<C>%</C>) we can reduce <C>i</C> down to a number between 0 and 5 to index into the colors list. \n          </p>\n          <p>\n            Try creating a colorful spiral on your own. It'll be challenging. When you finish or, if you get stuck look at the code below.\n          </p>\n          <Code.Wrapper>\n              <Code.Title>\n                Spiral Code\n              </Code.Title>\n              <Code.Code notVisible> \n                <Code.Line tabs={0}>\n                import turtle\n                </Code.Line>\n                <br/>\n                <Code.Line tabs={0}>\n                <Code.Comment># Create lists of colors</Code.Comment>\n                </Code.Line>\n                <Code.Line tabs={0}>\n                colors = ['red', 'orange', 'yellow', 'green', 'blue', 'purple']\n                </Code.Line>\n                <br/>\n                <Code.Line tabs={0}>\n                <Code.Comment># Create turtle and initialize pen size and pen color</Code.Comment>\n                </Code.Line>\n                <Code.Line tabs={0}>\n                bob_the_turtle = turtle.Turtle()\n                </Code.Line>\n                <Code.Line tabs={0}>\n                bob_the_turtle.pensize(30)\n                </Code.Line>\n                <Code.Line tabs={0}>\n                bob_the_turtle.pencolor(\"red\")\n                </Code.Line>\n                <br/>\n                <Code.Line tabs={0}>\n                  <Code.Comment># Set initial forward distance movement</Code.Comment>\n                </Code.Line>\n                <Code.Line tabs={0}>\n                forward_distance = 20\n                </Code.Line>\n                <br/>\n                <Code.Line tabs={0}>\n                for i in range(1000):\n                </Code.Line>\n                <Code.Line tabs={1}>\n                  <Code.Comment>\n                    # Move turtle foward and turn\n                  </Code.Comment>\n                </Code.Line>\n                <Code.Line tabs={1}>\n                  bob_the_turtle.forward(forward_distance)\n                </Code.Line>\n                <Code.Line tabs={1}>\n                  bob_the_turtle.left(29)\n                </Code.Line>\n                <br/>\n                <Code.Line tabs={1}>\n                  <Code.Comment># Calculate color_index</Code.Comment>\n                </Code.Line>\n                <Code.Line tabs={1}>\n                  <Code.Comment># Using modulus on i, the movement counter, changes it into a value </Code.Comment>\n                </Code.Line>\n                <Code.Line tabs={1}>\n                  <Code.Comment># between 0 and 5 to index into the color list</Code.Comment>\n                </Code.Line>\n                <Code.Line tabs={1}>\n                color_index = i % len(colors)\n                </Code.Line>\n                <Code.Line tabs={1}>\n                  color = colors[color_index] <Code.Comment># Get color from colors using color_index</Code.Comment>\n                </Code.Line>\n                <br/>\n                <Code.Line tabs={1}>\n                  <Code.Comment>\n                    # Set color \n                  </Code.Comment>\n                </Code.Line>\n                <Code.Line tabs={1}>\n                bob_the_turtle.pencolor(color)\n                </Code.Line>\n                <br/>\n                <Code.Line tabs={1}>\n                  <Code.Comment>\n                    # Increase foward distance by 1 to create spiral\n                  </Code.Comment>\n                </Code.Line>\n                <Code.Line tabs={1}>\n                forward_distance += 1\n                </Code.Line>\n                <br/>\n                <Code.Line tabs={0}>\n                <Code.Comment># Make program wait before closing</Code.Comment>\n                </Code.Line>\n                <Code.Line tabs={0}>\n                turtle.done()\n                </Code.Line>\n                </Code.Code>\n            </Code.Wrapper>\n          </SubSection>\n        </TableOfContents>\n        </Section>\n        <Section link=\"modules\" label=\"Built-in Python Modules\">\n        <p> Python has a lot of very useful modules built into the source code. Here are the most popular. </p>\n          \n          <CardDeck>\n            <CodeSnip.Snip title=\"import math\" subtitle=\"Math Module\"\n            subtitleLink=\"https://docs.Python.org/3/library/math.html?highlight=math#module-math\">\n              Calculates more complex math functions such as Trignometry, factorial, square root, exponents, Pi, e, logarithms, and rounding functions like floor and ceiling.\n            </CodeSnip.Snip>\n            <CodeSnip.Snip title=\"import random\" subtitle=\"Random Module\" subtitleLink=\"https://docs.Python.org/3/library/random.html?highlight=random#module-random\">\n              Generates pseudo-random numbers. Can generate random integers or floats. Not truly random, but good enough for simple programs. \n            </CodeSnip.Snip>\n          </CardDeck>\n          <CardDeck>\n            <CodeSnip.Snip title='import time' subtitle=\"Time Module\" \n            subtitleLink=\"https://docs.Python.org/3/library/time.html?highlight=time#module-time\">\n              Used for any calculations that require time. Can be used to get the current time, or format time to make it more readable. Time functions is never something you want to program yourself. It is more complex than you can possibly imagine. \n            </CodeSnip.Snip>\n            <CodeSnip.Snip title='import statistics' subtitle=\"Statistics Module\" subtitleLink=\"https://docs.Python.org/3/library/statistics.html?highlight=statistics#module-statistics\">\n              Calculate various statistics on a list. Some of the available functions cover mean, median, mode, quantiles, standard deviation, and variance. \n            </CodeSnip.Snip>    \n          </CardDeck>\n          <CardDeck>\n            <CodeSnip.Snip title=\"import sys\" subtitle=\"System Module\"\n            subtitleLink=\"https://docs.Python.org/3/library/sys.html?highlight=sys#module-sys\">\n              Can be used to access command line arguments. A module that provides access to interpreter variables. \n            </CodeSnip.Snip>\n            <CodeSnip.Snip title=\"import email\" subtitle=\"Emailing Library\" subtitleLink=\"https://docs.Python.org/3/library/email.examples.html#email-examples\">\n              <p>\n                Read, write, and send simple email messages. The link provides an example to work from. \n              </p>\n            </CodeSnip.Snip>\n          </CardDeck>\n        </Section>\n        <Section link=\"projects\" label=\"Projects\">\n          <Table >\n            <thead>\n              <tr>\n                <th>\n                    Project Name\n                </th>\n                <th>\n                    Description\n                </th>\n                <th>\n                    Difficulty\n                </th>\n                <th>\n                    Estimated Time\n                </th>\n                </tr>\n            </thead>\n            <tbody>\n              <tr>\n                  <td>\n                      Count The Characters\n                  </td>\n                  <td>\n                      Count how many times each character appears in a long string. \n                  </td>\n                  <td>\n                      Easy\n                  </td>\n                  <td>\n                      15min-30min\n                  </td>\n              </tr>\n              <tr>\n                  <td>\n                      Complex Calculator\n                  </td>\n                  <td>\n                      Add on the the calculator above and use the <C>math</C> library to add more capabilities such as sqrt, power, and more.\n                  </td>\n                  <td>\n                      Easy\n                  </td>\n                  <td>\n                      10-20min\n                  </td>\n              </tr>\n              <tr>\n                  <td>\n                      Command Line Calculator\n                  </td>\n                  <td>\n                      Add the ability to specify the calculator commands in the command line when you call the function. For example: python3 commandline.py 10 20 * would print 200.\n                  </td>\n                  <td>\n                      Easy\n                  </td>\n                  <td>\n                      20-30min\n                  </td>\n              </tr>\n              <tr>\n                  <td>\n                      Number Guessing Game\n                  </td>\n                  <td>\n                      Generate a random number and let the user type guesses in the console. After each guess say whether they were too high or low.  Hint: use the <C>random</C> library.\n                  </td>\n                  <td>\n                      Medium\n                  </td>\n                  <td>\n                      1-3hrs\n                  </td>\n              </tr>\n              <tr>\n                  <td>\n                      Caesar Cipher\n                  </td>\n                  <td>\n                      Create a program that can encrypt and decrypt Caesar Cipher text. Allow any offset to be used. \n                  </td>\n                  <td>\n                      Medium\n                  </td>\n                  <td>\n                      1-2hrs\n                  </td>\n              </tr>\n              <tr>\n                  <td>\n                      Snake\n                  </td>\n                  <td>\n                      Create snake using the turtle module.\n                  </td>\n                  <td>\n                      Hard\n                  </td>\n                  <td>\n                      8-10hrs\n                  </td>\n                </tr> \n              <tr>\n                  <td>\n                      Tkinter calculator\n                  </td>\n                  <td>\n                  Create a simple calculator with tkinter. Tkinter is the built-in interface module for Python.\n                  </td>\n                  <td>\n                      Hard\n                  </td>\n                  <td>\n                      4-8hrs\n                  </td>\n              </tr>  \n              <tr>\n                  <td>\n                      Text Adventure Game\n                  </td>\n                  <td>\n                      Create a text adventure game in the console.\n                  </td>\n                  <td>\n                      Hard\n                  </td>\n                  <td>\n                      15-20hrs\n                  </td>\n              </tr>\n              <tr>\n                  <td>\n                      Analog Clock\n                  </td>\n                  <td>\n                      Create an Analog clock for the current time with turtles.\n                  </td>\n                  <td>\n                      Hard\n                  </td>\n                  <td>\n                      15-20hrs\n                  </td>\n              </tr>\n           </tbody>\n          </Table>\n        </Section>\n        <Section link=\"nextsteps\" label=\"Next Steps\">\n          <p>\n            You now have a good idea of the basic components of Python. Try to work through the easy projects above and if you feel good go for the medium projects. Move on to the Advanced Python Tutorial (Coming Soon!) to learn more about what Python can do. \n          </p>\n          <p>\n            If you have another project in mind that requires any of the following categories, or anything like them look through the links to find a library to help you. Most good libraries have a decent learning curve, but once learned they are very powerful.\n          </p>\n          <p>\n            Python has many faces. It is capable at web development and and state of the art Deep Learning. Python's huge amount of open source libraries allow it to do almost anything. Django is used for backend web development. Pytorch and Tensorflow are used for deep learning. Numpy is for linear algebra. Python Image Library (PIL) is for image processing. Pandas and Matplotlib are for data science. Continue to my Advanced Python tutorial to start learning the tools needed to code with these libraries.\n          </p>\n          <Code.Title>\n            Data Aquisition, Processing, and Manipulation\n          </Code.Title>\n          <ul>\n            <li>\n              <Link href=\"https://pandas.pydata.org//\">Pandas - Read/Write/Editing csv's and data</Link>\n            </li>\n            <li>\n              <Link href=\"https://docs.Python.org/3/library/csv.html\">csv module - read and write csv</Link>\n            </li>\n            <li>\n              <Link href=\"https://openpyxl.readthedocs.io/en/stable/\">openpyxl - Excel Changing</Link>\n            </li>\n            <li>\n              <Link href=\"https://requests.readthedocs.io/en/master/\">Requests - HTTP requests</Link>\n            </li>\n            <li>\n              <Link href=\"https://docs.Python.org/3/library/json.html\">JSON Module - Reading, Writing, and Parsing JSON </Link>\n            </li>\n            <li>\n              <Link href=\"https://docs.Python.org/3/library/urllib.html\">urllib module- HTTP request</Link>\n            </li>\n            <li>\n              <Link href=\"\">os - File/Folder/Command line processing</Link>\n            </li>\n          </ul>\n          <Code.Title>\n            Machine Learning and Deep Learning\n          </Code.Title>\n          <ul>\n            <li>\n              <Link href=\"https://pytorch.org/\">Pytorch - Deep Learning and Autograd</Link>\n            </li>\n            <li>\n              <Link href=\"https://www.tensorflow.org/\">Tensorflow - Deep Learning and Machine Learning</Link>\n            </li>\n            <li>\n              <Link href=\"https://keras.io/\">Keras - Built on top of Tensorflow</Link>\n            </li>\n            <li>\n              <Link href=\"https://numpy.org/\">Numpy - Math and Linear Algebrad</Link>\n            </li>\n            <li>\n              <Link href=\"https://scikit-learn.org/stable/\">Scikit-Learn - Machine Learning </Link>\n            </li>\n            <li>\n              <Link href=\"http://deeplearning.net/software/theano/\">Theano - Array calculations heavily optimized</Link>\n            </li>\n          </ul>\n          <Code.Title>\n            Data Visualization and Graphics\n          </Code.Title>\n          <ul>\n            <li>\n              <Link href=\"https://matplotlib.org/\">Matplotlib - Graphing and 3D Visualization </Link>\n            </li>\n            <li>\n              <Link href=\"https://seaborn.pydata.org/\">Seaborn - statistical data visualization</Link>\n            </li>\n            <li>\n              <Link href=\"https://plot.ly/Python/\">Plotly - Graphing</Link>\n            </li>\n            <li>\n              <Link href=\"https://py.processing.org/\">Processing - simple but powerful graphics library</Link>\n            </li>\n         \n          </ul>\n          <Code.Title>\n            Web Development\n          </Code.Title>\n          <ul>\n            <li>\n              <Link href=\"https://matplotlib.org/\">Django - Backend server framework, interfaces with databases</Link>\n            </li>\n            <li>\n              <Link href=\"https://www.fullstackPython.com/flask.html\">Flask - Lightweight server framework</Link>\n            </li>\n            <li>\n              <Link href=\"https://cherrypy.org/\">CherryPy - Minimalist Web Framework</Link>\n            </li>\n            <li>\n              <Link href=\"https://py.processing.org/\">Processing - simple but powerful graphics library</Link>\n            </li>\n            <li>\n              <Link href=\"https://bottlepy.org/docs/dev/\">Bottle.py - Lighweight micro web framework</Link>\n            </li>\n          </ul>\n          <Code.Title>\n            User Interfaces\n          </Code.Title>\n          <ul>\n            <li>\n              <Link href=\"https://docs.Python.org/3/library/tkinter.html\">Tkinter - Built-in user interface module</Link>\n            </li>\n            <li>\n              <Link href=\"https://www.pygame.org/news\">Pygame - Intro to game programming</Link>\n            </li>\n            <li>\n              <Link href=\"https://kivy.org/#home\">Kivy - Cross platform </Link>\n            </li>\n            <li>\n              <Link href=\"https://wxPython.org/\">wxPython - Cross-platform GUI toolkit</Link>\n            </li>\n          </ul>\n        </Section>\n      </TableOfContents>\n    </div>\n  )\n}","import HowToGoogle from './HowToGoogle';\n\nexport default HowToGoogle;","import React from 'react';\nimport {\n    Section,\n    TableOfContents\n} from \"../compstore\";\n\nexport default function IntroPython(props) {\n\n    return (\n        <div className='page-wrapper'>\n            <h1>\n                Welcome to How to Google for Programming\n            </h1>\n            <h3>By Alexander Wurts</h3>\n            <p>\n                If you have any questions, comments, or think there is an error please email me at\n                <b> alexwurtsfeedback@gmail.com</b>.\n            </p>\n            <h4>\n                A minimal guide to get you started. A better name could be, \"How to find the Stackoverflow answer you want on your first try\".\n            </h4>\n            <TableOfContents>\n                <Section link=\"starting\" label=\"Getting Started\">\n                    <p>\n                       Coming Soon...\n                    </p>\n                </Section>\n            </TableOfContents>\n        </div>\n    )\n}","import AdvPython from './AdvPython';\nexport default AdvPython;","import React from 'react';\nimport {\n  Section,\n  SubSection,\n  TableOfContents,\n  Link,\n  C,\n  Code,\n  CodeSnip,\n  S,\n  List,\n  ListItem\n} from \"../compstore\";\nimport { CardDeck, Table } from 'react-bootstrap';\n\nexport default function IntroPython(props) {\n\n  return (\n    <div className='page-wrapper'>\n      <h1>\n        Welcome to Advanced Python\n      </h1>\n      <h3>By Alexander Wurts</h3>\n      <p>\n          If you have any questions, comments, or think there is an error please email me at\n          <b> alexwurtsfeedback@gmail.com</b>.\n      </p>\n      <h4>\n        This is where it gets fun.\n      </h4>\n      <TableOfContents>\n      {/* <Section link=\"nextsteps\" label=\"Next Steps\">\n          <p>\n            You now have a good idea of the basic components of Python. Try to work through the easy projects above and if you feel good go for the medium projects. Move on to the Advanced Python Tutorial (Coming Soon!) to learn more about what Python can do. \n          </p>\n          <p>\n            If you have another project in mind that requires any of the following categories, look at or anything like that look through the links to find a library to help you. Most good libraries have a descent learning curve, but once learned they are very powerful.\n          </p>\n          <p>\n            Python has many faces. It is capable at web development and and state of the art Deep Learning. Python's huge amount of open source libraries allow it to do almost anything. Django is used for backend web development. Pytorch and Tensorflow are used for deep learning. Numpy is for linear algebra. Python Image Library (PIL) is for image processing. Pandas and Matplotlib are for data science. Continue to my next tutorial to start using these tools.\n          </p>\n          <Code.Title>\n            Data Aquisition, Processing, and Manipulation\n          </Code.Title>\n          <ul>\n            <li>\n              <Link href=\"https://pandas.pydata.org//\">Pandas - Read/Write/Editing csv's and data</Link>\n            </li>\n            <li>\n              <Link href=\"https://docs.python.org/3/library/csv.html\">csv module - read and write csv</Link>\n            </li>\n            <li>\n              <Link href=\"https://openpyxl.readthedocs.io/en/stable/\">openpyxl - Excel Changing</Link>\n            </li>\n            <li>\n              <Link href=\"https://requests.readthedocs.io/en/master/\">Requests - HTTP requests</Link>\n            </li>\n            <li>\n              <Link href=\"https://docs.python.org/3/library/json.html\">JSON Module - Reading, Writing, and Parsing JSON </Link>\n            </li>\n            <li>\n              <Link href=\"https://docs.python.org/3/library/urllib.html\">urllib module- HTTP request</Link>\n            </li>\n            <li>\n              <Link href=\"\">os - File/Folder/Command line processing</Link>\n            </li>\n          </ul>\n          <Code.Title>\n            Machine Learning and Deep Learning\n          </Code.Title>\n          <ul>\n            <li>\n              <Link href=\"https://pytorch.org/\">Pytorch - Deep Learning and Autograd</Link>\n            </li>\n            <li>\n              <Link href=\"https://www.tensorflow.org/\">Tensorflow - Deep Learning and Machine Learning</Link>\n            </li>\n            <li>\n              <Link href=\"https://keras.io/\">Keras - Built on top of Tensorflow</Link>\n            </li>\n            <li>\n              <Link href=\"https://numpy.org/\">Numpy - Math and Linear Algebrad</Link>\n            </li>\n            <li>\n              <Link href=\"https://scikit-learn.org/stable/\">Scikit-Learn - Machine Learning </Link>\n            </li>\n            <li>\n              <Link href=\"http://deeplearning.net/software/theano/\">Theano - Array calculations heavily optimized</Link>\n            </li>\n          </ul>\n          <Code.Title>\n            Data Visualization and Graphics\n          </Code.Title>\n          <ul>\n            <li>\n              <Link href=\"https://matplotlib.org/\">Matplotlib - Graphing and 3D Visualization </Link>\n            </li>\n            <li>\n              <Link href=\"https://seaborn.pydata.org/\">Seaborn - statistical data visualization</Link>\n            </li>\n            <li>\n              <Link href=\"https://plot.ly/python/\">Plotly - Graphing</Link>\n            </li>\n            <li>\n              <Link href=\"https://py.processing.org/\">Processing - simple but powerful graphics library</Link>\n            </li>\n         \n          </ul>\n          <Code.Title>\n            Web Development\n          </Code.Title>\n          <ul>\n            <li>\n              <Link href=\"https://matplotlib.org/\">Django - Backend server framework, interfaces with databases</Link>\n            </li>\n            <li>\n              <Link href=\"https://www.fullstackpython.com/flask.html\">Flask - Lightweight server framework</Link>\n            </li>\n            <li>\n              <Link href=\"https://cherrypy.org/\">CherryPy - Minimalist Web Framework</Link>\n            </li>\n            <li>\n              <Link href=\"https://py.processing.org/\">Processing - simple but powerful graphics library</Link>\n            </li>\n            <li>\n              <Link href=\"https://bottlepy.org/docs/dev/\">Bottle.py - Lighweight micro web framework</Link>\n            </li>\n          </ul>\n          <Code.Title>\n            User Interfaces\n          </Code.Title>\n          <ul>\n            <li>\n              <Link href=\"https://docs.python.org/3/library/tkinter.html\">Tkinter - Built-in user interface module</Link>\n            </li>\n            <li>\n              <Link href=\"https://www.pygame.org/news\">Pygame - Intro to game programming</Link>\n            </li>\n            <li>\n              <Link href=\"https://kivy.org/#home\">Kivy - Cross platform </Link>\n            </li>\n            <li>\n              <Link href=\"https://wxpython.org/\">wxpython - Cross-platform GUI toolkit</Link>\n            </li>\n          </ul>\n        </Section> */}\n      </TableOfContents>\n      </div>\n  )\n}","import IntroWebDev from './introwebdev';\nimport IntroPython from \"./intropython\";\nimport HowToGoogle from './howtogoogle';\nimport AdvPython from './advpython';\nimport './allcss.css'\n\nexport default [\n    {\n       title: \"Intro to Web Dev\" ,\n       component: IntroWebDev\n    },\n\n    {\n        title: \"Intro to Python\" ,\n        component: IntroPython\n    },\n    {\n        title: \"Advanced Python\" ,\n        component: AdvPython\n    },\n    {\n        title: \"How to Google\" ,\n        component: HowToGoogle\n    },\n]\n","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport {\n    NavBar,\n    TableOfContents,\n    Section,\n    SideBar\n} from './components/compstore';\n\nimport pages from './components';\n\n\nimport './App.css';\n\nfunction useWindowSize() {\n    const isClient = typeof window === 'object';\n  \n    function getSize() {\n      return {\n        width: isClient ? window.innerWidth : undefined,\n        height: isClient ? window.innerHeight : undefined\n      };\n    }\n  \n    const [width, setWidth] = useState(getSize);\n  \n    useEffect(() => {\n      if (!isClient) {\n        return false;\n      }\n      \n      function handleResize() {\n        setWidth(getSize());\n      }\n  \n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }, []); // Empty array ensures that effect is only run on mount and unmount\n  \n    return width;\n  }\n\nfunction App(props) {\n    var [ frame, setWindow ] = useState(1);\n\n    const size = useWindowSize();\n\n    let Page = pages[frame].component;\n\n\n    console.log(size.width);\n    return (\n        <div className=\"App\" style={{backgroundColor: \"white\"}}>\n            <NavBar width={size.width}/>\n            <div style={{display: size.width < 900 ?  \"block\": \"flex\", maxWidth: Math.min(size.width , 900) + \"px\", marginLeft: size.width > 900 ? \"auto\" : \"0px\", marginRight:  size.width > 900 ? \"auto\" : \"0px\"}}>\n                <SideBar.Wrapper style={{minWidth: \"150px\", maxWidth: \"250px\", marginLeft: \"auto\", marginRight: \"auto\"}}>\n                    {pages.map((val, index) => {\n                        return <SideBar.Item key={index} onClick={() => setWindow(index)}>\n                            {val.title}\n                        </SideBar.Item>\n                    })}\n                </SideBar.Wrapper>\n                <div style={{maxWidth: Math.min(size.width , 750) + \"px\"}}>\n                    <Page width={size.width}/>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}