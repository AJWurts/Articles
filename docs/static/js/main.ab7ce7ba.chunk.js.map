{"version":3,"sources":["logo.svg","components/compstore/TableOfContents.jsx","components/compstore/NavBar.jsx","components/compstore/Section.jsx","components/compstore/SideBar.jsx","components/compstore/CodeSnip.jsx","components/compstore/SubSection.jsx","components/compstore/Code.jsx","components/compstore/List.jsx","components/introwebdev/index.js","components/introwebdev/IntroWebDev.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TableOfContents","props","children","length","console","log","List","items","map","Child","index","NavBar","id","className","onClick","window","location","href","style","padding","open","alt","height","width","src","Section","link","label","badge","SideBar","Snip","Card","Body","Title","title","Subtitle","subtitle","Text","Example","SubSection","Code","backgroundColor","borderRadius","Line","fontSize","Description","Wrapper","ListItem","Nav","defaultActiveKey","child","Link","key","target","newPage","noNumbers","IntroWebDev","Badge","variant","CardDeck","CodeSnip","color","margin","App","display","maxWidth","marginLeft","marginRight","links","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab7ce7ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Nav } from 'react-bootstrap';\nimport { List } from './index';\n\nexport default function TableOfContents(props) {\n    var children = props.children\n    if (!children.length) {\n        children = [children]\n    }\n    console.log(children);\n\n    return (\n        <div>\n            <div>\n                <h3>\n                    Table of Contents\n                </h3>\n                <List items={children} />\n  \n            </div>\n            <div>\n                {children.map((Child, index) => {\n                    return Child\n                })}\n            </div>\n\n        </div>\n    )\n}","import React from 'react';\n\nexport default function NavBar(props) {\n\n    return (\n        <div>\n            <div id='top'></div>\n\n            <div className='topbar-wrapper'>\n                <div className='topbar flex'>\n                    <div>\n                        <div className='title'>\n                            Intro to Coding\n                        </div>\n                    \n                    </div>\n                    <div className='topbar-buttons flex'>\n                        <div className='topbar-link' onClick={()=> window.location.href=\"#biography\"}>\n                            About Me\n                        </div>\n                        <div className='topbar-link' onClick={() => window.location.href=\"#projects\"}>\n                            Projects\n                        </div>\n                        <div className='topbar-link' onClick={() => window.location.href=\"#experience\"}>\n                            Experience\n                        </div>\n                        <div className='topbar-link-instalogo topbar-link' style={{ padding: \"6px 10px 7px 10px\" }}\n                            onClick={() => window.open(\"https:\\/\\/www.instagram.com/programmingpilot/\")}>\n                            <img id=\"img\" className=\"style-scope yt-img-shadow\" alt=\"\" height=\"30\" width=\"30\"\n                                src=\"http://www.alexwurts.com/images/IG_Glyph_Fill.png\" />\n                        </div>\n                        <div className='topbar-link-instalogo topbar-link' style={{ padding: \"9px 10px 11px 10px\" }}\n                            onClick={() => window.open(\"https:\\/\\/github.com/ajwurts/\")}>\n                            <img id=\"img\" className=\"style-scope yt-img-shadow\" alt=\"\" height=\"23\" width=\"23\"\n                                src=\"http://www.alexwurts.com/images/github.png\" />\n                        </div>\n                        <div className='topbar-link-instalogo topbar-link' style={{ padding: \"10px 10px 11px 10px\" }}\n                            onClick={() => window.open(\"https:\\/\\/www.youtube.com/channel/UC-dU4MIIpMOjTzn55ALJIaA\")}>\n                            <img id=\"img\" className=\"style-scope yt-img-shadow\" alt=\"\" height=\"22\" width=\"32\"\n                                src=\"http://www.alexwurts.com/images/youtube.png\" />\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport { Badge } from 'react-bootstrap';\n\n\nexport default function Section(props) {\n\n    return (\n        <div id={props.link} className='section'>\n            <h3>\n                {props.label} {props.badge}\n            </h3>\n            {props.children}\n            {/* Add Back to Top Link */}\n        </div>\n    )\n}","import React from 'react';\n\nexport default function SideBar(props) {\n    return (\n        <div>\n            Side Bar\n        </div>\n    )\n}","import React from 'react';\nimport {Card} from 'react-bootstrap';\nimport {CodeSnip} from \"./index\";\n\nfunction Snip(props) {\n    return (\n        <Card style={{width: '18rem'}}>\n            <Card.Body>\n                <Card.Title>{props.title}</Card.Title>\n                <Card.Subtitle className=\"mb-2 text-muted\">{props.subtitle}</Card.Subtitle>\n                <Card.Text>\n                    {props.children}\n                </Card.Text>\n\n            </Card.Body>\n        </Card>)\n}\n\nfunction Example(props) {\n    return (\n        <div>\n            <b>Example:</b> <br/>\n            <code>{props.children}</code>\n        </div>\n    );\n}\n\nexport default {\n    Snip,\n    Example\n}","import React from 'react';\n\n\nexport default function SubSection(props) {\n\n    return (\n        <div id={props.link} className='section'>\n            <h4>\n                {props.label} {props.badge}\n            </h4>\n            {props.children}\n        </div>\n    )\n}","import React from 'react'\n\nfunction Wrapper(props) {\n\n    return (\n        <div>\n            {props.children}\n        </div>\n    )\n}\n\nfunction Code(props) {\n    return (\n        <pre style={{backgroundColor: \"lightgray\", padding: \"5px\", borderRadius: \"6px\"}}>\n            <code>\n                {props.children}\n            </code>\n        </pre>\n    )\n}\n\nfunction Line(props) {\n    return (\n        <div>\n            {props.children}\n        </div>\n    )\n}\n\nfunction Title(props) {\n    return (\n        <div style={{fontSize: \"20px\"}}>\n            {props.children}\n        </div>\n    )\n}\n\nfunction Description(props) {\n    return (\n        <div style={{}}>\n            <b>Explanation:</b> {props.children}\n        </div>\n    )\n}\n\nexport default {\n    Code,\n    Line,\n    Title,\n    Description,\n    Wrapper\n}","import React from 'react';\nimport { Nav } from 'react-bootstrap'\nfunction ListItem(props) {\n    return (\n        <span onClick={() => window.open(props.link)}>\n            {props.children}\n        </span>\n    )\n}\n\nfunction List(props) {\n    var children = props.items || props.children;\n    if (!children.length) {\n        children = [children]\n    }\n    return (\n        <Nav defaultActiveKey=\"/\" className=\"flex-column\">\n            {children ? children.map((child, index) => {\n                return (\n                    <Nav.Link key={index} href={'#' + child.props.link} target={props.newPage ? \"_blank\" : \"\"}>\n                        {props.noNumbers ? \"\" : index + 1 + \".\"} {child.props.label || child.props.children} {child.props.badge}\n                    </Nav.Link>\n                )\n            }) : null}\n        </Nav>\n    )\n}\n\n\nexport {\n    List,\n    ListItem\n}","import IntroWebDev from './IntroWebDev';\n\nexport default IntroWebDev;","import React from 'react';\nimport {\n    TableOfContents,\n    Section,\n    List,\n    ListItem,\n    CodeSnip,\n    SubSection,\n    Code\n} from '../compstore';\n\nimport {Badge, Card, CardDeck} from 'react-bootstrap';\n\nexport default function IntroWebDev(props) {\n\n    return (\n        <div className='page-wrapper'>\n            <h1>\n                Welcome to Intro to Web Dev.\n            </h1>\n            <h4>\n                A guide to the resources needed to get started.\n            </h4>\n            <TableOfContents>\n                <Section link=\"starting\" label=\"Getting Started\" badge={<Badge\n                    variant=\"warning\">Full</Badge>}>\n                    <p>\n                        Web development can mean a lot of different things. It's important to have a clear learning\n                        goal. For example if you are interested in user interface or front end design its best to learn\n                        HTML and CSS first than migrate to JS for interactive web pages. Or if you are interested in\n                        creating complex interactive applications then backend may be a good place to start. This\n                        tutorial will cover three topics Front End Development, Backend Development, and Full Stack\n                        development (both frontend and backend). Every section will be labeled either <Badge\n                        variant=\"primary\">Front</Badge>, <Badge\n                        variant=\"success\">Back</Badge> or <Badge variant=\"warning\">Both</Badge>. Based on what your goal\n                        is you can choose to read the relevant sections.\n                    </p>\n                    <p>\n                        This tutorial is to give you an flavor of web development and link to resources to expand your\n                        knowledge. It provides a brief overview so you cn start connecting to pieces to understand how a\n                        web page is constructed.\n                    </p>\n                    <p>\n                        Here are a few key tips to help you succeed:\n                        <ul>\n                            <li>Programming is difficult, you can't expect to pick it up in only a few hours. It will\n                                require practice and time.\n                            </li>\n                            <li>Google is a programmers best friend. Learning how to Google effectively is a skill.\n                                Checkout my tutorial on how to Google on the left.\n                            </li>\n                            <li>For frontend find simple website and try to remake them. Don't worry about interaction\n                                or colors at the start, try to replicate the structure and move up from there.\n                            </li>\n                            <li>Having a project to motivate you work is key. Check out the project ideas below.</li>\n                            <li>If you start with web development and aren't sure you like it try exploring Python. It\n                                allows you to dive into the code faster without needing to learn as much syntax. I'll be\n                                making a tutorial soon.\n                            </li>\n                        </ul>\n                    </p>\n                </Section>\n                <Section link=\"ides\" label=\"Interactive Developer Environment (IDEs)\"\n                         badge={<Badge variant=\"warning\">Full</Badge>}>\n                    <p>\n                        IDEs are applications used for editing code. They improve over simple text editors by adding\n                        shortcuts, template, or other features that make writing code easier. Finding the right IDE\n                        requires trying a lot of different ones.\n                    </p>\n                    <p>\n                        Here are a list of IDEs that I recommend. I personally use Visual Studio code because it works\n                        well with Javascript and Python, my two main languages.\n                    </p>\n\n                    <List newPage={true}>\n                        <ListItem link=\"https://code.visualstudio.com/\">\n                            Visual Studio Code - Great for Front and Backend Development. Good for beginners.\n                        </ListItem>\n                        <ListItem link=\"https://www.jetbrains.com/webstorm/\">\n                            WebStorm - Aimed more at backend development. $59/year\n                        </ListItem>\n                        <ListItem link=\"http://lighttable.com/\">\n                            Light Table - General purpose editor. Aimed at developers who like key commands. Very\n                            minimal UI.\n                        </ListItem>\n                    </List>\n                </Section>\n                <Section link=\"basichtml\" label=\"Basic HTML Elements\" badge={<Badge\n                    variant=\"primary\">Front</Badge>}>\n                    <p>\n                        HTML is a language for displaying items in a certain order on screen. HTML has many different\n                        components for displaying various items. HTML can be thought of as the skeleton of the web page.\n                        It defines the layout and then CSS adds style and coloring. HTML consists of a hierarchy of\n                        elements where each element has a set of children. The children are contained with in the parent\n                        element. The children can either be text, or other elements.\n                    </p>\n                    <p>\n                        Here are the elements I use the most. There are many more but they aren't used nearly as often.\n                        <CardDeck noNumbers={true}>\n                            <CodeSnip.Snip title={\"<div></div>\"} subtitle={\"div tag\"}>\n                                Used for placing items vertically on a screen. A div tag takes up the entire screen\n                                from left to right. Items are placed inside\n                            </CodeSnip.Snip>\n                            <CodeSnip.Snip title={\"<span></span>\"} subtitle={\"span tag\"}>\n                                Used for placing items next to each other as opposed to on top of each other.\n                            </CodeSnip.Snip>\n                            <CodeSnip.Snip title={\"<a></a>\"} subtitle={\"Link Tag\"}>\n                                Used for linking to other pages.\n                                <CodeSnip.Example>\n                                    {`<a href=\"'http://otherpage.com\"> link text </a>`}\n                                </CodeSnip.Example>\n                            </CodeSnip.Snip>\n                        </CardDeck>\n                        <CardDeck>\n                            <CodeSnip.Snip title={\"<h1></h1>\"} subtitle={\"Header Tags\"}>\n                                Headers are defined with h1 down to h5 the larger the number the smaller the text.\n                                On this page the text \"Welcome to Intro Web Dev\" uses the h1 tag.\n                                <CodeSnip.Example>\n                                    {`<h1> Main Page Title </h1>`}\n                                </CodeSnip.Example>\n                            </CodeSnip.Snip>\n                            <CodeSnip.Snip title={\"<img/>\"} subtitle={\"Image Tag\"}>\n                                Displays images on the page. You can either link an image from the local folder or an\n                                address from the internet.\n                                <CodeSnip.Example>\n                                    {`<img src=\"image path or url\"/>`}\n                                </CodeSnip.Example>\n                            </CodeSnip.Snip>\n                        </CardDeck>\n                        <CardDeck>\n                            <CodeSnip.Snip title={\"<body></body>\"} subtitle={\"Body Tag\"}>\n                                Labels the body section of the web page. This is where all the page content goes.\n                            </CodeSnip.Snip>\n                            <CodeSnip.Snip title={\"<head></head>\"} subtitle={\"Head Tag\"}>\n                                All imports and other page data is stored here or used to import other libraries into\n                                the web page. The font this web page uses is Roboto. It is downloaded from Google every\n                                time the page is loaded.\n                            </CodeSnip.Snip>\n                            <CodeSnip.Snip title={\"<p></p>\"} subtitle={\"Paragraph Tag\"}>\n                                A paragraph tag is used for adding space between paragraphs.\n                                <CodeSnip.Example>\n                                    {`<p > Paragraph Text Here </p>`}\n                                </CodeSnip.Example>\n                            </CodeSnip.Snip>\n                        </CardDeck>\n                    </p>\n\n                </Section>\n                <Section link=\"basiccss\" label=\"Basic CSS\" badge={<Badge\n                    variant=\"primary\">Front</Badge>}>\n                    <p>\n                        CSS is used to decorate the page. Changing the font color, size, background color, and borders\n                        are all done through CSS. To apply a CSS property to an element you use the following syntax for\n                        in-line css: <br/>\n                        <code>{`<div style=\"tagname: tagvalue\" >text </div>`}</code> <br/>\n                        However in-line should be avoided as it can become difficult to modify, maintain and use for\n                        more than one element. The better way is be creating a new .css file and defining CSS classes. A\n                        CSS Class is a set of properties that can be applied to an HTML object using the class option:\n                        <br/>\n                        <code> {`<div class=\"title\">title text</div>`}</code>\n                    </p>\n                    <p>\n                        Here are the most used CSS properties:\n                    </p>\n                    <CardDeck>\n                        <CodeSnip.Snip title={\"color\"} subtitle={\"Text Color\"}>\n                            Changes the text color. Web color is based on the RGB color palette. The colors are Red,\n                            Green, and Blue respectively and referred to as color channels. Their values are always\n                            between 0 and 255. The ratio of the three colors defines the final color. The simplest way\n                            to choose a color is using a build in color like, red, white, black, gray, light gray and so\n                            on. A complete list of built in colors can be seen <a target=\"_blank\"\n                                                                                  href=\"http://www.colors.commutercreative.com/grid/\">here</a>.\n                            Another way to specify colors is rgb(30, 40, 50) where each number corresponds to the\n                            respective color channel. White in this format is rgb(255, 255, 255). Black is rgb(0, 0, 0).\n                            <CodeSnip.Example>\n                                {`<div style=\"color: rgb(100, 100, 200)\"> Purple Text </div>`}\n\n                            </CodeSnip.Example>\n                            <b>Result:</b>\n                            <div style={{color: \"rgb(100, 100, 200)\"}}>Purple Text</div>\n                        </CodeSnip.Snip>\n                    </CardDeck>\n                    <CardDeck>\n                        <CodeSnip.Snip title={\"font-size\"} subtitle={\"Font Size\"}>\n                            Changes the text size. The most common unit to use is px for pixels. Normal text sizes are\n                            between 12 for paragraphs of text to 40 for large titles.\n                            <CodeSnip.Example>\n                                {`<div style=\"font-size: 18px\"> 18px text</div>`}\n                            </CodeSnip.Example>\n                            <b>Result:</b>\n                            <div style={{fontSize: \"18px\"}}>18px text</div>\n                        </CodeSnip.Snip>\n                        <CodeSnip.Snip title={\"background-color\"} subtitle={\"Element Background Color\"}>\n                            Sets the background color. In the following example the background is set to Dark Blue and\n                            the text is set to white to remain readable.\n                            <CodeSnip.Example>\n                                {`<div style=\"background-color: darkblue; color: white\"> </div>`}\n                            </CodeSnip.Example>\n                            <b>Result:</b>\n                            <div style={{backgroundColor: \"darkblue\", color: \"white\"}}>18px text</div>\n                        </CodeSnip.Snip>\n                        <CodeSnip.Snip title={\"display\"} subtitle={\"Display\"}>\n                            Sets the element display behavior. The default value is block. Block means the item will\n                            take up the entire width like {`<p>`} or {`<div>`}. A commonly used alternative is flex if\n                            you want the elements children\n                            <CodeSnip.Example>\n                                {`<div style=\"display: block\"> </div>`}\n                            </CodeSnip.Example>\n                        </CodeSnip.Snip>\n                    </CardDeck>\n                    <CardDeck>\n                        <CodeSnip.Snip title={\"margin\"} subtitle={\"Margin around element\"}>\n                            Sets the space between the edge of the element and the surrounding elements. It is outside\n                            of padding. Margin uses pixels or other units to define its size.\n                            <CodeSnip.Example>\n                                {`<span style=\"margin: 5px; \"> text1 </span>`}\n                            </CodeSnip.Example>\n                            <b>Visual:</b>\n                            <div style={{padding: \"5px\", backgroundColor: \"orange\", borderRadius: \"8px\"}}>\n                                Margin\n                                <div style={{\n                                    borderRadius: \"8px\",\n                                    margin: '5px',\n                                    backgroundColor: 'green',\n                                    padding: \"5px\",\n                                    color: \"white\"\n                                }}>\n                                    Padding\n                                    <div style={{\n                                        padding: \"5px\",\n                                        borderRadius: \"8px\",\n                                        backgroundColor: \"white\",\n                                        color: \"black\"\n                                    }}>\n                                        Content\n                                    </div>\n                                </div>\n                            </div>\n                        </CodeSnip.Snip>\n                        <CodeSnip.Snip title={\"padding\"} subtitle={\"Padding content\"}>\n                            Sets the space between the edge of the content and the edge of the background. Look at the\n                            visual to understand the difference between margin and padding. The background is included\n                            in the padding, but not margin.\n                            <CodeSnip.Example>\n                                {`<span style=\"padding: 5px; \"> text </span>`}\n                            </CodeSnip.Example>\n                            <b>Visual:</b>\n                            <div style={{padding: \"5px\", backgroundColor: \"orange\", borderRadius: \"8px\"}}>\n                                Margin\n                                <div style={{\n                                    borderRadius: \"8px\",\n                                    margin: '5px',\n                                    backgroundColor: 'green',\n                                    padding: \"5px\",\n                                    color: \"white\"\n                                }}>\n                                    Padding\n                                    <div style={{\n                                        padding: \"5px\",\n                                        borderRadius: \"8px\",\n                                        backgroundColor: \"white\",\n                                        color: \"black\"\n                                    }}>\n                                        Content\n                                    </div>\n                                </div>\n                            </div>\n                        </CodeSnip.Snip>\n                    </CardDeck>\n                    <CardDeck>\n                        <CodeSnip.Snip title={\"display\"} subtitle={\"Display\"}>\n                            Sets the background color. In the following example the background is set to Dark Blue and\n                            the text is set to white to remain readable.\n                            <CodeSnip.Example>\n                                {`<div style=\"background-color: darkblue; color: white\"> </div>`}\n                            </CodeSnip.Example>\n                            <b>Result:</b>\n                            <div style={{backgroundColor: \"darkblue\", color: \"white\"}}>18px text</div>\n                        </CodeSnip.Snip>\n                    </CardDeck>\n                </Section>\n                <Section link={\"basicjs\"} label={\"Basic Javascript\"} badge={<Badge\n                    variant=\"success\">Back</Badge>}>\n                    <p>\n                        Javascript is the programming language that allows users to interact with a web page. When a\n                        user clicks on a button the events that follow are programmed in Javascript.\n                        Javascript has the same main components of other popular programming languages like C, Java, and\n                        Python. The best way to improve at programming in general is practice. It is no different for\n                        Javascript.\n                    </p>\n                    <p>\n                        Below are important concepts to understand Javascript.\n                    </p>\n                    <SubSection link={\"basicjsvariables\"} label={\"Variables\"}>\n                        Variables are how data is stored. You can define variables\n                        using <code>let</code>, <code>var</code>, or <code>const</code>. <code>let</code> defines a\n                        local variable only defined in the scope of the current block. <code>var</code> defines a\n                        variable accessible within the entire function. <code>const</code> defines a variable that\n                        cannot change and is usually denoted in an all upper case variable name.\n                        <Code.Wrapper>\n                            <Code.Title>\n                                Example Variable Initialization (Creation):\n                            </Code.Title>\n                            <Code.Code>\n                                <Code.Line>\n                                    let numberOfDogs = 10;\n                                </Code.Line>\n                                <Code.Line>\n                                    var numberOfCats = 10;\n                                </Code.Line>\n                                <Code.Line>\n                                    const NUMBER_OF_ANIMALS = 20;\n                                </Code.Line>\n                            </Code.Code>\n                        </Code.Wrapper>\n                    </SubSection>\n                    <SubSection link={'basicjsfunctions'} label={\"Functions\"}>\n                        <p>\n                            Functions are used to perform specific tasks. A example function could be one that displays\n                            \"Hello World\" to the user. Every function has input values, called parameters, and most have\n                            output values.\n                            Parameters are values given to the function so it can perform a calculation. Once the\n                            function is complete it returns the calculated value. Functions are used on tasks repeated\n                            often to reduce writing the same code more than once.\n                        </p>\n\n                        <p>\n                            <Code.Wrapper>\n                                <Code.Title>\n                                    Defining a Function\n                                </Code.Title>\n                                <Code.Code>\n                                    <Code.Line>\n                                        function addOne(number) &#123;\n                                    </Code.Line>\n                                    <Code.Line>\n                                        {`  return number + 1;`}\n                                    </Code.Line>\n                                    <Code.Line>\n                                        &#125;\n                                    </Code.Line>\n                                </Code.Code>\n                                <Code.Description>\n                                    The function is named addOne. It takes a parameter number and returns the number\n                                    plus 1.\n                                    This function assumes the input value is a number.\n                                </Code.Description>\n                            </Code.Wrapper>\n                        </p>\n                        <p>\n                            Running a function is referred to as Calling a function. If I said I called addOne it means\n                            I am running the function with a specified variable.\n                        </p>\n                        <p>\n                            <Code.Wrapper>\n                                <Code.Title>\n                                    Calling a Function\n                                </Code.Title>\n                                <Code.Code>\n                                    <Code.Line>\n                                        addOne(5)\n                                    </Code.Line>\n                                </Code.Code>\n                                <Code.Description>\n                                    This code calls function addOne with the parameter 5. When the function is run the\n                                    parameter 5 is assigned to number. The function adds 1 to number then returns it.\n                                </Code.Description>\n                            </Code.Wrapper>\n                        </p>\n                    </SubSection>\n\n                   <SubSection link={\"basicjsloops\"} label={\"Loops\"}>\n\n                   </SubSection>\n                </Section>\n                <Section link=\"beginner\" label=\"Beginner Projects\" badge={<Badge variant={\"warning\"}>Full</Badge>}>\n\n                </Section>\n            </TableOfContents>\n        </div>\n    )\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport {\n  NavBar,\n  TableOfContents,\n  Section,\n  SideBar\n} from './components/compstore';\n\nimport {\n  IntroWebDev\n} from './components';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <div style={{ display: \"flex\", maxWidth: '1000px', marginLeft: \"auto\", marginRight: 'auto' }}>\n        <SideBar \n          links={[]}\n        />\n        <div>\n        <Router>\n        <Switch>\n          <Route path='/introtoweb'>\n            <IntroWebDev />\n          </Route>\n        </Switch>\n\n        </Router>\n         \n\n          {/* Main Content */}\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}